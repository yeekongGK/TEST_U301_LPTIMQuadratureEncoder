
U031_T3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005cf8  08005cf8  00006cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f48  08005f48  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f48  08005f48  00006f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f50  08005f50  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f50  08005f50  00006f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f54  08005f54  00006f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  08005fb4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005fb4  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124d4  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026dc  00000000  00000000  00019558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf1  00000000  00000000  0001cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8b1  00000000  00000000  0001d791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120c9  00000000  00000000  00038042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aadfd  00000000  00000000  0004a10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  000f4f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f8b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ce0 	.word	0x08005ce0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005ce0 	.word	0x08005ce0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	2201      	movs	r2, #1
 8000652:	431a      	orrs	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	611a      	str	r2, [r3, #16]
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	2206      	movs	r2, #6
 8000670:	4393      	bics	r3, r2
 8000672:	001a      	movs	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	431a      	orrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	611a      	str	r2, [r3, #16]
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	0c1b      	lsrs	r3, r3, #16
 8000694:	041a      	lsls	r2, r3, #16
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	431a      	orrs	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	619a      	str	r2, [r3, #24]
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <LL_LPTIM_OC_SetCompareCH1>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  CompareValue Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_OC_SetCompareCH1(LPTIM_TypeDef *LPTIMx, uint32_t CompareValue)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CCR1, LPTIM_CCR1_CCR1, CompareValue);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	0c1b      	lsrs	r3, r3, #16
 80006b6:	041a      	lsls	r2, r3, #16
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	615a      	str	r2, [r3, #20]
}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <LL_LPTIM_OC_GetCompareCH1>:
  * @rmtoll CCR1          CCR1           LL_LPTIM_OC_GetCompareCH1
  * @param  LPTIMx Low-Power Timer instance
  * @retval CompareValue Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_LPTIM_OC_GetCompareCH1(const LPTIM_TypeDef *LPTIMx)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(LPTIMx->CCR1, LPTIM_CCR1_CCR1));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	041b      	lsls	r3, r3, #16
 80006d6:	0c1b      	lsrs	r3, r3, #16
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <LL_LPTIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_LPTIM_GetCounter
  * @param  LPTIMx Low-Power Timer instance
  * @retval Counter value
  */
__STATIC_INLINE uint32_t LL_LPTIM_GetCounter(const LPTIM_TypeDef *LPTIMx)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(LPTIMx->CNT, LPTIM_CNT_CNT));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c1b      	lsrs	r3, r3, #16
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <LL_LPTIM_SetEncoderMode>:
  *         @arg @ref LL_LPTIM_ENCODER_MODE_FALLING
  *         @arg @ref LL_LPTIM_ENCODER_MODE_RISING_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetEncoderMode(LPTIM_TypeDef *LPTIMx, uint32_t EncoderMode)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKPOL, EncoderMode);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2206      	movs	r2, #6
 8000708:	4393      	bics	r3, r2
 800070a:	001a      	movs	r2, r3
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	431a      	orrs	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	60da      	str	r2, [r3, #12]
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}

0800071c <LL_LPTIM_EnableEncoderMode>:
  * @rmtoll CFGR         ENC           LL_LPTIM_EnableEncoderMode
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableEncoderMode(LPTIM_TypeDef *LPTIMx)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CFGR, LPTIM_CFGR_ENC);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	0452      	lsls	r2, r2, #17
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}

0800073a <LL_LPTIM_IsActiveFlag_UP>:
  * @rmtoll ISR          UP            LL_LPTIM_IsActiveFlag_UP
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_UP(const LPTIM_TypeDef *LPTIMx)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_UP) == LPTIM_ISR_UP) ? 1UL : 0UL));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2220      	movs	r2, #32
 8000748:	4013      	ands	r3, r2
 800074a:	2b20      	cmp	r3, #32
 800074c:	d101      	bne.n	8000752 <LL_LPTIM_IsActiveFlag_UP+0x18>
 800074e:	2301      	movs	r3, #1
 8000750:	e000      	b.n	8000754 <LL_LPTIM_IsActiveFlag_UP+0x1a>
 8000752:	2300      	movs	r3, #0
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}

0800075c <LL_LPTIM_IsActiveFlag_DOWN>:
  * @rmtoll ISR          DOWN          LL_LPTIM_IsActiveFlag_DOWN
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_DOWN(const LPTIM_TypeDef *LPTIMx)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_DOWN) == LPTIM_ISR_DOWN) ? 1UL : 0UL));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2240      	movs	r2, #64	@ 0x40
 800076a:	4013      	ands	r3, r2
 800076c:	2b40      	cmp	r3, #64	@ 0x40
 800076e:	d101      	bne.n	8000774 <LL_LPTIM_IsActiveFlag_DOWN+0x18>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <LL_LPTIM_IsActiveFlag_DOWN+0x1a>
 8000774:	2300      	movs	r3, #0
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fe56 	bl	8001436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f843 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9cf 	bl	8000b30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 f97f 	bl	8000a94 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8000796:	f000 f8a7 	bl	80008e8 <MX_LPTIM1_Init>
  MX_RTC_Init();
 800079a:	f000 f8dd 	bl	8000958 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  TRACSENS_StartCounting();
 800079e:	f000 fb0d 	bl	8000dbc <TRACSENS_StartCounting>

	if (HAL_LPTIM_Counter_Start_IT(&hlptim1) != HAL_OK)
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <main+0x88>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 faa3 	bl	8001cf0 <HAL_LPTIM_Counter_Start_IT>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <main+0x32>
	{
	  Error_Handler();
 80007ae:	f000 fc49 	bl	8001044 <Error_Handler>
	}

	/* Disable autoreload write complete interrupt */
	__HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_ARROK);
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <main+0x88>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <main+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2110      	movs	r1, #16
 80007be:	438a      	bics	r2, r1
 80007c0:	609a      	str	r2, [r3, #8]

	uint32_t value = LL_LPTIM_OC_GetCompareCH1(LPTIM1);
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <main+0x8c>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff7f 	bl	80006c8 <LL_LPTIM_OC_GetCompareCH1>
 80007ca:	0003      	movs	r3, r0
 80007cc:	607b      	str	r3, [r7, #4]

	UART_Printf("Main start %d\n\r", value);
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <main+0x90>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fc09 	bl	8000fec <UART_Printf>
	TRACSENS_DisplayInfo();
 80007da:	f000 fa0b 	bl	8000bf4 <TRACSENS_DisplayInfo>
	HAL_Delay(1000);
 80007de:	23fa      	movs	r3, #250	@ 0xfa
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fea4 	bl	8001530 <HAL_Delay>

	int32_t reading = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  reading = TRACSENS_GetCounter();
 80007ec:	f000 fa22 	bl	8000c34 <TRACSENS_GetCounter>
 80007f0:	0003      	movs	r3, r0
 80007f2:	603b      	str	r3, [r7, #0]
  //	  UART_Printf("reading %d %d\r\n",reading, lCntrMultiplier);
	  TRACSENS_DisplayInfo();
 80007f4:	f000 f9fe 	bl	8000bf4 <TRACSENS_DisplayInfo>
	  HAL_Delay(2000);
 80007f8:	23fa      	movs	r3, #250	@ 0xfa
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fe97 	bl	8001530 <HAL_Delay>
	  reading = TRACSENS_GetCounter();
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	e7f2      	b.n	80007ec <main+0x6c>
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	20000078 	.word	0x20000078
 800080c:	40007c00 	.word	0x40007c00
 8000810:	08005cf8 	.word	0x08005cf8

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b097      	sub	sp, #92	@ 0x5c
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	2410      	movs	r4, #16
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2348      	movs	r3, #72	@ 0x48
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f004 fde1 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f004 fdda 	bl	80053ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fe99 	bl	8002574 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000842:	f001 fe89 	bl	8002558 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000846:	4a27      	ldr	r2, [pc, #156]	@ (80008e4 <SystemClock_Config+0xd0>)
 8000848:	2390      	movs	r3, #144	@ 0x90
 800084a:	58d3      	ldr	r3, [r2, r3]
 800084c:	4925      	ldr	r1, [pc, #148]	@ (80008e4 <SystemClock_Config+0xd0>)
 800084e:	2218      	movs	r2, #24
 8000850:	4393      	bics	r3, r2
 8000852:	2290      	movs	r2, #144	@ 0x90
 8000854:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2206      	movs	r2, #6
 800085a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2281      	movs	r2, #129	@ 0x81
 8000860:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	0052      	lsls	r2, r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2240      	movs	r2, #64	@ 0x40
 8000870:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2202      	movs	r2, #2
 800087c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2206      	movs	r2, #6
 8000888:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	0292      	lsls	r2, r2, #10
 8000890:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	0492      	lsls	r2, r2, #18
 8000898:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	22a0      	movs	r2, #160	@ 0xa0
 800089e:	0612      	lsls	r2, r2, #24
 80008a0:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fed1 	bl	800264c <HAL_RCC_OscConfig>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ae:	f000 fbc9 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	003b      	movs	r3, r7
 80008b4:	2207      	movs	r2, #7
 80008b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	003b      	movs	r3, r7
 80008ba:	2203      	movs	r2, #3
 80008bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ca:	003b      	movs	r3, r7
 80008cc:	2101      	movs	r1, #1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 faa2 	bl	8002e18 <HAL_RCC_ClockConfig>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008d8:	f000 fbb4 	bl	8001044 <Error_Handler>
  }
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b017      	add	sp, #92	@ 0x5c
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40021000 	.word	0x40021000

080008e8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80008ec:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_LPTIM1_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	@ (8000950 <MX_LPTIM1_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_LPTIM1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_LPTIM1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_LPTIM1_Init+0x64>)
 800090c:	4a11      	ldr	r2, [pc, #68]	@ (8000954 <MX_LPTIM1_Init+0x6c>)
 800090e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 100;
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000912:	2264      	movs	r2, #100	@ 0x64
 8000914:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_LPTIM1_Init+0x64>)
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	0412      	lsls	r2, r2, #16
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_LPTIM1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <MX_LPTIM1_Init+0x64>)
 8000938:	0018      	movs	r0, r3
 800093a:	f001 f885 	bl	8001a48 <HAL_LPTIM_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 8000942:	f000 fb7f 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000078 	.word	0x20000078
 8000950:	40007c00 	.word	0x40007c00
 8000954:	0000ffff 	.word	0x0000ffff

08000958 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b092      	sub	sp, #72	@ 0x48
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800095e:	2334      	movs	r3, #52	@ 0x34
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f004 fd3f 	bl	80053ec <memset>
  RTC_DateTypeDef sDate = {0};
 800096e:	2330      	movs	r3, #48	@ 0x30
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000976:	003b      	movs	r3, r7
 8000978:	0018      	movs	r0, r3
 800097a:	2330      	movs	r3, #48	@ 0x30
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f004 fd34 	bl	80053ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000984:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <MX_RTC_Init+0x134>)
 8000986:	4a42      	ldr	r2, [pc, #264]	@ (8000a90 <MX_RTC_Init+0x138>)
 8000988:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800098a:	4b40      	ldr	r3, [pc, #256]	@ (8000a8c <MX_RTC_Init+0x134>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000990:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <MX_RTC_Init+0x134>)
 8000992:	227f      	movs	r2, #127	@ 0x7f
 8000994:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000996:	4b3d      	ldr	r3, [pc, #244]	@ (8000a8c <MX_RTC_Init+0x134>)
 8000998:	22ff      	movs	r2, #255	@ 0xff
 800099a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800099c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a8c <MX_RTC_Init+0x134>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009a2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009a8:	4b38      	ldr	r3, [pc, #224]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	05d2      	lsls	r2, r2, #23
 80009b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009b6:	4b35      	ldr	r3, [pc, #212]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80009bc:	4b33      	ldr	r3, [pc, #204]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c2:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f003 fb07 	bl	8003fd8 <HAL_RTC_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_RTC_Init+0x7a>
  {
    Error_Handler();
 80009ce:	f000 fb39 	bl	8001044 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009d2:	2134      	movs	r1, #52	@ 0x34
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009f2:	1879      	adds	r1, r7, r1
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <MX_RTC_Init+0x134>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	0018      	movs	r0, r3
 80009fa:	f003 fb93 	bl	8004124 <HAL_RTC_SetTime>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8000a02:	f000 fb1f 	bl	8001044 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a06:	2130      	movs	r1, #48	@ 0x30
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2201      	movs	r2, #1
 8000a18:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2225      	movs	r2, #37	@ 0x25
 8000a1e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a20:	1879      	adds	r1, r7, r1
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_RTC_Init+0x134>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 fc3c 	bl	80042a4 <HAL_RTC_SetDate>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000a30:	f000 fb08 	bl	8001044 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000a34:	003b      	movs	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8000a40:	003b      	movs	r3, r7
 8000a42:	2210      	movs	r2, #16
 8000a44:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a58:	003b      	movs	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a5e:	003b      	movs	r3, r7
 8000a60:	2224      	movs	r2, #36	@ 0x24
 8000a62:	2101      	movs	r1, #1
 8000a64:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a66:	003b      	movs	r3, r7
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	0052      	lsls	r2, r2, #1
 8000a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a6e:	0039      	movs	r1, r7
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_RTC_Init+0x134>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f003 fcbb 	bl	80043f0 <HAL_RTC_SetAlarm_IT>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000a7e:	f000 fae1 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b012      	add	sp, #72	@ 0x48
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000110 	.word	0x20000110
 8000a90:	40002800 	.word	0x40002800

08000a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000a9a:	4a24      	ldr	r2, [pc, #144]	@ (8000b2c <MX_USART2_UART_Init+0x98>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000aa0:	22e1      	movs	r2, #225	@ 0xe1
 8000aa2:	0252      	lsls	r2, r2, #9
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f003 fe48 	bl	8004774 <HAL_UART_Init>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 faac 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	0018      	movs	r0, r3
 8000af2:	f004 fb61 	bl	80051b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 faa3 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000b00:	2100      	movs	r1, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f004 fb98 	bl	8005238 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 fa9a 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <MX_USART2_UART_Init+0x94>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f004 fb16 	bl	8005144 <HAL_UARTEx_DisableFifoMode>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 fa92 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	20000140 	.word	0x20000140
 8000b2c:	40004400 	.word	0x40004400

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	240c      	movs	r4, #12
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f004 fc53 	bl	80053ec <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	2204      	movs	r2, #4
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b62:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b64:	2120      	movs	r1, #32
 8000b66:	430a      	orrs	r2, r1
 8000b68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	2220      	movs	r2, #32
 8000b70:	4013      	ands	r3, r2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_GPIO_Init+0xbc>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b8e:	23a0      	movs	r3, #160	@ 0xa0
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	2200      	movs	r2, #0
 8000b94:	2120      	movs	r1, #32
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 ff38 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	0192      	lsls	r2, r2, #6
 8000ba2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <MX_GPIO_Init+0xc0>)
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	f000 fdbc 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bbc:	0021      	movs	r1, r4
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	187a      	adds	r2, r7, r1
 8000bd8:	23a0      	movs	r3, #160	@ 0xa0
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fda8 	bl	8001734 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b009      	add	sp, #36	@ 0x24
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	50000800 	.word	0x50000800

08000bf4 <TRACSENS_DisplayInfo>:

/* USER CODE BEGIN 4 */


void TRACSENS_DisplayInfo(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af02      	add	r7, sp, #8
	static int32_t _prevPulse= 0;
	int32_t _currPulse= TRACSENS_GetCounter();
 8000bfa:	f000 f81b 	bl	8000c34 <TRACSENS_GetCounter>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	607b      	str	r3, [r7, #4]
//	if(_prevPulse!= _currPulse)
//	{
//		_prevPulse= _currPulse;

		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
				_currPulse, pConfig->rteErrorPatternCount, pConfig->rteErrorPatternState, pConfig->rteErrorPatternPreviousPulse);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <TRACSENS_DisplayInfo+0x38>)
 8000c04:	681b      	ldr	r3, [r3, #0]
		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
 8000c06:	68da      	ldr	r2, [r3, #12]
				_currPulse, pConfig->rteErrorPatternCount, pConfig->rteErrorPatternState, pConfig->rteErrorPatternPreviousPulse);
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <TRACSENS_DisplayInfo+0x38>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	7c5b      	ldrb	r3, [r3, #17]
		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
 8000c0e:	001c      	movs	r4, r3
				_currPulse, pConfig->rteErrorPatternCount, pConfig->rteErrorPatternState, pConfig->rteErrorPatternPreviousPulse);
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <TRACSENS_DisplayInfo+0x38>)
 8000c12:	681b      	ldr	r3, [r3, #0]
		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <TRACSENS_DisplayInfo+0x3c>)
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	0023      	movs	r3, r4
 8000c1e:	f000 f9e5 	bl	8000fec <UART_Printf>
//	}
}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b003      	add	sp, #12
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	200001e4 	.word	0x200001e4
 8000c30:	08005d08 	.word	0x08005d08

08000c34 <TRACSENS_GetCounter>:

static int32_t TRACSENS_GetCounter(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	int32_t _value;
    do/* 2 consecutive readings need to be the same*/
    {
    	_value= LL_LPTIM_GetCounter(LPTIM1);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <TRACSENS_GetCounter+0x2c>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fd4f 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000c42:	0003      	movs	r3, r0
 8000c44:	607b      	str	r3, [r7, #4]
    }while(LL_LPTIM_GetCounter(LPTIM1)!= _value);
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <TRACSENS_GetCounter+0x2c>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fd49 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d1f1      	bne.n	8000c3a <TRACSENS_GetCounter+0x6>
//		_value= 0xFFFF& ((TRACSENS_CFG_AUTORELOAD_VALUE+ 1)- _value);
//	}
//
//    _value+= (lCntrMultiplier* (TRACSENS_CFG_AUTORELOAD_VALUE+ 1));

    return _value;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40007c00 	.word	0x40007c00

08000c64 <TRACSENS_CompareCallback>:

void TRACSENS_CompareCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_CompareCallback\n\r");
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <TRACSENS_CompareCallback+0x28>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f9bc 	bl	8000fec <UART_Printf>
	if(UNKNOWN_CounterDirection== eCounterDirection)/*initially we don't know. we choose forward cos this compare confirming it forward*/
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <TRACSENS_CompareCallback+0x2c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <TRACSENS_CompareCallback+0x1e>
	{
		eCounterDirection= FORWARD_CounterDirection;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <TRACSENS_CompareCallback+0x2c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
	}

	//DBG_Print("CompareCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	08005d50 	.word	0x08005d50
 8000c90:	200001d8 	.word	0x200001d8

08000c94 <TRACSENS_CounterChangedToUpCallback>:

void TRACSENS_CounterChangedToUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_CounterChangedToUpCallback\n\r");
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <TRACSENS_CounterChangedToUpCallback+0x2c>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 f9a4 	bl	8000fec <UART_Printf>
	eCounterDirection= FORWARD_CounterDirection;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <TRACSENS_CounterChangedToUpCallback+0x30>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]

	if(true== pConfig->enableErrorPatternCheck)
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <TRACSENS_CounterChangedToUpCallback+0x34>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <TRACSENS_CounterChangedToUpCallback+0x24>
	{
		TRACSENS_ChangedToUpErrorHandling();
 8000cb4:	f000 f90c 	bl	8000ed0 <TRACSENS_ChangedToUpErrorHandling>
	}

	//DBG_Print("CounterChangedToUpCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08005d6c 	.word	0x08005d6c
 8000cc4:	200001d8 	.word	0x200001d8
 8000cc8:	200001e4 	.word	0x200001e4

08000ccc <TRACSENS_CounterChangedToDownCallback>:

void TRACSENS_CounterChangedToDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_CounterChangedToDownCallback\n\r");
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <TRACSENS_CounterChangedToDownCallback+0x2c>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 f988 	bl	8000fec <UART_Printf>
	eCounterDirection= BACKWARD_CounterDirection;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <TRACSENS_CounterChangedToDownCallback+0x30>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	701a      	strb	r2, [r3, #0]

	if(true== pConfig->enableErrorPatternCheck)
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <TRACSENS_CounterChangedToDownCallback+0x34>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <TRACSENS_CounterChangedToDownCallback+0x24>
	{
		TRACSENS_ChangedToDownErrorHandling();
 8000cec:	f000 f900 	bl	8000ef0 <TRACSENS_ChangedToDownErrorHandling>
	}

	//DBG_Print("CounterChangedToDownCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08005d94 	.word	0x08005d94
 8000cfc:	200001d8 	.word	0x200001d8
 8000d00:	200001e4 	.word	0x200001e4

08000d04 <TRACSENS_AutoReloadMatchCallback>:

void TRACSENS_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_AutoReloadMatchCallback\n\r");
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <TRACSENS_AutoReloadMatchCallback+0xa4>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 f96c 	bl	8000fec <UART_Printf>
	if(UNKNOWN_CounterDirection== eCounterDirection)/*initially we don't know. we choose backward cos we have a compare int to choose forward*/
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <TRACSENS_AutoReloadMatchCallback+0x1e>
	{
		eCounterDirection= BACKWARD_CounterDirection;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d1e:	2202      	movs	r2, #2
 8000d20:	701a      	strb	r2, [r3, #0]
	}

	/*check and set cos sometimes direction interrupt will occur simultaneously with ARR interrupt, but served after ARR*/
	if(LL_LPTIM_IsActiveFlag_UP(LPTIM1))
 8000d22:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <TRACSENS_AutoReloadMatchCallback+0xac>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fd08 	bl	800073a <LL_LPTIM_IsActiveFlag_UP>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d00f      	beq.n	8000d4e <TRACSENS_AutoReloadMatchCallback+0x4a>
	{
		if(NORMAL_CounterMode== eMode)
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <TRACSENS_AutoReloadMatchCallback+0x3a>
		{
			eCounterDirection= FORWARD_CounterDirection;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e01c      	b.n	8000d78 <TRACSENS_AutoReloadMatchCallback+0x74>
		}
		else if(INVERT_CounterMode== eMode)
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d118      	bne.n	8000d78 <TRACSENS_AutoReloadMatchCallback+0x74>
		{
			eCounterDirection= BACKWARD_CounterDirection;
 8000d46:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e014      	b.n	8000d78 <TRACSENS_AutoReloadMatchCallback+0x74>
		}
	}
	else if(LL_LPTIM_IsActiveFlag_DOWN(LPTIM1))
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <TRACSENS_AutoReloadMatchCallback+0xac>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fd03 	bl	800075c <LL_LPTIM_IsActiveFlag_DOWN>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d00e      	beq.n	8000d78 <TRACSENS_AutoReloadMatchCallback+0x74>
	{
		if(NORMAL_CounterMode== eMode)
 8000d5a:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d103      	bne.n	8000d6a <TRACSENS_AutoReloadMatchCallback+0x66>
		{
			eCounterDirection= BACKWARD_CounterDirection;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e006      	b.n	8000d78 <TRACSENS_AutoReloadMatchCallback+0x74>
		}
		else if(INVERT_CounterMode== eMode)
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <TRACSENS_AutoReloadMatchCallback+0x74>
		{
			eCounterDirection= FORWARD_CounterDirection;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
		}
	}

	if(FORWARD_CounterDirection== eCounterDirection)
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <TRACSENS_AutoReloadMatchCallback+0x88>
	{
		lCntrMultiplier++;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d88:	601a      	str	r2, [r3, #0]
	{
		lCntrMultiplier--;
	}

	//DBG_Print("AutoReloadMatchCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000d8a:	e008      	b.n	8000d9e <TRACSENS_AutoReloadMatchCallback+0x9a>
	else if(BACKWARD_CounterDirection== eCounterDirection)
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d104      	bne.n	8000d9e <TRACSENS_AutoReloadMatchCallback+0x9a>
		lCntrMultiplier--;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	08005dbc 	.word	0x08005dbc
 8000dac:	200001d8 	.word	0x200001d8
 8000db0:	40007c00 	.word	0x40007c00
 8000db4:	200001d4 	.word	0x200001d4
 8000db8:	200001dc 	.word	0x200001dc

08000dbc <TRACSENS_StartCounting>:
void TRACSENS_StartCounting()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	TRACSENS_Power(true);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 f909 	bl	8000fd8 <TRACSENS_Power>

	if(NORMAL_CounterMode== eMode)
 8000dc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <TRACSENS_StartCounting+0xec>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d118      	bne.n	8000e00 <TRACSENS_StartCounting+0x44>
	{
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, TRACSENS_CompareCallback);
 8000dce:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <TRACSENS_StartCounting+0xf0>)
 8000dd0:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f001 fa9d 	bl	8002314 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_AUTORELOAD_MATCH_CB_ID, TRACSENS_AutoReloadMatchCallback);
 8000dda:	4a36      	ldr	r2, [pc, #216]	@ (8000eb4 <TRACSENS_StartCounting+0xf8>)
 8000ddc:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000dde:	2103      	movs	r1, #3
 8000de0:	0018      	movs	r0, r3
 8000de2:	f001 fa97 	bl	8002314 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_UP_CB_ID, TRACSENS_CounterChangedToUpCallback);
 8000de6:	4a34      	ldr	r2, [pc, #208]	@ (8000eb8 <TRACSENS_StartCounting+0xfc>)
 8000de8:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000dea:	2107      	movs	r1, #7
 8000dec:	0018      	movs	r0, r3
 8000dee:	f001 fa91 	bl	8002314 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_DOWN_CB_ID, TRACSENS_CounterChangedToDownCallback);
 8000df2:	4a32      	ldr	r2, [pc, #200]	@ (8000ebc <TRACSENS_StartCounting+0x100>)
 8000df4:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000df6:	2108      	movs	r1, #8
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 fa8b 	bl	8002314 <HAL_LPTIM_RegisterCallback>
 8000dfe:	e01b      	b.n	8000e38 <TRACSENS_StartCounting+0x7c>
	}
	else if(INVERT_CounterMode== eMode)
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <TRACSENS_StartCounting+0xec>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d117      	bne.n	8000e38 <TRACSENS_StartCounting+0x7c>
	{
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, TRACSENS_CompareCallback);
 8000e08:	4a28      	ldr	r2, [pc, #160]	@ (8000eac <TRACSENS_StartCounting+0xf0>)
 8000e0a:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 fa80 	bl	8002314 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_AUTORELOAD_MATCH_CB_ID, TRACSENS_AutoReloadMatchCallback);
 8000e14:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <TRACSENS_StartCounting+0xf8>)
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000e18:	2103      	movs	r1, #3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 fa7a 	bl	8002314 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_UP_CB_ID, TRACSENS_CounterChangedToDownCallback);
 8000e20:	4a26      	ldr	r2, [pc, #152]	@ (8000ebc <TRACSENS_StartCounting+0x100>)
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000e24:	2107      	movs	r1, #7
 8000e26:	0018      	movs	r0, r3
 8000e28:	f001 fa74 	bl	8002314 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_DOWN_CB_ID, TRACSENS_CounterChangedToUpCallback);
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <TRACSENS_StartCounting+0xfc>)
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <TRACSENS_StartCounting+0xf4>)
 8000e30:	2108      	movs	r1, #8
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fa6e 	bl	8002314 <HAL_LPTIM_RegisterCallback>
	}

	uwCompareValue=0x01;/*used once to detect direction*/
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <TRACSENS_StartCounting+0x104>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	801a      	strh	r2, [r3, #0]
//	LL_LPTIM_EnableIT_CC1(LPTIM1);		/*Enable the Compare Match interrupt for Channel 1 */
//	LL_LPTIM_EnableIT_ARRM(LPTIM1); 	/*Enable autoreload match interrupt (ARRMIE).*/
//	LL_LPTIM_EnableIT_UP(LPTIM1);		/*Enable direction change to up interrupt (UPIE).*/
//	LL_LPTIM_EnableIT_DOWN(LPTIM1);		/*Enable direction change to down interrupt (DOWNIE).*/

	LL_LPTIM_OC_SetCompareCH1(LPTIM1, 11);
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e40:	210b      	movs	r1, #11
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff fc2f 	bl	80006a6 <LL_LPTIM_OC_SetCompareCH1>
//	LL_LPTIM_SetCompare(LPTIM1, uwCompareValue);/*we need this to know the initial pulse direction(which we don't know after reset)*/

	LL_LPTIM_SetEncoderMode(LPTIM1, LL_LPTIM_ENCODER_MODE_RISING_FALLING);
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fc53 	bl	80006f8 <LL_LPTIM_SetEncoderMode>
    LL_LPTIM_EnableEncoderMode(LPTIM1);
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff fc61 	bl	800071c <LL_LPTIM_EnableEncoderMode>
    LL_LPTIM_Enable(LPTIM1);
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff fbf1 	bl	8000644 <LL_LPTIM_Enable>
	LL_LPTIM_SetAutoReload(LPTIM1, TRACSENS_CFG_AUTORELOAD_VALUE);
 8000e62:	4a19      	ldr	r2, [pc, #100]	@ (8000ec8 <TRACSENS_StartCounting+0x10c>)
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff fc0b 	bl	8000684 <LL_LPTIM_SetAutoReload>
    LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e70:	2104      	movs	r1, #4
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fbf4 	bl	8000660 <LL_LPTIM_StartCounter>
    //LPTIM_FeedExternalClock();/*needed when using external clock in counter mode*/

    /*this is needed during power up as we always get extra pulse a bit while after start counting*/
	HAL_Delay(1);	/*when reboot, we get extra pulse*/
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f000 fb59 	bl	8001530 <HAL_Delay>

	do/* 2 consecutive readings need to be the same*/
    {
    	lCntrErrorReading= LL_LPTIM_GetCounter(LPTIM1);
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fc2d 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001a      	movs	r2, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <TRACSENS_StartCounting+0x110>)
 8000e8c:	601a      	str	r2, [r3, #0]
    }while(LL_LPTIM_GetCounter(LPTIM1)!= lCntrErrorReading);
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <TRACSENS_StartCounting+0x108>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff fc25 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000e96:	0002      	movs	r2, r0
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <TRACSENS_StartCounting+0x110>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d1ee      	bne.n	8000e7e <TRACSENS_StartCounting+0xc2>

	//DBG_Print("lCntrErrorReading: %d.\r\n", lCntrErrorReading);
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200001d4 	.word	0x200001d4
 8000eac:	08000c65 	.word	0x08000c65
 8000eb0:	20000078 	.word	0x20000078
 8000eb4:	08000d05 	.word	0x08000d05
 8000eb8:	08000c95 	.word	0x08000c95
 8000ebc:	08000ccd 	.word	0x08000ccd
 8000ec0:	200001d6 	.word	0x200001d6
 8000ec4:	40007c00 	.word	0x40007c00
 8000ec8:	0000ffff 	.word	0x0000ffff
 8000ecc:	200001e0 	.word	0x200001e0

08000ed0 <TRACSENS_ChangedToUpErrorHandling>:

void TRACSENS_ChangedToUpErrorHandling(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	if(BWD_EXPECTING_FWD_CounterErrorState== pConfig->rteErrorPatternState)
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <TRACSENS_ChangedToUpErrorHandling+0x1c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	7c5b      	ldrb	r3, [r3, #17]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d103      	bne.n	8000ee6 <TRACSENS_ChangedToUpErrorHandling+0x16>
	{
		pConfig->rteErrorPatternState= FWD_EXPECTING_BWD_END_CounterErrorState;
 8000ede:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <TRACSENS_ChangedToUpErrorHandling+0x1c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	745a      	strb	r2, [r3, #17]
	}

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200001e4 	.word	0x200001e4

08000ef0 <TRACSENS_ChangedToDownErrorHandling>:

void TRACSENS_ChangedToDownErrorHandling(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	int32_t _curr= TRACSENS_GetCounter();
 8000ef6:	f7ff fe9d 	bl	8000c34 <TRACSENS_GetCounter>
 8000efa:	0003      	movs	r3, r0
 8000efc:	607b      	str	r3, [r7, #4]
	if(0!= (_curr- pConfig->rteErrorPatternPreviousPulse))
 8000efe:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d013      	beq.n	8000f32 <TRACSENS_ChangedToDownErrorHandling+0x42>
	{
		pConfig->rteErrorPatternState= NONE_CounterErrorState; /*reset if we get real pulse inbetween error pattern*/
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	745a      	strb	r2, [r3, #17]
		pConfig->rteErrorPatternJustStarted= false;
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	761a      	strb	r2, [r3, #24]
		if(false== pConfig->rteErrorPatternCompensationStarted)
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	7c1b      	ldrb	r3, [r3, #16]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4053      	eors	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <TRACSENS_ChangedToDownErrorHandling+0x42>
		{
			pConfig->rteErrorPatternCount= 0;/*we need consecutive error pattern to mark the meter as erroneous that we can handle*/
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
			//DBG_Print("#stat:mag2: errorPatternCountCleared >\r\n");
		}
	}
	if(NONE_CounterErrorState== pConfig->rteErrorPatternState)
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	7c5b      	ldrb	r3, [r3, #17]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d108      	bne.n	8000f4e <TRACSENS_ChangedToDownErrorHandling+0x5e>
	{
		pConfig->rteErrorPatternJustStarted= true;
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	761a      	strb	r2, [r3, #24]
		pConfig->rteErrorPatternState= BWD_EXPECTING_FWD_CounterErrorState;
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2202      	movs	r2, #2
 8000f4a:	745a      	strb	r2, [r3, #17]
 8000f4c:	e03a      	b.n	8000fc4 <TRACSENS_ChangedToDownErrorHandling+0xd4>
	}
	else if(FWD_EXPECTING_BWD_CounterErrorState== pConfig->rteErrorPatternState)
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	7c5b      	ldrb	r3, [r3, #17]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d104      	bne.n	8000f62 <TRACSENS_ChangedToDownErrorHandling+0x72>
	{
		pConfig->rteErrorPatternState= BWD_EXPECTING_FWD_END_CounterErrorState;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	745a      	strb	r2, [r3, #17]
 8000f60:	e030      	b.n	8000fc4 <TRACSENS_ChangedToDownErrorHandling+0xd4>
	}
	else if(FWD_EXPECTING_BWD_END_CounterErrorState== pConfig->rteErrorPatternState)
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	7c5b      	ldrb	r3, [r3, #17]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d12b      	bne.n	8000fc4 <TRACSENS_ChangedToDownErrorHandling+0xd4>
	{
		pConfig->rteErrorPatternCount++;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	3201      	adds	r2, #1
 8000f74:	60da      	str	r2, [r3, #12]
		if(true== pConfig->rteErrorPatternJustStarted)
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	7e1b      	ldrb	r3, [r3, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <TRACSENS_ChangedToDownErrorHandling+0xa2>
		{
			pConfig->rteErrorPatternJustStarted= false;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2200      	movs	r2, #0
 8000f86:	761a      	strb	r2, [r3, #24]
			pConfig->rteErrorPatternCount++;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	3201      	adds	r2, #1
 8000f90:	60da      	str	r2, [r3, #12]
		}

		if((false== pConfig->rteErrorPatternCompensationStarted)&& (pConfig->errorPatternConfirmationCount<= pConfig->rteErrorPatternCount))
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	7c1b      	ldrb	r3, [r3, #16]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4053      	eors	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00c      	beq.n	8000fbc <TRACSENS_ChangedToDownErrorHandling+0xcc>
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	885b      	ldrh	r3, [r3, #2]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d803      	bhi.n	8000fbc <TRACSENS_ChangedToDownErrorHandling+0xcc>
		{
			pConfig->rteErrorPatternCompensationStarted= true;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	741a      	strb	r2, [r3, #16]
			//DBG_Print("#stat:mag2: errorPatternCompensationStarted > \r\n");
		}
		pConfig->rteErrorPatternState= BWD_EXPECTING_FWD_CounterErrorState;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	745a      	strb	r2, [r3, #17]
	}
	pConfig->rteErrorPatternPreviousPulse= _curr;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	615a      	str	r2, [r3, #20]
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001e4 	.word	0x200001e4

08000fd8 <TRACSENS_Power>:

static void TRACSENS_Power(bool _enable)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}

08000fec <UART_Printf>:

void UART_Printf(char *format, ...)
{
 8000fec:	b40f      	push	{r0, r1, r2, r3}
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b0c3      	sub	sp, #268	@ 0x10c
 8000ff2:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 8000ff4:	238a      	movs	r3, #138	@ 0x8a
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	185b      	adds	r3, r3, r1
 8000ffc:	19db      	adds	r3, r3, r7
 8000ffe:	607b      	str	r3, [r7, #4]
  vsnprintf(str, sizeof(str), format, args);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2288      	movs	r2, #136	@ 0x88
 8001004:	0052      	lsls	r2, r2, #1
 8001006:	1852      	adds	r2, r2, r1
 8001008:	19d2      	adds	r2, r2, r7
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	0049      	lsls	r1, r1, #1
 8001010:	2408      	movs	r4, #8
 8001012:	1938      	adds	r0, r7, r4
 8001014:	f004 f9de 	bl	80053d4 <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001018:	193b      	adds	r3, r7, r4
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff f874 	bl	8000108 <strlen>
 8001020:	0003      	movs	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	1939      	adds	r1, r7, r4
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <UART_Printf+0x54>)
 800102c:	f003 fbf8 	bl	8004820 <HAL_UART_Transmit>
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b043      	add	sp, #268	@ 0x10c
 8001036:	bc90      	pop	{r4, r7}
 8001038:	bc08      	pop	{r3}
 800103a:	b004      	add	sp, #16
 800103c:	4718      	bx	r3
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	20000140 	.word	0x20000140

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	e7fd      	b.n	800104c <Error_Handler+0x8>

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_MspInit+0x44>)
 8001058:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_MspInit+0x44>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	0549      	lsls	r1, r1, #21
 8001060:	430a      	orrs	r2, r1
 8001062:	659a      	str	r2, [r3, #88]	@ 0x58
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_MspInit+0x44>)
 8001066:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	055b      	lsls	r3, r3, #21
 800106c:	4013      	ands	r3, r2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_MspInit+0x44>)
 8001074:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <HAL_MspInit+0x44>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	661a      	str	r2, [r3, #96]	@ 0x60
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_MspInit+0x44>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b099      	sub	sp, #100	@ 0x64
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	234c      	movs	r3, #76	@ 0x4c
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	0018      	movs	r0, r3
 80010a6:	2314      	movs	r3, #20
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	f004 f99e 	bl	80053ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	2414      	movs	r4, #20
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	0018      	movs	r0, r3
 80010b6:	2338      	movs	r3, #56	@ 0x38
 80010b8:	001a      	movs	r2, r3
 80010ba:	2100      	movs	r1, #0
 80010bc:	f004 f996 	bl	80053ec <memset>
  if(hlptim->Instance==LPTIM1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a26      	ldr	r2, [pc, #152]	@ (8001160 <HAL_LPTIM_MspInit+0xc8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d145      	bne.n	8001156 <HAL_LPTIM_MspInit+0xbe>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2280      	movs	r2, #128	@ 0x80
 80010ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	22c0      	movs	r2, #192	@ 0xc0
 80010d4:	0312      	lsls	r2, r2, #12
 80010d6:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	0018      	movs	r0, r3
 80010dc:	f002 f8b2 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 80010e4:	f7ff ffae 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <HAL_LPTIM_MspInit+0xcc>)
 80010ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_LPTIM_MspInit+0xcc>)
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0609      	lsls	r1, r1, #24
 80010f2:	430a      	orrs	r2, r1
 80010f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80010f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <HAL_LPTIM_MspInit+0xcc>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	0fdb      	lsrs	r3, r3, #31
 80010fc:	07db      	lsls	r3, r3, #31
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_LPTIM_MspInit+0xcc>)
 8001104:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <HAL_LPTIM_MspInit+0xcc>)
 8001108:	2104      	movs	r1, #4
 800110a:	430a      	orrs	r2, r1
 800110c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_LPTIM_MspInit+0xcc>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	2204      	movs	r2, #4
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800111a:	214c      	movs	r1, #76	@ 0x4c
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2205      	movs	r2, #5
 8001120:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2202      	movs	r2, #2
 8001126:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2201      	movs	r2, #1
 8001138:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	187b      	adds	r3, r7, r1
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_LPTIM_MspInit+0xd0>)
 800113e:	0019      	movs	r1, r3
 8001140:	0010      	movs	r0, r2
 8001142:	f000 faf7 	bl	8001734 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2011      	movs	r0, #17
 800114c:	f000 fac0 	bl	80016d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8001150:	2011      	movs	r0, #17
 8001152:	f000 fad2 	bl	80016fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b019      	add	sp, #100	@ 0x64
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	40007c00 	.word	0x40007c00
 8001164:	40021000 	.word	0x40021000
 8001168:	50000800 	.word	0x50000800

0800116c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b093      	sub	sp, #76	@ 0x4c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	2410      	movs	r4, #16
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	2338      	movs	r3, #56	@ 0x38
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f004 f934 	bl	80053ec <memset>
  if(hrtc->Instance==RTC)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1a      	ldr	r2, [pc, #104]	@ (80011f4 <HAL_RTC_MspInit+0x88>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12e      	bne.n	80011ec <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800118e:	193b      	adds	r3, r7, r4
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	0212      	lsls	r2, r2, #8
 8001194:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001196:	193b      	adds	r3, r7, r4
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	0052      	lsls	r2, r2, #1
 800119c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	0018      	movs	r0, r3
 80011a2:	f002 f84f 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011aa:	f7ff ff4b 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <HAL_RTC_MspInit+0x8c>)
 80011b0:	2390      	movs	r3, #144	@ 0x90
 80011b2:	58d3      	ldr	r3, [r2, r3]
 80011b4:	4910      	ldr	r1, [pc, #64]	@ (80011f8 <HAL_RTC_MspInit+0x8c>)
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	0212      	lsls	r2, r2, #8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	2290      	movs	r2, #144	@ 0x90
 80011be:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_RTC_MspInit+0x8c>)
 80011c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_RTC_MspInit+0x8c>)
 80011c6:	2180      	movs	r1, #128	@ 0x80
 80011c8:	00c9      	lsls	r1, r1, #3
 80011ca:	430a      	orrs	r2, r1
 80011cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_RTC_MspInit+0x8c>)
 80011d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2002      	movs	r0, #2
 80011e2:	f000 fa75 	bl	80016d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80011e6:	2002      	movs	r0, #2
 80011e8:	f000 fa87 	bl	80016fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b013      	add	sp, #76	@ 0x4c
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	40002800 	.word	0x40002800
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b099      	sub	sp, #100	@ 0x64
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	234c      	movs	r3, #76	@ 0x4c
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	0018      	movs	r0, r3
 800120a:	2314      	movs	r3, #20
 800120c:	001a      	movs	r2, r3
 800120e:	2100      	movs	r1, #0
 8001210:	f004 f8ec 	bl	80053ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	2414      	movs	r4, #20
 8001216:	193b      	adds	r3, r7, r4
 8001218:	0018      	movs	r0, r3
 800121a:	2338      	movs	r3, #56	@ 0x38
 800121c:	001a      	movs	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	f004 f8e4 	bl	80053ec <memset>
  if(huart->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a22      	ldr	r2, [pc, #136]	@ (80012b4 <HAL_UART_MspInit+0xb8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d13e      	bne.n	80012ac <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800122e:	193b      	adds	r3, r7, r4
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001234:	193b      	adds	r3, r7, r4
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123a:	193b      	adds	r3, r7, r4
 800123c:	0018      	movs	r0, r3
 800123e:	f002 f801 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001246:	f7ff fefd 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 800124c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	0289      	lsls	r1, r1, #10
 8001254:	430a      	orrs	r2, r1
 8001256:	659a      	str	r2, [r3, #88]	@ 0x58
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 800125a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 8001268:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 800126c:	2101      	movs	r1, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	2201      	movs	r2, #1
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800127e:	214c      	movs	r1, #76	@ 0x4c
 8001280:	187b      	adds	r3, r7, r1
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2202      	movs	r2, #2
 800128a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2207      	movs	r2, #7
 800129c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	187a      	adds	r2, r7, r1
 80012a0:	23a0      	movs	r3, #160	@ 0xa0
 80012a2:	05db      	lsls	r3, r3, #23
 80012a4:	0011      	movs	r1, r2
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 fa44 	bl	8001734 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b019      	add	sp, #100	@ 0x64
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40021000 	.word	0x40021000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f908 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <RTC_TAMP_IRQHandler+0x14>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f003 f98a 	bl	8004610 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	20000110 	.word	0x20000110

08001308 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800130e:	0018      	movs	r0, r3
 8001310:	f000 fd3e 	bl	8001d90 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	20000078 	.word	0x20000078

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f004 f854 	bl	80053fc <__errno>
 8001354:	0003      	movs	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	18d2      	adds	r2, r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b006      	add	sp, #24
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20003000 	.word	0x20003000
 8001380:	00000400 	.word	0x00000400
 8001384:	200001e8 	.word	0x200001e8
 8001388:	20000338 	.word	0x20000338

0800138c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <SystemInit+0x50>)
 8001394:	2280      	movs	r2, #128	@ 0x80
 8001396:	0512      	lsls	r2, r2, #20
 8001398:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <SystemInit+0x54>)
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	58d3      	ldr	r3, [r2, r3]
 80013a0:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <SystemInit+0x54>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	4013      	ands	r3, r2
 80013b0:	d010      	beq.n	80013d4 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	22ff      	movs	r2, #255	@ 0xff
 80013b6:	4013      	ands	r3, r2
 80013b8:	2bcc      	cmp	r3, #204	@ 0xcc
 80013ba:	d00b      	beq.n	80013d4 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	22ff      	movs	r2, #255	@ 0xff
 80013c0:	4013      	ands	r3, r2
 80013c2:	2baa      	cmp	r3, #170	@ 0xaa
 80013c4:	d006      	beq.n	80013d4 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <SystemInit+0x54>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <SystemInit+0x54>)
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	02c9      	lsls	r1, r1, #11
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80013d4:	46c0      	nop			@ (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	40022000 	.word	0x40022000

080013e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e8:	f7ff ffd0 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	@ (8001424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <LoopForever+0xe>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	@ (8001430 <LoopForever+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001412:	f003 fff9 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001416:	f7ff f9b3 	bl	8000780 <main>

0800141a <LoopForever>:

LoopForever:
  b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   r0, =_estack
 800141c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001428:	08005f58 	.word	0x08005f58
  ldr r2, =_sbss
 800142c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001430:	20000338 	.word	0x20000338

08001434 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_COMP1_IRQHandler>

08001436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	2003      	movs	r0, #3
 8001444:	f000 f80e 	bl	8001464 <HAL_InitTick>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d003      	beq.n	8001454 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e001      	b.n	8001458 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001454:	f7ff fdfc 	bl	8001050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	230f      	movs	r3, #15
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0U)
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_InitTick+0x88>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d02b      	beq.n	80014d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_InitTick+0x8c>)
 800147e:	681c      	ldr	r4, [r3, #0]
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_InitTick+0x88>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	0019      	movs	r1, r3
 8001486:	23fa      	movs	r3, #250	@ 0xfa
 8001488:	0098      	lsls	r0, r3, #2
 800148a:	f7fe fe4f 	bl	800012c <__udivsi3>
 800148e:	0003      	movs	r3, r0
 8001490:	0019      	movs	r1, r3
 8001492:	0020      	movs	r0, r4
 8001494:	f7fe fe4a 	bl	800012c <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	0018      	movs	r0, r3
 800149c:	f000 f93d 	bl	800171a <HAL_SYSTICK_Config>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d112      	bne.n	80014ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d80a      	bhi.n	80014c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	2301      	movs	r3, #1
 80014ae:	425b      	negs	r3, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 f90c 	bl	80016d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_InitTick+0x90>)
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e00d      	b.n	80014dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e008      	b.n	80014dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	e003      	b.n	80014dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b005      	add	sp, #20
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <HAL_IncTick+0x1c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	001a      	movs	r2, r3
 8001502:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_IncTick+0x20>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	18d2      	adds	r2, r2, r3
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <HAL_IncTick+0x20>)
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	20000008 	.word	0x20000008
 8001518:	200001ec 	.word	0x200001ec

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b02      	ldr	r3, [pc, #8]	@ (800152c <HAL_GetTick+0x10>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	200001ec 	.word	0x200001ec

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff fff0 	bl	800151c <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	001a      	movs	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	189b      	adds	r3, r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	f7ff ffe0 	bl	800151c <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	20000008 	.word	0x20000008

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	0002      	movs	r2, r0
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b7f      	cmp	r3, #127	@ 0x7f
 800158a:	d809      	bhi.n	80015a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158c:	1dfb      	adds	r3, r7, #7
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	001a      	movs	r2, r3
 8001592:	231f      	movs	r3, #31
 8001594:	401a      	ands	r2, r3
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <__NVIC_EnableIRQ+0x30>)
 8001598:	2101      	movs	r1, #1
 800159a:	4091      	lsls	r1, r2
 800159c:	000a      	movs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015a0:	46c0      	nop			@ (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b7f      	cmp	r3, #127	@ 0x7f
 80015c0:	d828      	bhi.n	8001614 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001680 <__NVIC_SetPriority+0xd4>)
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	33c0      	adds	r3, #192	@ 0xc0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	589b      	ldr	r3, [r3, r2]
 80015d2:	1dfa      	adds	r2, r7, #7
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	0011      	movs	r1, r2
 80015d8:	2203      	movs	r2, #3
 80015da:	400a      	ands	r2, r1
 80015dc:	00d2      	lsls	r2, r2, #3
 80015de:	21ff      	movs	r1, #255	@ 0xff
 80015e0:	4091      	lsls	r1, r2
 80015e2:	000a      	movs	r2, r1
 80015e4:	43d2      	mvns	r2, r2
 80015e6:	401a      	ands	r2, r3
 80015e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	22ff      	movs	r2, #255	@ 0xff
 80015f0:	401a      	ands	r2, r3
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	2303      	movs	r3, #3
 80015fa:	4003      	ands	r3, r0
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001600:	481f      	ldr	r0, [pc, #124]	@ (8001680 <__NVIC_SetPriority+0xd4>)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b25b      	sxtb	r3, r3
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	430a      	orrs	r2, r1
 800160c:	33c0      	adds	r3, #192	@ 0xc0
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001612:	e031      	b.n	8001678 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001614:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <__NVIC_SetPriority+0xd8>)
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	0019      	movs	r1, r3
 800161c:	230f      	movs	r3, #15
 800161e:	400b      	ands	r3, r1
 8001620:	3b08      	subs	r3, #8
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3306      	adds	r3, #6
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	3304      	adds	r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1dfa      	adds	r2, r7, #7
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	0011      	movs	r1, r2
 8001634:	2203      	movs	r2, #3
 8001636:	400a      	ands	r2, r1
 8001638:	00d2      	lsls	r2, r2, #3
 800163a:	21ff      	movs	r1, #255	@ 0xff
 800163c:	4091      	lsls	r1, r2
 800163e:	000a      	movs	r2, r1
 8001640:	43d2      	mvns	r2, r2
 8001642:	401a      	ands	r2, r3
 8001644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	22ff      	movs	r2, #255	@ 0xff
 800164c:	401a      	ands	r2, r3
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	2303      	movs	r3, #3
 8001656:	4003      	ands	r3, r0
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165c:	4809      	ldr	r0, [pc, #36]	@ (8001684 <__NVIC_SetPriority+0xd8>)
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	001c      	movs	r4, r3
 8001664:	230f      	movs	r3, #15
 8001666:	4023      	ands	r3, r4
 8001668:	3b08      	subs	r3, #8
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	430a      	orrs	r2, r1
 800166e:	3306      	adds	r3, #6
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	18c3      	adds	r3, r0, r3
 8001674:	3304      	adds	r3, #4
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b003      	add	sp, #12
 800167e:	bd90      	pop	{r4, r7, pc}
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	045b      	lsls	r3, r3, #17
 8001698:	429a      	cmp	r2, r3
 800169a:	d301      	bcc.n	80016a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169c:	2301      	movs	r3, #1
 800169e:	e010      	b.n	80016c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <SysTick_Config+0x44>)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	3a01      	subs	r2, #1
 80016a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a8:	2301      	movs	r3, #1
 80016aa:	425b      	negs	r3, r3
 80016ac:	2103      	movs	r1, #3
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff ff7c 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <SysTick_Config+0x44>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <SysTick_Config+0x44>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	210f      	movs	r1, #15
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	1c02      	adds	r2, r0, #0
 80016e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	0011      	movs	r1, r2
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	0002      	movs	r2, r0
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff ff33 	bl	8001578 <__NVIC_EnableIRQ>
}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff ffaf 	bl	8001688 <SysTick_Config>
 800172a:	0003      	movs	r3, r0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e14d      	b.n	80019e0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4091      	lsls	r1, r2
 800174e:	000a      	movs	r2, r1
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d100      	bne.n	800175c <HAL_GPIO_Init+0x28>
 800175a:	e13e      	b.n	80019da <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	4013      	ands	r3, r2
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x40>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	4013      	ands	r3, r2
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d017      	beq.n	8001812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	43da      	mvns	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	4013      	ands	r3, r2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	58d3      	ldr	r3, [r2, r3]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2207      	movs	r2, #7
 8001830:	4013      	ands	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	43da      	mvns	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2107      	movs	r1, #7
 800184a:	400b      	ands	r3, r1
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	6939      	ldr	r1, [r7, #16]
 8001864:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	401a      	ands	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	23c0      	movs	r3, #192	@ 0xc0
 80018a0:	029b      	lsls	r3, r3, #10
 80018a2:	4013      	ands	r3, r2
 80018a4:	d100      	bne.n	80018a8 <HAL_GPIO_Init+0x174>
 80018a6:	e098      	b.n	80019da <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018a8:	4a53      	ldr	r2, [pc, #332]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3318      	adds	r3, #24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	589b      	ldr	r3, [r3, r2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	220f      	movs	r2, #15
 80018c0:	409a      	lsls	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	23a0      	movs	r3, #160	@ 0xa0
 80018d0:	05db      	lsls	r3, r3, #23
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0x1d6>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a48      	ldr	r2, [pc, #288]	@ (80019fc <HAL_GPIO_Init+0x2c8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1d2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a47      	ldr	r2, [pc, #284]	@ (8001a00 <HAL_GPIO_Init+0x2cc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1ce>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a46      	ldr	r2, [pc, #280]	@ (8001a04 <HAL_GPIO_Init+0x2d0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1ca>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a45      	ldr	r2, [pc, #276]	@ (8001a08 <HAL_GPIO_Init+0x2d4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1c6>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x1d8>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x1d8>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x1d8>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x1d8>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x1d8>
 800190a:	2300      	movs	r3, #0
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	2103      	movs	r1, #3
 8001910:	400a      	ands	r2, r1
 8001912:	00d2      	lsls	r2, r2, #3
 8001914:	4093      	lsls	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800191c:	4936      	ldr	r1, [pc, #216]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3318      	adds	r3, #24
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800192a:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	035b      	lsls	r3, r3, #13
 8001942:	4013      	ands	r3, r2
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43da      	mvns	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	039b      	lsls	r3, r3, #14
 800196c:	4013      	ands	r3, r2
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 8001980:	2384      	movs	r3, #132	@ 0x84
 8001982:	58d3      	ldr	r3, [r2, r3]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43da      	mvns	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	029b      	lsls	r3, r3, #10
 8001998:	4013      	ands	r3, r2
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a4:	4914      	ldr	r1, [pc, #80]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 80019a6:	2284      	movs	r2, #132	@ 0x84
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019ac:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	58d3      	ldr	r3, [r2, r3]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	4013      	ands	r3, r2
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d2:	4909      	ldr	r1, [pc, #36]	@ (80019f8 <HAL_GPIO_Init+0x2c4>)
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	40da      	lsrs	r2, r3
 80019e8:	1e13      	subs	r3, r2, #0
 80019ea:	d000      	beq.n	80019ee <HAL_GPIO_Init+0x2ba>
 80019ec:	e6aa      	b.n	8001744 <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021800 	.word	0x40021800
 80019fc:	50000400 	.word	0x50000400
 8001a00:	50000800 	.word	0x50000800
 8001a04:	50000c00 	.word	0x50000c00
 8001a08:	50001400 	.word	0x50001400

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	0008      	movs	r0, r1
 8001a16:	0011      	movs	r1, r2
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	1c02      	adds	r2, r0, #0
 8001a1c:	801a      	strh	r2, [r3, #0]
 8001a1e:	1c7b      	adds	r3, r7, #1
 8001a20:	1c0a      	adds	r2, r1, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	1c7b      	adds	r3, r7, #1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a36:	1cbb      	adds	r3, r7, #2
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e139      	b.n	8001cce <HAL_LPTIM_Init+0x286>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2252      	movs	r2, #82	@ 0x52
 8001a5e:	5c9b      	ldrb	r3, [r3, r2]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2251      	movs	r2, #81	@ 0x51
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 fce5 	bl	8002440 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a95      	ldr	r2, [pc, #596]	@ (8001cd8 <HAL_LPTIM_Init+0x290>)
 8001a82:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2252      	movs	r2, #82	@ 0x52
 8001a92:	2102      	movs	r1, #2
 8001a94:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2280      	movs	r2, #128	@ 0x80
 8001aac:	0052      	lsls	r2, r2, #1
 8001aae:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	005a      	lsls	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fd10 	bl	80024e8 <LPTIM_WaitForFlag>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d101      	bne.n	8001ad2 <HAL_LPTIM_Init+0x8a>
  {
    return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0fd      	b.n	8001cce <HAL_LPTIM_Init+0x286>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6a12      	ldr	r2, [r2, #32]
 8001ae2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 fcfd 	bl	80024e8 <LPTIM_WaitForFlag>
 8001aee:	0003      	movs	r3, r0
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d101      	bne.n	8001af8 <HAL_LPTIM_Init+0xb0>
  {
    return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ea      	b.n	8001cce <HAL_LPTIM_Init+0x286>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a77      	ldr	r2, [pc, #476]	@ (8001cdc <HAL_LPTIM_Init+0x294>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_LPTIM_Init+0xc4>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a76      	ldr	r2, [pc, #472]	@ (8001ce0 <HAL_LPTIM_Init+0x298>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_LPTIM_Init+0xc8>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_LPTIM_Init+0xca>
 8001b10:	2300      	movs	r3, #0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d122      	bne.n	8001b5c <HAL_LPTIM_Init+0x114>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d149      	bne.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	029b      	lsls	r3, r3, #10
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d142      	bne.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	2202      	movs	r2, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d13c      	bne.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	4013      	ands	r3, r2
 8001b48:	d135      	bne.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	438a      	bics	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	e02c      	b.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5e      	ldr	r2, [pc, #376]	@ (8001cdc <HAL_LPTIM_Init+0x294>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d004      	beq.n	8001b70 <HAL_LPTIM_Init+0x128>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce0 <HAL_LPTIM_Init+0x298>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_LPTIM_Init+0x12c>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_LPTIM_Init+0x12e>
 8001b74:	2300      	movs	r3, #0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d115      	bne.n	8001ba6 <HAL_LPTIM_Init+0x15e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d117      	bne.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	029b      	lsls	r3, r3, #10
 8001b90:	4013      	ands	r3, r2
 8001b92:	d110      	bne.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	e007      	b.n	8001bb6 <HAL_LPTIM_Init+0x16e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	438a      	bics	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d005      	beq.n	8001bd2 <HAL_LPTIM_Init+0x18a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d103      	bne.n	8001bda <HAL_LPTIM_Init+0x192>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	221e      	movs	r2, #30
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4a41      	ldr	r2, [pc, #260]	@ (8001ce4 <HAL_LPTIM_Init+0x29c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <HAL_LPTIM_Init+0x1a4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a40      	ldr	r2, [pc, #256]	@ (8001ce8 <HAL_LPTIM_Init+0x2a0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a3f      	ldr	r2, [pc, #252]	@ (8001cec <HAL_LPTIM_Init+0x2a4>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001bfc:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8001c02:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001c08:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <HAL_LPTIM_Init+0x1e0>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_LPTIM_Init+0x1f4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_LPTIM_Init+0x204>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4a24      	ldr	r2, [pc, #144]	@ (8001ce4 <HAL_LPTIM_Init+0x29c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00a      	beq.n	8001c6c <HAL_LPTIM_Init+0x224>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c5e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001c64:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
#if defined(LPTIM3)
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
#else
  if (hlptim->Instance == LPTIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <HAL_LPTIM_Init+0x294>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <HAL_LPTIM_Init+0x248>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c8e:	e009      	b.n	8001ca4 <HAL_LPTIM_Init+0x25c>
  }
  else
  {
    if (hlptim->Instance == LPTIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <HAL_LPTIM_Init+0x298>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d104      	bne.n	8001ca4 <HAL_LPTIM_Init+0x25c>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2253      	movs	r2, #83	@ 0x53
 8001ca8:	2101      	movs	r1, #1
 8001caa:	5499      	strb	r1, [r3, r2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2254      	movs	r2, #84	@ 0x54
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	5499      	strb	r1, [r3, r2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2255      	movs	r2, #85	@ 0x55
 8001cb8:	2101      	movs	r1, #1
 8001cba:	5499      	strb	r1, [r3, r2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2256      	movs	r2, #86	@ 0x56
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	5499      	strb	r1, [r3, r2]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2252      	movs	r2, #82	@ 0x52
 8001cc8:	2101      	movs	r1, #1
 8001cca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	08001099 	.word	0x08001099
 8001cdc:	40007c00 	.word	0x40007c00
 8001ce0:	40009400 	.word	0x40009400
 8001ce4:	0000ffff 	.word	0x0000ffff
 8001ce8:	ffff1f3f 	.word	0xffff1f3f
 8001cec:	ff39f1fe 	.word	0xff39f1fe

08001cf0 <HAL_LPTIM_Counter_Start_IT>:
  * @brief  Start the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2252      	movs	r2, #82	@ 0x52
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	5499      	strb	r1, [r3, r2]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00d      	beq.n	8001d24 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d107      	bne.n	8001d24 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	491b      	ldr	r1, [pc, #108]	@ (8001d8c <HAL_LPTIM_Counter_Start_IT+0x9c>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	0452      	lsls	r2, r2, #17
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Enable interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK | LPTIM_IT_UPDATE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	21c9      	movs	r1, #201	@ 0xc9
 8001d4a:	0049      	lsls	r1, r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	045a      	lsls	r2, r3, #17
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fbc5 	bl	80024e8 <LPTIM_WaitForFlag>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d101      	bne.n	8001d68 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e00c      	b.n	8001d82 <HAL_LPTIM_Counter_Start_IT+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2104      	movs	r1, #4
 8001d74:	430a      	orrs	r2, r1
 8001d76:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2252      	movs	r2, #82	@ 0x52
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	fffff1ff 	.word	0xfffff1ff

08001d90 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d124      	bne.n	8001df0 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d11d      	bne.n	8001df0 <HAL_LPTIM_IRQHandler+0x60>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2238      	movs	r2, #56	@ 0x38
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d006      	beq.n	8001dde <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	228c      	movs	r2, #140	@ 0x8c
 8001dd4:	589b      	ldr	r3, [r3, r2]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	0010      	movs	r0, r2
 8001dda:	4798      	blx	r3
 8001ddc:	e004      	b.n	8001de8 <HAL_LPTIM_IRQHandler+0x58>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	0010      	movs	r0, r2
 8001de6:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2238      	movs	r2, #56	@ 0x38
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d129      	bne.n	8001e58 <HAL_LPTIM_IRQHandler+0xc8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	2380      	movs	r3, #128	@ 0x80
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	401a      	ands	r2, r3
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d11f      	bne.n	8001e58 <HAL_LPTIM_IRQHandler+0xc8>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2238      	movs	r2, #56	@ 0x38
 8001e26:	2102      	movs	r1, #2
 8001e28:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	025b      	lsls	r3, r3, #9
 8001e34:	4013      	ands	r3, r2
 8001e36:	d006      	beq.n	8001e46 <HAL_LPTIM_IRQHandler+0xb6>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	228c      	movs	r2, #140	@ 0x8c
 8001e3c:	589b      	ldr	r3, [r3, r2]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	0010      	movs	r0, r2
 8001e42:	4798      	blx	r3
 8001e44:	e004      	b.n	8001e50 <HAL_LPTIM_IRQHandler+0xc0>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2238      	movs	r2, #56	@ 0x38
 8001e54:	2100      	movs	r1, #0
 8001e56:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	401a      	ands	r2, r3
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d128      	bne.n	8001ebe <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	401a      	ands	r2, r3
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d11e      	bne.n	8001ebe <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	00d2      	lsls	r2, r2, #3
 8001e88:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2238      	movs	r2, #56	@ 0x38
 8001e8e:	2104      	movs	r1, #4
 8001e90:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d006      	beq.n	8001eac <HAL_LPTIM_IRQHandler+0x11c>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	228c      	movs	r2, #140	@ 0x8c
 8001ea2:	589b      	ldr	r3, [r3, r2]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	4798      	blx	r3
 8001eaa:	e004      	b.n	8001eb6 <HAL_LPTIM_IRQHandler+0x126>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2238      	movs	r2, #56	@ 0x38
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	401a      	ands	r2, r3
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d129      	bne.n	8001f26 <HAL_LPTIM_IRQHandler+0x196>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	401a      	ands	r2, r3
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d11f      	bne.n	8001f26 <HAL_LPTIM_IRQHandler+0x196>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2280      	movs	r2, #128	@ 0x80
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2238      	movs	r2, #56	@ 0x38
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	4013      	ands	r3, r2
 8001f04:	d006      	beq.n	8001f14 <HAL_LPTIM_IRQHandler+0x184>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	228c      	movs	r2, #140	@ 0x8c
 8001f0a:	589b      	ldr	r3, [r3, r2]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	0010      	movs	r0, r2
 8001f10:	4798      	blx	r3
 8001f12:	e004      	b.n	8001f1e <HAL_LPTIM_IRQHandler+0x18e>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2238      	movs	r2, #56	@ 0x38
 8001f22:	2100      	movs	r1, #0
 8001f24:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	401a      	ands	r2, r3
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d11c      	bne.n	8001f74 <HAL_LPTIM_IRQHandler+0x1e4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	015b      	lsls	r3, r3, #5
 8001f44:	401a      	ands	r2, r3
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	015b      	lsls	r3, r3, #5
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d112      	bne.n	8001f74 <HAL_LPTIM_IRQHandler+0x1e4>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2280      	movs	r2, #128	@ 0x80
 8001f54:	0152      	lsls	r2, r2, #5
 8001f56:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2238      	movs	r2, #56	@ 0x38
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2294      	movs	r2, #148	@ 0x94
 8001f64:	589b      	ldr	r3, [r3, r2]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	0010      	movs	r0, r2
 8001f6a:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2238      	movs	r2, #56	@ 0x38
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	401a      	ands	r2, r3
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d11c      	bne.n	8001fc2 <HAL_LPTIM_IRQHandler+0x232>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	2380      	movs	r3, #128	@ 0x80
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	401a      	ands	r2, r3
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	019b      	lsls	r3, r3, #6
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d112      	bne.n	8001fc2 <HAL_LPTIM_IRQHandler+0x232>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	0192      	lsls	r2, r2, #6
 8001fa4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2238      	movs	r2, #56	@ 0x38
 8001faa:	2102      	movs	r1, #2
 8001fac:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2294      	movs	r2, #148	@ 0x94
 8001fb2:	589b      	ldr	r3, [r3, r2]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2238      	movs	r2, #56	@ 0x38
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	401a      	ands	r2, r3
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	01db      	lsls	r3, r3, #7
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d11c      	bne.n	8002010 <HAL_LPTIM_IRQHandler+0x280>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d112      	bne.n	8002010 <HAL_LPTIM_IRQHandler+0x280>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	01d2      	lsls	r2, r2, #7
 8001ff2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2238      	movs	r2, #56	@ 0x38
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2294      	movs	r2, #148	@ 0x94
 8002000:	589b      	ldr	r3, [r3, r2]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	0010      	movs	r0, r2
 8002006:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2238      	movs	r2, #56	@ 0x38
 800200c:	2100      	movs	r1, #0
 800200e:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	401a      	ands	r2, r3
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	429a      	cmp	r2, r3
 8002022:	d11c      	bne.n	800205e <HAL_LPTIM_IRQHandler+0x2ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	401a      	ands	r2, r3
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	429a      	cmp	r2, r3
 8002036:	d112      	bne.n	800205e <HAL_LPTIM_IRQHandler+0x2ce>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	0212      	lsls	r2, r2, #8
 8002040:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2238      	movs	r2, #56	@ 0x38
 8002046:	2108      	movs	r1, #8
 8002048:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2294      	movs	r2, #148	@ 0x94
 800204e:	589b      	ldr	r3, [r3, r2]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	0010      	movs	r0, r2
 8002054:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2238      	movs	r2, #56	@ 0x38
 800205a:	2100      	movs	r1, #0
 800205c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d10f      	bne.n	800208c <HAL_LPTIM_IRQHandler+0x2fc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d108      	bne.n	800208c <HAL_LPTIM_IRQHandler+0x2fc>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2202      	movs	r2, #2
 8002080:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	0010      	movs	r0, r2
 800208a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	2b04      	cmp	r3, #4
 8002098:	d10f      	bne.n	80020ba <HAL_LPTIM_IRQHandler+0x32a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2204      	movs	r2, #4
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d108      	bne.n	80020ba <HAL_LPTIM_IRQHandler+0x32a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	0010      	movs	r0, r2
 80020b8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2208      	movs	r2, #8
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d113      	bne.n	80020f0 <HAL_LPTIM_IRQHandler+0x360>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2208      	movs	r2, #8
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d10c      	bne.n	80020f0 <HAL_LPTIM_IRQHandler+0x360>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2208      	movs	r2, #8
 80020dc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2238      	movs	r2, #56	@ 0x38
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	0010      	movs	r0, r2
 80020ee:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	031b      	lsls	r3, r3, #12
 80020fa:	401a      	ands	r2, r3
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	031b      	lsls	r3, r3, #12
 8002100:	429a      	cmp	r2, r3
 8002102:	d117      	bne.n	8002134 <HAL_LPTIM_IRQHandler+0x3a4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	401a      	ands	r2, r3
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	031b      	lsls	r3, r3, #12
 8002114:	429a      	cmp	r2, r3
 8002116:	d10d      	bne.n	8002134 <HAL_LPTIM_IRQHandler+0x3a4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2280      	movs	r2, #128	@ 0x80
 800211e:	0312      	lsls	r2, r2, #12
 8002120:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2238      	movs	r2, #56	@ 0x38
 8002126:	2102      	movs	r1, #2
 8002128:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	0010      	movs	r0, r2
 8002132:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	4013      	ands	r3, r2
 800213e:	2b10      	cmp	r3, #16
 8002140:	d10f      	bne.n	8002162 <HAL_LPTIM_IRQHandler+0x3d2>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2210      	movs	r2, #16
 800214a:	4013      	ands	r3, r2
 800214c:	2b10      	cmp	r3, #16
 800214e:	d108      	bne.n	8002162 <HAL_LPTIM_IRQHandler+0x3d2>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2210      	movs	r2, #16
 8002156:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	0010      	movs	r0, r2
 8002160:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2220      	movs	r2, #32
 800216a:	4013      	ands	r3, r2
 800216c:	2b20      	cmp	r3, #32
 800216e:	d10f      	bne.n	8002190 <HAL_LPTIM_IRQHandler+0x400>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2220      	movs	r2, #32
 8002178:	4013      	ands	r3, r2
 800217a:	2b20      	cmp	r3, #32
 800217c:	d108      	bne.n	8002190 <HAL_LPTIM_IRQHandler+0x400>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2220      	movs	r2, #32
 8002184:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	0010      	movs	r0, r2
 800218e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2240      	movs	r2, #64	@ 0x40
 8002198:	4013      	ands	r3, r2
 800219a:	2b40      	cmp	r3, #64	@ 0x40
 800219c:	d10f      	bne.n	80021be <HAL_LPTIM_IRQHandler+0x42e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2240      	movs	r2, #64	@ 0x40
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d108      	bne.n	80021be <HAL_LPTIM_IRQHandler+0x42e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2240      	movs	r2, #64	@ 0x40
 80021b2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	0010      	movs	r0, r2
 80021bc:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2280      	movs	r2, #128	@ 0x80
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b80      	cmp	r3, #128	@ 0x80
 80021ca:	d10f      	bne.n	80021ec <HAL_LPTIM_IRQHandler+0x45c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2280      	movs	r2, #128	@ 0x80
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b80      	cmp	r3, #128	@ 0x80
 80021d8:	d108      	bne.n	80021ec <HAL_LPTIM_IRQHandler+0x45c>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	0010      	movs	r0, r2
 80021ea:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	401a      	ands	r2, r3
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d114      	bne.n	800222a <HAL_LPTIM_IRQHandler+0x49a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	401a      	ands	r2, r3
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	429a      	cmp	r2, r3
 8002212:	d10a      	bne.n	800222a <HAL_LPTIM_IRQHandler+0x49a>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	0052      	lsls	r2, r2, #1
 800221c:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2280      	movs	r2, #128	@ 0x80
 8002222:	589b      	ldr	r3, [r3, r2]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	0010      	movs	r0, r2
 8002228:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b002      	add	sp, #8
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	230b      	movs	r3, #11
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	1c0a      	adds	r2, r1, #0
 8002324:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2317      	movs	r3, #23
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e07c      	b.n	8002432 <HAL_LPTIM_RegisterCallback+0x11e>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2252      	movs	r2, #82	@ 0x52
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d154      	bne.n	80023ee <HAL_LPTIM_RegisterCallback+0xda>
  {
    switch (CallbackID)
 8002344:	230b      	movs	r3, #11
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	d84a      	bhi.n	80023e4 <HAL_LPTIM_RegisterCallback+0xd0>
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_LPTIM_RegisterCallback+0x128>)
 8002352:	18d3      	adds	r3, r2, r3
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800235e:	e065      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8002366:	e061      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800236e:	e05d      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8002376:	e059      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800237e:	e055      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8002386:	e051      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800238e:	e04d      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8002396:	e049      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800239e:	e045      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80023a6:	e041      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2180      	movs	r1, #128	@ 0x80
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	505a      	str	r2, [r3, r1]
        break;
 80023b0:	e03c      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2184      	movs	r1, #132	@ 0x84
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	505a      	str	r2, [r3, r1]
        break;
 80023ba:	e037      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2188      	movs	r1, #136	@ 0x88
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	505a      	str	r2, [r3, r1]
        break;
 80023c4:	e032      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	218c      	movs	r1, #140	@ 0x8c
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	505a      	str	r2, [r3, r1]
        break;
 80023ce:	e02d      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2190      	movs	r1, #144	@ 0x90
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	505a      	str	r2, [r3, r1]
        break;
 80023d8:	e028      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2194      	movs	r1, #148	@ 0x94
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	505a      	str	r2, [r3, r1]
        break;
 80023e2:	e023      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80023e4:	2317      	movs	r3, #23
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
        break;
 80023ec:	e01e      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2252      	movs	r2, #82	@ 0x52
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <HAL_LPTIM_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80023fa:	230b      	movs	r3, #11
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_LPTIM_RegisterCallback+0xf6>
 8002404:	2b01      	cmp	r3, #1
 8002406:	d004      	beq.n	8002412 <HAL_LPTIM_RegisterCallback+0xfe>
 8002408:	e007      	b.n	800241a <HAL_LPTIM_RegisterCallback+0x106>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8002410:	e00c      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8002418:	e008      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800241a:	2317      	movs	r3, #23
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
        break;
 8002422:	e003      	b.n	800242c <HAL_LPTIM_RegisterCallback+0x118>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800242c:	2317      	movs	r3, #23
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	08005e28 	.word	0x08005e28

08002440 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <LPTIM_ResetCallback+0x70>)
 800244c:	661a      	str	r2, [r3, #96]	@ 0x60
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <LPTIM_ResetCallback+0x74>)
 8002452:	665a      	str	r2, [r3, #100]	@ 0x64
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <LPTIM_ResetCallback+0x78>)
 8002458:	669a      	str	r2, [r3, #104]	@ 0x68
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <LPTIM_ResetCallback+0x7c>)
 800245e:	66da      	str	r2, [r3, #108]	@ 0x6c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a17      	ldr	r2, [pc, #92]	@ (80024c0 <LPTIM_ResetCallback+0x80>)
 8002464:	671a      	str	r2, [r3, #112]	@ 0x70
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a16      	ldr	r2, [pc, #88]	@ (80024c4 <LPTIM_ResetCallback+0x84>)
 800246a:	675a      	str	r2, [r3, #116]	@ 0x74
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a16      	ldr	r2, [pc, #88]	@ (80024c8 <LPTIM_ResetCallback+0x88>)
 8002470:	679a      	str	r2, [r3, #120]	@ 0x78
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a15      	ldr	r2, [pc, #84]	@ (80024cc <LPTIM_ResetCallback+0x8c>)
 8002476:	67da      	str	r2, [r3, #124]	@ 0x7c
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2180      	movs	r1, #128	@ 0x80
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <LPTIM_ResetCallback+0x90>)
 800247e:	505a      	str	r2, [r3, r1]
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2184      	movs	r1, #132	@ 0x84
 8002484:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <LPTIM_ResetCallback+0x94>)
 8002486:	505a      	str	r2, [r3, r1]
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	218c      	movs	r1, #140	@ 0x8c
 800248c:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <LPTIM_ResetCallback+0x98>)
 800248e:	505a      	str	r2, [r3, r1]
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2190      	movs	r1, #144	@ 0x90
 8002494:	4a11      	ldr	r2, [pc, #68]	@ (80024dc <LPTIM_ResetCallback+0x9c>)
 8002496:	505a      	str	r2, [r3, r1]
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2194      	movs	r1, #148	@ 0x94
 800249c:	4a10      	ldr	r2, [pc, #64]	@ (80024e0 <LPTIM_ResetCallback+0xa0>)
 800249e:	505a      	str	r2, [r3, r1]
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2188      	movs	r1, #136	@ 0x88
 80024a4:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <LPTIM_ResetCallback+0xa4>)
 80024a6:	505a      	str	r2, [r3, r1]
}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	08002233 	.word	0x08002233
 80024b4:	08002243 	.word	0x08002243
 80024b8:	08002253 	.word	0x08002253
 80024bc:	08002263 	.word	0x08002263
 80024c0:	08002273 	.word	0x08002273
 80024c4:	08002283 	.word	0x08002283
 80024c8:	08002293 	.word	0x08002293
 80024cc:	080022a3 	.word	0x080022a3
 80024d0:	080022b3 	.word	0x080022b3
 80024d4:	080022f3 	.word	0x080022f3
 80024d8:	080022c3 	.word	0x080022c3
 80024dc:	080022e3 	.word	0x080022e3
 80024e0:	080022d3 	.word	0x080022d3
 80024e4:	08002303 	.word	0x08002303

080024e8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80024f2:	230f      	movs	r3, #15
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <LPTIM_WaitForFlag+0x68>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4915      	ldr	r1, [pc, #84]	@ (8002554 <LPTIM_WaitForFlag+0x6c>)
 8002500:	0018      	movs	r0, r3
 8002502:	f7fd fe13 	bl	800012c <__udivsi3>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	189b      	adds	r3, r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3b01      	subs	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8002524:	230f      	movs	r3, #15
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2203      	movs	r2, #3
 800252a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4013      	ands	r3, r2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d002      	beq.n	8002542 <LPTIM_WaitForFlag+0x5a>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ea      	bne.n	8002518 <LPTIM_WaitForFlag+0x30>

  return result;
 8002542:	230f      	movs	r3, #15
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	781b      	ldrb	r3, [r3, #0]
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000000 	.word	0x20000000
 8002554:	00004e20 	.word	0x00004e20

08002558 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_PWR_EnableBkUpAccess+0x18>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002562:	2180      	movs	r1, #128	@ 0x80
 8002564:	0049      	lsls	r1, r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40007000 	.word	0x40007000

08002574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	429a      	cmp	r2, r3
 8002584:	d137      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002586:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	23c0      	movs	r3, #192	@ 0xc0
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	401a      	ands	r2, r3
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d040      	beq.n	800261a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a22      	ldr	r2, [pc, #136]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800259e:	401a      	ands	r2, r3
 80025a0:	4b20      	ldr	r3, [pc, #128]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80025a2:	2180      	movs	r1, #128	@ 0x80
 80025a4:	0089      	lsls	r1, r1, #2
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2232      	movs	r2, #50	@ 0x32
 80025b0:	4353      	muls	r3, r2
 80025b2:	491f      	ldr	r1, [pc, #124]	@ (8002630 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fd fdb9 	bl	800012c <__udivsi3>
 80025ba:	0003      	movs	r3, r0
 80025bc:	3301      	adds	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c0:	e002      	b.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c8:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	401a      	ands	r2, r3
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d102      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	2380      	movs	r3, #128	@ 0x80
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	401a      	ands	r2, r3
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d113      	bne.n	800261a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e012      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	23c0      	movs	r3, #192	@ 0xc0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	401a      	ands	r2, r3
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	429a      	cmp	r2, r3
 8002606:	d008      	beq.n	800261a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800260e:	401a      	ands	r2, r3
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002612:	2180      	movs	r1, #128	@ 0x80
 8002614:	00c9      	lsls	r1, r1, #3
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b004      	add	sp, #16
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40007000 	.word	0x40007000
 8002628:	fffff9ff 	.word	0xfffff9ff
 800262c:	20000000 	.word	0x20000000
 8002630:	000f4240 	.word	0x000f4240

08002634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <HAL_PWREx_GetVoltageRange+0x14>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	23c0      	movs	r3, #192	@ 0xc0
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4013      	ands	r3, r2
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40007000 	.word	0x40007000

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002654:	4bc8      	ldr	r3, [pc, #800]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2238      	movs	r2, #56	@ 0x38
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265e:	4bc6      	ldr	r3, [pc, #792]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2203      	movs	r2, #3
 8002664:	4013      	ands	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2210      	movs	r2, #16
 800266e:	4013      	ands	r3, r2
 8002670:	d100      	bne.n	8002674 <HAL_RCC_OscConfig+0x28>
 8002672:	e0ee      	b.n	8002852 <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_RCC_OscConfig+0x3e>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b18      	cmp	r3, #24
 800267e:	d000      	beq.n	8002682 <HAL_RCC_OscConfig+0x36>
 8002680:	e093      	b.n	80027aa <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d000      	beq.n	800268a <HAL_RCC_OscConfig+0x3e>
 8002688:	e08f      	b.n	80027aa <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800268a:	4bbb      	ldr	r3, [pc, #748]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d006      	beq.n	80026a2 <HAL_RCC_OscConfig+0x56>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f000 fbae 	bl	8002dfe <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a6:	4bb4      	ldr	r3, [pc, #720]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2108      	movs	r1, #8
 80026ac:	400b      	ands	r3, r1
 80026ae:	d004      	beq.n	80026ba <HAL_RCC_OscConfig+0x6e>
 80026b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	21f0      	movs	r1, #240	@ 0xf0
 80026b6:	400b      	ands	r3, r1
 80026b8:	e005      	b.n	80026c6 <HAL_RCC_OscConfig+0x7a>
 80026ba:	49af      	ldr	r1, [pc, #700]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	2394      	movs	r3, #148	@ 0x94
 80026be:	58cb      	ldr	r3, [r1, r3]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	21f0      	movs	r1, #240	@ 0xf0
 80026c4:	400b      	ands	r3, r1
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d225      	bcs.n	8002716 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fd4c 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d002      	beq.n	80026de <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f000 fb90 	bl	8002dfe <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026de:	4ba6      	ldr	r3, [pc, #664]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	2108      	movs	r1, #8
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	4ba3      	ldr	r3, [pc, #652]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	22f0      	movs	r2, #240	@ 0xf0
 80026f0:	4393      	bics	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f8:	4b9f      	ldr	r3, [pc, #636]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a9e      	ldr	r2, [pc, #632]	@ (800297c <HAL_RCC_OscConfig+0x330>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	4b9a      	ldr	r3, [pc, #616]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	e027      	b.n	8002766 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002716:	4b98      	ldr	r3, [pc, #608]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b97      	ldr	r3, [pc, #604]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800271c:	2108      	movs	r1, #8
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b95      	ldr	r3, [pc, #596]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	22f0      	movs	r2, #240	@ 0xf0
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002730:	4b91      	ldr	r3, [pc, #580]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002736:	4b90      	ldr	r3, [pc, #576]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a90      	ldr	r2, [pc, #576]	@ (800297c <HAL_RCC_OscConfig+0x330>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	021a      	lsls	r2, r3, #8
 8002746:	4b8c      	ldr	r3, [pc, #560]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fd08 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d002      	beq.n	8002766 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	f000 fb4c 	bl	8002dfe <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002766:	f000 fc43 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 800276a:	0001      	movs	r1, r0
 800276c:	4b82      	ldr	r3, [pc, #520]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800276e:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	220f      	movs	r2, #15
 8002774:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002776:	4a82      	ldr	r2, [pc, #520]	@ (8002980 <HAL_RCC_OscConfig+0x334>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800277a:	001a      	movs	r2, r3
 800277c:	231f      	movs	r3, #31
 800277e:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002780:	000a      	movs	r2, r1
 8002782:	40da      	lsrs	r2, r3
 8002784:	4b7f      	ldr	r3, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0x338>)
 8002786:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002788:	4b7f      	ldr	r3, [pc, #508]	@ (8002988 <HAL_RCC_OscConfig+0x33c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	250f      	movs	r5, #15
 800278e:	197c      	adds	r4, r7, r5
 8002790:	0018      	movs	r0, r3
 8002792:	f7fe fe67 	bl	8001464 <HAL_InitTick>
 8002796:	0003      	movs	r3, r0
 8002798:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800279a:	197b      	adds	r3, r7, r5
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d056      	beq.n	8002850 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 80027a2:	197b      	adds	r3, r7, r5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f000 fb2a 	bl	8002dfe <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d034      	beq.n	800281c <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027b2:	4b71      	ldr	r3, [pc, #452]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b70      	ldr	r3, [pc, #448]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	2101      	movs	r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027be:	f7fe fead 	bl	800151c <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80027c8:	f7fe fea8 	bl	800151c <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e311      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d0f1      	beq.n	80027c8 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b63      	ldr	r3, [pc, #396]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027ea:	2108      	movs	r1, #8
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	22f0      	movs	r2, #240	@ 0xf0
 80027f6:	4393      	bics	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002804:	4b5c      	ldr	r3, [pc, #368]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a5c      	ldr	r2, [pc, #368]	@ (800297c <HAL_RCC_OscConfig+0x330>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	021a      	lsls	r2, r3, #8
 8002814:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	e01a      	b.n	8002852 <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800281c:	4b56      	ldr	r3, [pc, #344]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002822:	2101      	movs	r1, #1
 8002824:	438a      	bics	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002828:	f7fe fe78 	bl	800151c <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8002832:	f7fe fe73 	bl	800151c <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e2dc      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002844:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2202      	movs	r2, #2
 800284a:	4013      	ands	r3, r2
 800284c:	d1f1      	bne.n	8002832 <HAL_RCC_OscConfig+0x1e6>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002850:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x212>
 800285c:	e065      	b.n	800292a <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b18      	cmp	r3, #24
 8002868:	d10e      	bne.n	8002888 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d10b      	bne.n	8002888 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	4b41      	ldr	r3, [pc, #260]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	d055      	beq.n	8002928 <HAL_RCC_OscConfig+0x2dc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d151      	bne.n	8002928 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e2ba      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
 8002894:	4b38      	ldr	r3, [pc, #224]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b37      	ldr	r3, [pc, #220]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800289a:	2180      	movs	r1, #128	@ 0x80
 800289c:	0249      	lsls	r1, r1, #9
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e013      	b.n	80028cc <HAL_RCC_OscConfig+0x280>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	23a0      	movs	r3, #160	@ 0xa0
 80028aa:	02db      	lsls	r3, r3, #11
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x274>
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b30      	ldr	r3, [pc, #192]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	21a0      	movs	r1, #160	@ 0xa0
 80028b8:	02c9      	lsls	r1, r1, #11
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e005      	b.n	80028cc <HAL_RCC_OscConfig+0x280>
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	4931      	ldr	r1, [pc, #196]	@ (800298c <HAL_RCC_OscConfig+0x340>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d014      	beq.n	80028fe <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fe22 	bl	800151c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80028de:	f7fe fe1d 	bl	800151c <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	@ 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e286      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x292>
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fe0d 	bl	800151c <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002908:	f7fe fe08 	bl	800151c <HAL_GetTick>
 800290c:	0002      	movs	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e271      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	4013      	ands	r3, r2
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x2bc>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x2ea>
 8002934:	e073      	b.n	8002a1e <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x2fc>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b18      	cmp	r3, #24
 8002940:	d128      	bne.n	8002994 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d125      	bne.n	8002994 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4013      	ands	r3, r2
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x314>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e24e      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <HAL_RCC_OscConfig+0x344>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	061a      	lsls	r2, r3, #24
 8002970:	4b01      	ldr	r3, [pc, #4]	@ (8002978 <HAL_RCC_OscConfig+0x32c>)
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002976:	e052      	b.n	8002a1e <HAL_RCC_OscConfig+0x3d2>
 8002978:	40021000 	.word	0x40021000
 800297c:	ffff00ff 	.word	0xffff00ff
 8002980:	08005de0 	.word	0x08005de0
 8002984:	20000000 	.word	0x20000000
 8002988:	20000004 	.word	0x20000004
 800298c:	fffaffff 	.word	0xfffaffff
 8002990:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d026      	beq.n	80029ea <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4bc7      	ldr	r3, [pc, #796]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4bc6      	ldr	r3, [pc, #792]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 80029a2:	2180      	movs	r1, #128	@ 0x80
 80029a4:	0049      	lsls	r1, r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fdb7 	bl	800151c <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80029b4:	f7fe fdb2 	bl	800151c <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e21b      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c6:	4bbd      	ldr	r3, [pc, #756]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	@ 0x80
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4013      	ands	r3, r2
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4bba      	ldr	r3, [pc, #744]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4aba      	ldr	r2, [pc, #744]	@ (8002cc0 <HAL_RCC_OscConfig+0x674>)
 80029d8:	4013      	ands	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061a      	lsls	r2, r3, #24
 80029e2:	4bb6      	ldr	r3, [pc, #728]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	e019      	b.n	8002a1e <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4bb4      	ldr	r3, [pc, #720]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4bb3      	ldr	r3, [pc, #716]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 80029f0:	49b4      	ldr	r1, [pc, #720]	@ (8002cc4 <HAL_RCC_OscConfig+0x678>)
 80029f2:	400a      	ands	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fd91 	bl	800151c <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fd8c 	bl	800151c <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1f5      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a12:	4baa      	ldr	r3, [pc, #680]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2208      	movs	r2, #8
 8002a24:	4013      	ands	r3, r2
 8002a26:	d051      	beq.n	8002acc <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d031      	beq.n	8002a94 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8002a38:	4aa0      	ldr	r2, [pc, #640]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a3a:	2394      	movs	r3, #148	@ 0x94
 8002a3c:	58d3      	ldr	r3, [r2, r3]
 8002a3e:	499f      	ldr	r1, [pc, #636]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a40:	2204      	movs	r2, #4
 8002a42:	4393      	bics	r3, r2
 8002a44:	2294      	movs	r2, #148	@ 0x94
 8002a46:	508b      	str	r3, [r1, r2]
 8002a48:	e007      	b.n	8002a5a <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8002a4a:	4a9c      	ldr	r2, [pc, #624]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a4c:	2394      	movs	r3, #148	@ 0x94
 8002a4e:	58d3      	ldr	r3, [r2, r3]
 8002a50:	499a      	ldr	r1, [pc, #616]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a52:	2204      	movs	r2, #4
 8002a54:	4313      	orrs	r3, r2
 8002a56:	2294      	movs	r2, #148	@ 0x94
 8002a58:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4a98      	ldr	r2, [pc, #608]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a5c:	2394      	movs	r3, #148	@ 0x94
 8002a5e:	58d3      	ldr	r3, [r2, r3]
 8002a60:	4996      	ldr	r1, [pc, #600]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	2294      	movs	r2, #148	@ 0x94
 8002a68:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fd57 	bl	800151c <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe fd52 	bl	800151c <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b11      	cmp	r3, #17
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1bb      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a86:	4a8d      	ldr	r2, [pc, #564]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a88:	2394      	movs	r3, #148	@ 0x94
 8002a8a:	58d3      	ldr	r3, [r2, r3]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x428>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4a89      	ldr	r2, [pc, #548]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a96:	2394      	movs	r3, #148	@ 0x94
 8002a98:	58d3      	ldr	r3, [r2, r3]
 8002a9a:	4988      	ldr	r1, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	2294      	movs	r2, #148	@ 0x94
 8002aa2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fd3a 	bl	800151c <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aae:	f7fe fd35 	bl	800151c <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b11      	cmp	r3, #17
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e19e      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac0:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002ac2:	2394      	movs	r3, #148	@ 0x94
 8002ac4:	58d3      	ldr	r3, [r2, r3]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d100      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x48c>
 8002ad6:	e10d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad8:	201f      	movs	r0, #31
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8002ae0:	4b76      	ldr	r3, [pc, #472]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002ae2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	055b      	lsls	r3, r3, #21
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d110      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	4b73      	ldr	r3, [pc, #460]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002aee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002af0:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002af2:	2180      	movs	r1, #128	@ 0x80
 8002af4:	0549      	lsls	r1, r1, #21
 8002af6:	430a      	orrs	r2, r1
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002afa:	4b70      	ldr	r3, [pc, #448]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002afc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	055b      	lsls	r3, r3, #21
 8002b02:	4013      	ands	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8002cc8 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	d11a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8002cc8 <HAL_RCC_OscConfig+0x67c>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc8 <HAL_RCC_OscConfig+0x67c>)
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	0049      	lsls	r1, r1, #1
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7fe fcf8 	bl	800151c <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7fe fcf3 	bl	800151c <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e15c      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b44:	4b60      	ldr	r3, [pc, #384]	@ (8002cc8 <HAL_RCC_OscConfig+0x67c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	d01e      	beq.n	8002b98 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	4013      	ands	r3, r2
 8002b62:	d010      	beq.n	8002b86 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b64:	4a55      	ldr	r2, [pc, #340]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b66:	2390      	movs	r3, #144	@ 0x90
 8002b68:	58d3      	ldr	r3, [r2, r3]
 8002b6a:	4954      	ldr	r1, [pc, #336]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	2290      	movs	r2, #144	@ 0x90
 8002b72:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b74:	4a51      	ldr	r2, [pc, #324]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b76:	2390      	movs	r3, #144	@ 0x90
 8002b78:	58d3      	ldr	r3, [r2, r3]
 8002b7a:	4950      	ldr	r1, [pc, #320]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	2290      	movs	r2, #144	@ 0x90
 8002b82:	508b      	str	r3, [r1, r2]
 8002b84:	e018      	b.n	8002bb8 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b86:	4a4d      	ldr	r2, [pc, #308]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b88:	2390      	movs	r3, #144	@ 0x90
 8002b8a:	58d3      	ldr	r3, [r2, r3]
 8002b8c:	494b      	ldr	r1, [pc, #300]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4313      	orrs	r3, r2
 8002b92:	2290      	movs	r2, #144	@ 0x90
 8002b94:	508b      	str	r3, [r1, r2]
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b98:	4a48      	ldr	r2, [pc, #288]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002b9a:	2390      	movs	r3, #144	@ 0x90
 8002b9c:	58d3      	ldr	r3, [r2, r3]
 8002b9e:	4947      	ldr	r1, [pc, #284]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	2290      	movs	r2, #144	@ 0x90
 8002ba6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ba8:	4a44      	ldr	r2, [pc, #272]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002baa:	2390      	movs	r3, #144	@ 0x90
 8002bac:	58d3      	ldr	r3, [r2, r3]
 8002bae:	4943      	ldr	r1, [pc, #268]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	2290      	movs	r2, #144	@ 0x90
 8002bb6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d04f      	beq.n	8002c60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fcac 	bl	800151c <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc8:	e009      	b.n	8002bde <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe fca7 	bl	800151c <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x680>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e10f      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	4a37      	ldr	r2, [pc, #220]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002be0:	2390      	movs	r3, #144	@ 0x90
 8002be2:	58d3      	ldr	r3, [r2, r3]
 8002be4:	2202      	movs	r2, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	d0ef      	beq.n	8002bca <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2280      	movs	r2, #128	@ 0x80
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d01a      	beq.n	8002c2a <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bf4:	4a31      	ldr	r2, [pc, #196]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002bf6:	2390      	movs	r3, #144	@ 0x90
 8002bf8:	58d3      	ldr	r3, [r2, r3]
 8002bfa:	4930      	ldr	r1, [pc, #192]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002bfc:	2280      	movs	r2, #128	@ 0x80
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	2290      	movs	r2, #144	@ 0x90
 8002c02:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c04:	e009      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe fc89 	bl	800151c <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	4a2e      	ldr	r2, [pc, #184]	@ (8002ccc <HAL_RCC_OscConfig+0x680>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0f1      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c1a:	4a28      	ldr	r2, [pc, #160]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c1c:	2390      	movs	r3, #144	@ 0x90
 8002c1e:	58d2      	ldr	r2, [r2, r3]
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0ee      	beq.n	8002c06 <HAL_RCC_OscConfig+0x5ba>
 8002c28:	e059      	b.n	8002cde <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c2a:	4a24      	ldr	r2, [pc, #144]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c2c:	2390      	movs	r3, #144	@ 0x90
 8002c2e:	58d3      	ldr	r3, [r2, r3]
 8002c30:	4922      	ldr	r1, [pc, #136]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c32:	2280      	movs	r2, #128	@ 0x80
 8002c34:	4393      	bics	r3, r2
 8002c36:	2290      	movs	r2, #144	@ 0x90
 8002c38:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c3a:	e009      	b.n	8002c50 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fc6e 	bl	800151c <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	4a21      	ldr	r2, [pc, #132]	@ (8002ccc <HAL_RCC_OscConfig+0x680>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0d6      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c50:	4a1a      	ldr	r2, [pc, #104]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c52:	2390      	movs	r3, #144	@ 0x90
 8002c54:	58d2      	ldr	r2, [r2, r3]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5f0>
 8002c5e:	e03e      	b.n	8002cde <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fc5c 	bl	800151c <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c68:	e009      	b.n	8002c7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fc57 	bl	800151c <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	4a15      	ldr	r2, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x680>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0bf      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c80:	2390      	movs	r3, #144	@ 0x90
 8002c82:	58d3      	ldr	r3, [r2, r3]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1ef      	bne.n	8002c6a <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c8c:	2390      	movs	r3, #144	@ 0x90
 8002c8e:	58d3      	ldr	r3, [r2, r3]
 8002c90:	2280      	movs	r2, #128	@ 0x80
 8002c92:	4013      	ands	r3, r2
 8002c94:	d023      	beq.n	8002cde <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c96:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c98:	2390      	movs	r3, #144	@ 0x90
 8002c9a:	58d3      	ldr	r3, [r2, r3]
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <HAL_RCC_OscConfig+0x670>)
 8002c9e:	2280      	movs	r2, #128	@ 0x80
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	2290      	movs	r2, #144	@ 0x90
 8002ca4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ca6:	e013      	b.n	8002cd0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fc38 	bl	800151c <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	4a06      	ldr	r2, [pc, #24]	@ (8002ccc <HAL_RCC_OscConfig+0x680>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d90b      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0a0      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	80ffffff 	.word	0x80ffffff
 8002cc4:	fffffeff 	.word	0xfffffeff
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002cd2:	2390      	movs	r3, #144	@ 0x90
 8002cd4:	58d2      	ldr	r2, [r2, r3]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d1e4      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cde:	231f      	movs	r3, #31
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002cea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cec:	4b46      	ldr	r3, [pc, #280]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002cee:	4947      	ldr	r1, [pc, #284]	@ (8002e0c <HAL_RCC_OscConfig+0x7c0>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d100      	bne.n	8002cfe <HAL_RCC_OscConfig+0x6b2>
 8002cfc:	e07e      	b.n	8002dfc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfe:	4b42      	ldr	r3, [pc, #264]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2238      	movs	r2, #56	@ 0x38
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b18      	cmp	r3, #24
 8002d08:	d100      	bne.n	8002d0c <HAL_RCC_OscConfig+0x6c0>
 8002d0a:	e075      	b.n	8002df8 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d156      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b3c      	ldr	r3, [pc, #240]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b3b      	ldr	r3, [pc, #236]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d1a:	493d      	ldr	r1, [pc, #244]	@ (8002e10 <HAL_RCC_OscConfig+0x7c4>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fbfc 	bl	800151c <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe fbf7 	bl	800151c <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e060      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3c:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	049b      	lsls	r3, r3, #18
 8002d44:	4013      	ands	r3, r2
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d48:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a31      	ldr	r2, [pc, #196]	@ (8002e14 <HAL_RCC_OscConfig+0x7c8>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	431a      	orrs	r2, r3
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8002d7c:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	0549      	lsls	r1, r1, #21
 8002d86:	430a      	orrs	r2, r1
 8002d88:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	0449      	lsls	r1, r1, #17
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fbc0 	bl	800151c <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe fbbb 	bl	800151c <HAL_GetTick>
 8002da6:	0002      	movs	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e024      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	049b      	lsls	r3, r3, #18
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x756>
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002dc8:	4911      	ldr	r1, [pc, #68]	@ (8002e10 <HAL_RCC_OscConfig+0x7c4>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fba5 	bl	800151c <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fba0 	bl	800151c <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e009      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dea:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_RCC_OscConfig+0x7bc>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	049b      	lsls	r3, r3, #18
 8002df2:	4013      	ands	r3, r2
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x78c>
 8002df6:	e001      	b.n	8002dfc <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b008      	add	sp, #32
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	efffffff 	.word	0xefffffff
 8002e10:	feffffff 	.word	0xfeffffff
 8002e14:	11c1808c 	.word	0x11c1808c

08002e18 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e22:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2207      	movs	r2, #7
 8002e28:	4013      	ands	r3, r2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d911      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e30:	4b68      	ldr	r3, [pc, #416]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2207      	movs	r2, #7
 8002e36:	4393      	bics	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b64      	ldr	r3, [pc, #400]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0bb      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x48>
 8002e5e:	e064      	b.n	8002f2a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e68:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	049b      	lsls	r3, r3, #18
 8002e70:	4013      	ands	r3, r2
 8002e72:	d138      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0a9      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e80:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	029b      	lsls	r3, r3, #10
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d12c      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e09d      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e98:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d121      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e092      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eae:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d115      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e086      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec6:	4a44      	ldr	r2, [pc, #272]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	2394      	movs	r3, #148	@ 0x94
 8002eca:	58d3      	ldr	r3, [r2, r3]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07a      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	4a40      	ldr	r2, [pc, #256]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	2390      	movs	r3, #144	@ 0x90
 8002eda:	58d3      	ldr	r3, [r2, r3]
 8002edc:	2202      	movs	r2, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e072      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2207      	movs	r2, #7
 8002eec:	4393      	bics	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efa:	f7fe fb0f 	bl	800151c <HAL_GetTick>
 8002efe:	0003      	movs	r3, r0
 8002f00:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	e009      	b.n	8002f18 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7fe fb0a 	bl	800151c <HAL_GetTick>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	4a33      	ldr	r2, [pc, #204]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e059      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f18:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2238      	movs	r2, #56	@ 0x38
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d1ec      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b28      	ldr	r3, [pc, #160]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a29      	ldr	r2, [pc, #164]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b25      	ldr	r3, [pc, #148]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b22      	ldr	r3, [pc, #136]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4013      	ands	r3, r2
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d211      	bcs.n	8002f7a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f68:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e028      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	4013      	ands	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002f98:	f000 f82a 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002f9c:	0001      	movs	r1, r0
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fac:	001a      	movs	r2, r3
 8002fae:	231f      	movs	r3, #31
 8002fb0:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002fb2:	000a      	movs	r2, r1
 8002fb4:	40da      	lsrs	r2, r3
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fec <HAL_RCC_ClockConfig+0x1d4>)
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8002fba:	250b      	movs	r5, #11
 8002fbc:	197c      	adds	r4, r7, r5
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	f7fe fa50 	bl	8001464 <HAL_InitTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8002fc8:	197b      	adds	r3, r7, r5
 8002fca:	781b      	ldrb	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	00001388 	.word	0x00001388
 8002fe0:	fffff0ff 	.word	0xfffff0ff
 8002fe4:	ffff8fff 	.word	0xffff8fff
 8002fe8:	08005de0 	.word	0x08005de0
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	@ 0x28
 8002ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffe:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2238      	movs	r2, #56	@ 0x38
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003008:	4b43      	ldr	r3, [pc, #268]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2203      	movs	r2, #3
 800300e:	4013      	ands	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x34>
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b18      	cmp	r3, #24
 800301c:	d125      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d122      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003024:	4b3c      	ldr	r3, [pc, #240]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2208      	movs	r2, #8
 800302a:	4013      	ands	r3, r2
 800302c:	d107      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800302e:	4a3a      	ldr	r2, [pc, #232]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 8003030:	2394      	movs	r3, #148	@ 0x94
 8003032:	58d3      	ldr	r3, [r2, r3]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	220f      	movs	r2, #15
 8003038:	4013      	ands	r3, r2
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
 800303c:	e005      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800303e:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	220f      	movs	r2, #15
 8003046:	4013      	ands	r3, r2
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	2b0b      	cmp	r3, #11
 800304e:	d901      	bls.n	8003054 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8003054:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11b      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003068:	e018      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d102      	bne.n	8003076 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003070:	4b2b      	ldr	r3, [pc, #172]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x130>)
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	e012      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b10      	cmp	r3, #16
 800307a:	d102      	bne.n	8003082 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800307c:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x134>)
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	e00c      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b20      	cmp	r3, #32
 8003086:	d103      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003088:	23fa      	movs	r3, #250	@ 0xfa
 800308a:	01db      	lsls	r3, r3, #7
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e005      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b28      	cmp	r3, #40	@ 0x28
 8003094:	d102      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b18      	cmp	r3, #24
 80030a0:	d135      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2203      	movs	r2, #3
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	2207      	movs	r2, #7
 80030b4:	4013      	ands	r3, r2
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d003      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0xd8>
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0xde>
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x130>)
 80030ca:	61fb      	str	r3, [r7, #28]
        break;
 80030cc:	e005      	b.n	80030da <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x134>)
 80030d0:	61fb      	str	r3, [r7, #28]
        break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	61fb      	str	r3, [r7, #28]
        break;
 80030d8:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80030da:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	227f      	movs	r2, #127	@ 0x7f
 80030e2:	4013      	ands	r3, r2
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	4353      	muls	r3, r2
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7fd f81e 	bl	800012c <__udivsi3>
 80030f0:	0003      	movs	r3, r0
 80030f2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x128>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0f5b      	lsrs	r3, r3, #29
 80030fa:	2207      	movs	r2, #7
 80030fc:	4013      	ands	r3, r2
 80030fe:	3301      	adds	r3, #1
 8003100:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f7fd f811 	bl	800012c <__udivsi3>
 800310a:	0003      	movs	r3, r0
 800310c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800310e:	6a3b      	ldr	r3, [r7, #32]
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b00a      	add	sp, #40	@ 0x28
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	08005df8 	.word	0x08005df8
 8003120:	00f42400 	.word	0x00f42400
 8003124:	003d0900 	.word	0x003d0900

08003128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	@ (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	0001      	movs	r1, r0
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0b1b      	lsrs	r3, r3, #12
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	001a      	movs	r2, r3
 8003156:	231f      	movs	r3, #31
 8003158:	4013      	ands	r3, r2
 800315a:	40d9      	lsrs	r1, r3
 800315c:	000b      	movs	r3, r1
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	08005df0 	.word	0x08005df0

0800316c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003178:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800317a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	055b      	lsls	r3, r3, #21
 8003180:	4013      	ands	r3, r2
 8003182:	d004      	beq.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff fa56 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 8003188:	0003      	movs	r3, r0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e017      	b.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003190:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003192:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	0549      	lsls	r1, r1, #21
 8003198:	430a      	orrs	r2, r1
 800319a:	659a      	str	r2, [r3, #88]	@ 0x58
 800319c:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800319e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	055b      	lsls	r3, r3, #21
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031aa:	f7ff fa43 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 80031ae:	0003      	movs	r3, r0
 80031b0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031b2:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80031b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031b6:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80031b8:	4920      	ldr	r1, [pc, #128]	@ (800323c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d111      	bne.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b80      	cmp	r3, #128	@ 0x80
 80031cc:	d91c      	bls.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2bb0      	cmp	r3, #176	@ 0xb0
 80031d2:	d902      	bls.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031d4:	2302      	movs	r3, #2
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	e016      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b90      	cmp	r3, #144	@ 0x90
 80031de:	d902      	bls.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	e010      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e00d      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80031f0:	d902      	bls.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80031f2:	2302      	movs	r3, #2
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e007      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b70      	cmp	r3, #112	@ 0x70
 80031fc:	d102      	bne.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80031fe:	2301      	movs	r3, #1
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e001      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2207      	movs	r2, #7
 800320e:	4393      	bics	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2207      	movs	r2, #7
 8003220:	4013      	ands	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b006      	add	sp, #24
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	efffffff 	.word	0xefffffff
 8003240:	40022000 	.word	0x40022000

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800324c:	2313      	movs	r3, #19
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003254:	2312      	movs	r3, #18
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	4013      	ands	r3, r2
 8003266:	d100      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003268:	e0b7      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326a:	2011      	movs	r0, #17
 800326c:	183b      	adds	r3, r7, r0
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b4c      	ldr	r3, [pc, #304]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003274:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	055b      	lsls	r3, r3, #21
 800327a:	4013      	ands	r3, r2
 800327c:	d110      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b49      	ldr	r3, [pc, #292]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003282:	4b48      	ldr	r3, [pc, #288]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	0549      	lsls	r1, r1, #21
 8003288:	430a      	orrs	r2, r1
 800328a:	659a      	str	r2, [r3, #88]	@ 0x58
 800328c:	4b45      	ldr	r3, [pc, #276]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	055b      	lsls	r3, r3, #21
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	183b      	adds	r3, r7, r0
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a0:	4b41      	ldr	r3, [pc, #260]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	0049      	lsls	r1, r1, #1
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ae:	f7fe f935 	bl	800151c <HAL_GetTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b6:	e00b      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fe f930 	bl	800151c <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d904      	bls.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80032c6:	2313      	movs	r3, #19
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2203      	movs	r2, #3
 80032cc:	701a      	strb	r2, [r3, #0]
        break;
 80032ce:	e005      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032d0:	4b35      	ldr	r3, [pc, #212]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d0ed      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80032dc:	2313      	movs	r3, #19
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d168      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032e6:	4a2f      	ldr	r2, [pc, #188]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e8:	2390      	movs	r3, #144	@ 0x90
 80032ea:	58d2      	ldr	r2, [r2, r3]
 80032ec:	23c0      	movs	r3, #192	@ 0xc0
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01f      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	d01a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003304:	4a27      	ldr	r2, [pc, #156]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	2390      	movs	r3, #144	@ 0x90
 8003308:	58d3      	ldr	r3, [r2, r3]
 800330a:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003310:	4a24      	ldr	r2, [pc, #144]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	2390      	movs	r3, #144	@ 0x90
 8003314:	58d3      	ldr	r3, [r2, r3]
 8003316:	4923      	ldr	r1, [pc, #140]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	0252      	lsls	r2, r2, #9
 800331c:	4313      	orrs	r3, r2
 800331e:	2290      	movs	r2, #144	@ 0x90
 8003320:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4a20      	ldr	r2, [pc, #128]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003324:	2390      	movs	r3, #144	@ 0x90
 8003326:	58d3      	ldr	r3, [r2, r3]
 8003328:	491e      	ldr	r1, [pc, #120]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	4a21      	ldr	r2, [pc, #132]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800332c:	4013      	ands	r3, r2
 800332e:	2290      	movs	r2, #144	@ 0x90
 8003330:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003332:	491c      	ldr	r1, [pc, #112]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003334:	2290      	movs	r2, #144	@ 0x90
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2201      	movs	r2, #1
 800333e:	4013      	ands	r3, r2
 8003340:	d017      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe f8eb 	bl	800151c <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334a:	e00c      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe f8e6 	bl	800151c <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d904      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 800335c:	2313      	movs	r3, #19
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2203      	movs	r2, #3
 8003362:	701a      	strb	r2, [r3, #0]
            break;
 8003364:	e005      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	4a0f      	ldr	r2, [pc, #60]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003368:	2390      	movs	r3, #144	@ 0x90
 800336a:	58d3      	ldr	r3, [r2, r3]
 800336c:	2202      	movs	r2, #2
 800336e:	4013      	ands	r3, r2
 8003370:	d0ec      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8003372:	2313      	movs	r3, #19
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337c:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	2390      	movs	r3, #144	@ 0x90
 8003380:	58d3      	ldr	r3, [r2, r3]
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003384:	401a      	ands	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338a:	4906      	ldr	r1, [pc, #24]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338c:	4313      	orrs	r3, r2
 800338e:	2290      	movs	r2, #144	@ 0x90
 8003390:	508b      	str	r3, [r1, r2]
 8003392:	e017      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003394:	2312      	movs	r3, #18
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2213      	movs	r2, #19
 800339a:	18ba      	adds	r2, r7, r2
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e010      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
 80033ac:	fffffcff 	.word	0xfffffcff
 80033b0:	fffeffff 	.word	0xfffeffff
 80033b4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	2312      	movs	r3, #18
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2213      	movs	r2, #19
 80033be:	18ba      	adds	r2, r7, r2
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c4:	2311      	movs	r3, #17
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b84      	ldr	r3, [pc, #528]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033d2:	4b83      	ldr	r3, [pc, #524]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033d4:	4983      	ldr	r1, [pc, #524]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d00b      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e4:	4a7e      	ldr	r2, [pc, #504]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033e6:	2388      	movs	r3, #136	@ 0x88
 80033e8:	58d3      	ldr	r3, [r2, r3]
 80033ea:	2203      	movs	r2, #3
 80033ec:	4393      	bics	r3, r2
 80033ee:	001a      	movs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	497a      	ldr	r1, [pc, #488]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	2288      	movs	r2, #136	@ 0x88
 80033fa:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d00b      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003406:	4a76      	ldr	r2, [pc, #472]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003408:	2388      	movs	r3, #136	@ 0x88
 800340a:	58d3      	ldr	r3, [r2, r3]
 800340c:	220c      	movs	r2, #12
 800340e:	4393      	bics	r3, r2
 8003410:	001a      	movs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4972      	ldr	r1, [pc, #456]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003418:	4313      	orrs	r3, r2
 800341a:	2288      	movs	r2, #136	@ 0x88
 800341c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2210      	movs	r2, #16
 8003424:	4013      	ands	r3, r2
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003428:	4a6d      	ldr	r2, [pc, #436]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800342a:	2388      	movs	r3, #136	@ 0x88
 800342c:	58d3      	ldr	r3, [r2, r3]
 800342e:	4a6e      	ldr	r2, [pc, #440]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003430:	401a      	ands	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	496a      	ldr	r1, [pc, #424]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	2288      	movs	r2, #136	@ 0x88
 800343c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2208      	movs	r2, #8
 8003444:	4013      	ands	r3, r2
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003448:	4a65      	ldr	r2, [pc, #404]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800344a:	2388      	movs	r3, #136	@ 0x88
 800344c:	58d3      	ldr	r3, [r2, r3]
 800344e:	4a67      	ldr	r2, [pc, #412]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003450:	401a      	ands	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4962      	ldr	r1, [pc, #392]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003458:	4313      	orrs	r3, r2
 800345a:	2288      	movs	r2, #136	@ 0x88
 800345c:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	4013      	ands	r3, r2
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003468:	4a5d      	ldr	r2, [pc, #372]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800346a:	2388      	movs	r3, #136	@ 0x88
 800346c:	58d3      	ldr	r3, [r2, r3]
 800346e:	4a60      	ldr	r2, [pc, #384]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003470:	401a      	ands	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	495a      	ldr	r1, [pc, #360]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	2288      	movs	r2, #136	@ 0x88
 800347c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2240      	movs	r2, #64	@ 0x40
 8003484:	4013      	ands	r3, r2
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003488:	4a55      	ldr	r2, [pc, #340]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800348a:	2388      	movs	r3, #136	@ 0x88
 800348c:	58d3      	ldr	r3, [r2, r3]
 800348e:	4a59      	ldr	r2, [pc, #356]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003490:	401a      	ands	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	4952      	ldr	r1, [pc, #328]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	2288      	movs	r2, #136	@ 0x88
 800349c:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a8:	4a4d      	ldr	r2, [pc, #308]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034aa:	2388      	movs	r3, #136	@ 0x88
 80034ac:	58d3      	ldr	r3, [r2, r3]
 80034ae:	4a52      	ldr	r2, [pc, #328]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80034b0:	401a      	ands	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	494a      	ldr	r1, [pc, #296]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	2288      	movs	r2, #136	@ 0x88
 80034bc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ca:	4a45      	ldr	r2, [pc, #276]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034cc:	2388      	movs	r3, #136	@ 0x88
 80034ce:	58d3      	ldr	r3, [r2, r3]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4941      	ldr	r1, [pc, #260]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	2288      	movs	r2, #136	@ 0x88
 80034de:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	4013      	ands	r3, r2
 80034ea:	d017      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f0:	2380      	movs	r3, #128	@ 0x80
 80034f2:	055b      	lsls	r3, r3, #21
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80034f8:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b38      	ldr	r3, [pc, #224]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034fe:	2180      	movs	r1, #128	@ 0x80
 8003500:	0249      	lsls	r1, r1, #9
 8003502:	430a      	orrs	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003506:	4a36      	ldr	r2, [pc, #216]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003508:	2388      	movs	r3, #136	@ 0x88
 800350a:	58d3      	ldr	r3, [r2, r3]
 800350c:	4a3c      	ldr	r2, [pc, #240]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4932      	ldr	r1, [pc, #200]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	2288      	movs	r2, #136	@ 0x88
 800351a:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	4013      	ands	r3, r2
 8003526:	d017      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	051b      	lsls	r3, r3, #20
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8003534:	4b2a      	ldr	r3, [pc, #168]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	4b29      	ldr	r3, [pc, #164]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0449      	lsls	r1, r1, #17
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003544:	2388      	movs	r3, #136	@ 0x88
 8003546:	58d3      	ldr	r3, [r2, r3]
 8003548:	4a2e      	ldr	r2, [pc, #184]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	4923      	ldr	r1, [pc, #140]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	2288      	movs	r2, #136	@ 0x88
 8003556:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4013      	ands	r3, r2
 8003562:	d017      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	045b      	lsls	r3, r3, #17
 800356c:	429a      	cmp	r2, r3
 800356e:	d106      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8003570:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003576:	2180      	movs	r1, #128	@ 0x80
 8003578:	0449      	lsls	r1, r1, #17
 800357a:	430a      	orrs	r2, r1
 800357c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800357e:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003580:	2388      	movs	r3, #136	@ 0x88
 8003582:	58d3      	ldr	r3, [r2, r3]
 8003584:	4a20      	ldr	r2, [pc, #128]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003586:	401a      	ands	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	4914      	ldr	r1, [pc, #80]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	2288      	movs	r2, #136	@ 0x88
 8003592:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2380      	movs	r3, #128	@ 0x80
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	4013      	ands	r3, r2
 800359e:	d017      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	049b      	lsls	r3, r3, #18
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d106      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	0449      	lsls	r1, r1, #17
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035ba:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80035bc:	2388      	movs	r3, #136	@ 0x88
 80035be:	58d3      	ldr	r3, [r2, r3]
 80035c0:	4a11      	ldr	r2, [pc, #68]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80035c2:	401a      	ands	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	4905      	ldr	r1, [pc, #20]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	2288      	movs	r2, #136	@ 0x88
 80035ce:	508b      	str	r3, [r1, r2]

  }

  return status;
 80035d0:	2312      	movs	r3, #18
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	781b      	ldrb	r3, [r3, #0]
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b006      	add	sp, #24
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000
 80035e4:	efffffff 	.word	0xefffffff
 80035e8:	fffff3ff 	.word	0xfffff3ff
 80035ec:	fffffcff 	.word	0xfffffcff
 80035f0:	ffffcfff 	.word	0xffffcfff
 80035f4:	fffcffff 	.word	0xfffcffff
 80035f8:	fff3ffff 	.word	0xfff3ffff
 80035fc:	ffcfffff 	.word	0xffcfffff
 8003600:	cfffffff 	.word	0xcfffffff
 8003604:	f3ffffff 	.word	0xf3ffffff
 8003608:	feffffff 	.word	0xfeffffff

0800360c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b089      	sub	sp, #36	@ 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	2380      	movs	r3, #128	@ 0x80
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	429a      	cmp	r2, r3
 8003620:	d154      	bne.n	80036cc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003622:	4ad0      	ldr	r2, [pc, #832]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003624:	2390      	movs	r3, #144	@ 0x90
 8003626:	58d2      	ldr	r2, [r2, r3]
 8003628:	23c0      	movs	r3, #192	@ 0xc0
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	23c0      	movs	r3, #192	@ 0xc0
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	429a      	cmp	r2, r3
 8003638:	d039      	beq.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	23c0      	movs	r3, #192	@ 0xc0
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	429a      	cmp	r2, r3
 8003642:	d901      	bls.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003644:	f000 fbf3 	bl	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	429a      	cmp	r2, r3
 8003650:	d006      	beq.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	429a      	cmp	r2, r3
 800365a:	d00f      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800365c:	f000 fbe7 	bl	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003660:	4ac0      	ldr	r2, [pc, #768]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003662:	2390      	movs	r3, #144	@ 0x90
 8003664:	58d3      	ldr	r3, [r2, r3]
 8003666:	2202      	movs	r2, #2
 8003668:	4013      	ands	r3, r2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d001      	beq.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800366e:	f000 fbe0 	bl	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	61fb      	str	r3, [r7, #28]
        break;
 8003678:	f000 fbdb 	bl	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800367c:	4ab9      	ldr	r2, [pc, #740]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800367e:	2394      	movs	r3, #148	@ 0x94
 8003680:	58d3      	ldr	r3, [r2, r3]
 8003682:	2202      	movs	r2, #2
 8003684:	4013      	ands	r3, r2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d001      	beq.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 800368a:	f000 fbd4 	bl	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800368e:	4ab5      	ldr	r2, [pc, #724]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003690:	2394      	movs	r3, #148	@ 0x94
 8003692:	58d3      	ldr	r3, [r2, r3]
 8003694:	2204      	movs	r2, #4
 8003696:	4013      	ands	r3, r2
 8003698:	2b04      	cmp	r3, #4
 800369a:	d103      	bne.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 800369c:	23fa      	movs	r3, #250	@ 0xfa
 800369e:	61fb      	str	r3, [r7, #28]
        break;
 80036a0:	f000 fbc9 	bl	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 80036a4:	23fa      	movs	r3, #250	@ 0xfa
 80036a6:	01db      	lsls	r3, r3, #7
 80036a8:	61fb      	str	r3, [r7, #28]
        break;
 80036aa:	f000 fbc4 	bl	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036ae:	4bad      	ldr	r3, [pc, #692]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	401a      	ands	r2, r3
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80036c0:	f000 fbbb 	bl	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 80036c4:	4ba8      	ldr	r3, [pc, #672]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80036c6:	61fb      	str	r3, [r7, #28]
        break;
 80036c8:	f000 fbb7 	bl	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	029b      	lsls	r3, r3, #10
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d100      	bne.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80036d6:	e0f7      	b.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	429a      	cmp	r2, r3
 80036e0:	d901      	bls.n	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80036e2:	f000 fbac 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	025b      	lsls	r3, r3, #9
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d100      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80036f0:	e0ea      	b.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	025b      	lsls	r3, r3, #9
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d901      	bls.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80036fc:	f000 fb9f 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	01db      	lsls	r3, r3, #7
 8003706:	429a      	cmp	r2, r3
 8003708:	d100      	bne.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800370a:	e180      	b.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	429a      	cmp	r2, r3
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8003716:	f000 fb92 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	019b      	lsls	r3, r3, #6
 8003720:	429a      	cmp	r2, r3
 8003722:	d101      	bne.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8003724:	f000 fb29 	bl	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	429a      	cmp	r2, r3
 8003730:	d901      	bls.n	8003736 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003732:	f000 fb84 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	429a      	cmp	r2, r3
 800373e:	d100      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8003740:	e2f0      	b.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	429a      	cmp	r2, r3
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800374c:	f000 fb77 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	429a      	cmp	r2, r3
 8003758:	d100      	bne.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800375a:	e2b8      	b.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	429a      	cmp	r2, r3
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003766:	f000 fb6a 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	429a      	cmp	r2, r3
 8003772:	d100      	bne.n	8003776 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8003774:	e249      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	2380      	movs	r3, #128	@ 0x80
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	429a      	cmp	r2, r3
 800377e:	d901      	bls.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8003780:	f000 fb5d 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b80      	cmp	r3, #128	@ 0x80
 8003788:	d100      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 800378a:	e1e1      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d901      	bls.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8003792:	f000 fb54 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b20      	cmp	r3, #32
 800379a:	d80f      	bhi.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80037a2:	f000 fb4c 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d901      	bls.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80037ac:	f000 fb47 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	469f      	mov	pc, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d100      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80037c2:	e191      	b.n	8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 80037c4:	f000 fb3b 	bl	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80037c8:	4a66      	ldr	r2, [pc, #408]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80037ca:	2388      	movs	r3, #136	@ 0x88
 80037cc:	58d3      	ldr	r3, [r2, r3]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4013      	ands	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d025      	beq.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d82d      	bhi.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d013      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d827      	bhi.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d005      	beq.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 80037f8:	e020      	b.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 80037fa:	f7ff fc9f 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80037fe:	0003      	movs	r3, r0
 8003800:	61fb      	str	r3, [r7, #28]
            break;
 8003802:	e020      	b.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 8003804:	f7ff fbf4 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8003808:	0003      	movs	r3, r0
 800380a:	61fb      	str	r3, [r7, #28]
            break;
 800380c:	e01b      	b.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800380e:	4b55      	ldr	r3, [pc, #340]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	401a      	ands	r2, r3
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	429a      	cmp	r2, r3
 800381e:	d10f      	bne.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 8003820:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003822:	61fb      	str	r3, [r7, #28]
            break;
 8003824:	e00c      	b.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003826:	4a4f      	ldr	r2, [pc, #316]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003828:	2390      	movs	r3, #144	@ 0x90
 800382a:	58d3      	ldr	r3, [r2, r3]
 800382c:	2202      	movs	r2, #2
 800382e:	4013      	ands	r3, r2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d107      	bne.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	61fb      	str	r3, [r7, #28]
            break;
 800383a:	e003      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	e2ff      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	e2fd      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003844:	46c0      	nop			@ (mov r8, r8)
        break;
 8003846:	e2fb      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003848:	4a46      	ldr	r2, [pc, #280]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800384a:	2388      	movs	r3, #136	@ 0x88
 800384c:	58d3      	ldr	r3, [r2, r3]
 800384e:	220c      	movs	r2, #12
 8003850:	4013      	ands	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d025      	beq.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d82d      	bhi.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d013      	beq.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d827      	bhi.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d005      	beq.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8003878:	e020      	b.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800387a:	f7ff fc5f 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 800387e:	0003      	movs	r3, r0
 8003880:	61fb      	str	r3, [r7, #28]
            break;
 8003882:	e020      	b.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 8003884:	f7ff fbb4 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8003888:	0003      	movs	r3, r0
 800388a:	61fb      	str	r3, [r7, #28]
            break;
 800388c:	e01b      	b.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800388e:	4b35      	ldr	r3, [pc, #212]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	401a      	ands	r2, r3
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	429a      	cmp	r2, r3
 800389e:	d10f      	bne.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 80038a0:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80038a2:	61fb      	str	r3, [r7, #28]
            break;
 80038a4:	e00c      	b.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80038a8:	2390      	movs	r3, #144	@ 0x90
 80038aa:	58d3      	ldr	r3, [r2, r3]
 80038ac:	2202      	movs	r2, #2
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 80038b4:	2380      	movs	r3, #128	@ 0x80
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	61fb      	str	r3, [r7, #28]
            break;
 80038ba:	e003      	b.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	e2bf      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	e2bd      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80038c4:	46c0      	nop			@ (mov r8, r8)
        break;
 80038c6:	e2bb      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 80038c8:	f7ff fc38 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80038cc:	0003      	movs	r3, r0
 80038ce:	61fb      	str	r3, [r7, #28]
        break;
 80038d0:	e2b6      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80038d2:	4a24      	ldr	r2, [pc, #144]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80038d4:	2388      	movs	r3, #136	@ 0x88
 80038d6:	58d2      	ldr	r2, [r2, r3]
 80038d8:	23c0      	movs	r3, #192	@ 0xc0
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	23c0      	movs	r3, #192	@ 0xc0
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d02d      	beq.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d833      	bhi.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d017      	beq.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	2380      	movs	r3, #128	@ 0x80
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	429a      	cmp	r2, r3
 8003906:	d829      	bhi.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	429a      	cmp	r2, r3
 8003916:	d005      	beq.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 8003918:	e020      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 800391a:	f7ff fc0f 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 800391e:	0003      	movs	r3, r0
 8003920:	61fb      	str	r3, [r7, #28]
            break;
 8003922:	e028      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 8003924:	f7ff fb64 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8003928:	0003      	movs	r3, r0
 800392a:	61fb      	str	r3, [r7, #28]
            break;
 800392c:	e023      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	401a      	ands	r2, r3
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	429a      	cmp	r2, r3
 800393e:	d10f      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003942:	61fb      	str	r3, [r7, #28]
            break;
 8003944:	e00c      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003946:	4a07      	ldr	r2, [pc, #28]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003948:	2390      	movs	r3, #144	@ 0x90
 800394a:	58d3      	ldr	r3, [r2, r3]
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d10f      	bne.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	61fb      	str	r3, [r7, #28]
            break;
 800395a:	e00b      	b.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 800395c:	46c0      	nop			@ (mov r8, r8)
 800395e:	e26f      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003960:	46c0      	nop			@ (mov r8, r8)
 8003962:	e26d      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003964:	40021000 	.word	0x40021000
 8003968:	0001e848 	.word	0x0001e848
 800396c:	08005e68 	.word	0x08005e68
 8003970:	00f42400 	.word	0x00f42400
            break;
 8003974:	46c0      	nop			@ (mov r8, r8)
        break;
 8003976:	e263      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8003978:	4ac1      	ldr	r2, [pc, #772]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800397a:	2388      	movs	r3, #136	@ 0x88
 800397c:	58d2      	ldr	r2, [r2, r3]
 800397e:	23c0      	movs	r3, #192	@ 0xc0
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4013      	ands	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	23c0      	movs	r3, #192	@ 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d02d      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	23c0      	movs	r3, #192	@ 0xc0
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	429a      	cmp	r2, r3
 8003998:	d833      	bhi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	2380      	movs	r3, #128	@ 0x80
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d017      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d829      	bhi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d005      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 80039be:	e020      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7ff fbbc 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80039c4:	0003      	movs	r3, r0
 80039c6:	61fb      	str	r3, [r7, #28]
            break;
 80039c8:	e020      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 80039ca:	f7ff fb11 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 80039ce:	0003      	movs	r3, r0
 80039d0:	61fb      	str	r3, [r7, #28]
            break;
 80039d2:	e01b      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039d4:	4baa      	ldr	r3, [pc, #680]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	401a      	ands	r2, r3
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d10f      	bne.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 80039e6:	4ba7      	ldr	r3, [pc, #668]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80039e8:	61fb      	str	r3, [r7, #28]
            break;
 80039ea:	e00c      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80039ec:	4aa4      	ldr	r2, [pc, #656]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80039ee:	2390      	movs	r3, #144	@ 0x90
 80039f0:	58d3      	ldr	r3, [r2, r3]
 80039f2:	2202      	movs	r2, #2
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	61fb      	str	r3, [r7, #28]
            break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	e21c      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	e21a      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003a0a:	46c0      	nop			@ (mov r8, r8)
        break;
 8003a0c:	e218      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003a0e:	4a9c      	ldr	r2, [pc, #624]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003a10:	2388      	movs	r3, #136	@ 0x88
 8003a12:	58d2      	ldr	r2, [r2, r3]
 8003a14:	23c0      	movs	r3, #192	@ 0xc0
 8003a16:	059b      	lsls	r3, r3, #22
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	059b      	lsls	r3, r3, #22
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d012      	beq.n	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	059b      	lsls	r3, r3, #22
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d825      	bhi.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	055b      	lsls	r3, r3, #21
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d014      	beq.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 8003a40:	e01c      	b.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 8003a42:	f7ff fad5 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8003a46:	0003      	movs	r3, r0
 8003a48:	61fb      	str	r3, [r7, #28]
            break;
 8003a4a:	e018      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	401a      	ands	r2, r3
 8003a56:	2380      	movs	r3, #128	@ 0x80
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 8003a5e:	4b89      	ldr	r3, [pc, #548]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003a60:	61fb      	str	r3, [r7, #28]
            break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
            break;
 8003a68:	e009      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003a6a:	2408      	movs	r4, #8
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f9f4 	bl	8003e5c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	61fb      	str	r3, [r7, #28]
            break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8003a7c:	46c0      	nop			@ (mov r8, r8)
        break;
 8003a7e:	e1df      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003a80:	4a7f      	ldr	r2, [pc, #508]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003a82:	2388      	movs	r3, #136	@ 0x88
 8003a84:	58d2      	ldr	r2, [r2, r3]
 8003a86:	23c0      	movs	r3, #192	@ 0xc0
 8003a88:	019b      	lsls	r3, r3, #6
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	019b      	lsls	r3, r3, #6
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d017      	beq.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d81e      	bhi.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	2380      	movs	r3, #128	@ 0x80
 8003aac:	015b      	lsls	r3, r3, #5
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d005      	beq.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 8003ab2:	e015      	b.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7ff fb42 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	61fb      	str	r3, [r7, #28]
            break;
 8003abc:	e013      	b.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 8003abe:	f7ff fa97 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	61fb      	str	r3, [r7, #28]
            break;
 8003ac6:	e00e      	b.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d104      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 8003ada:	4b6a      	ldr	r3, [pc, #424]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003adc:	61fb      	str	r3, [r7, #28]
            break;
 8003ade:	e001      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	e1ad      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003ae4:	46c0      	nop			@ (mov r8, r8)
        break;
 8003ae6:	e1ab      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003ae8:	4a65      	ldr	r2, [pc, #404]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003aea:	2388      	movs	r3, #136	@ 0x88
 8003aec:	58d2      	ldr	r2, [r2, r3]
 8003aee:	23c0      	movs	r3, #192	@ 0xc0
 8003af0:	029b      	lsls	r3, r3, #10
 8003af2:	4013      	ands	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	2380      	movs	r3, #128	@ 0x80
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d017      	beq.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	029b      	lsls	r3, r3, #10
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d81e      	bhi.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	025b      	lsls	r3, r3, #9
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d005      	beq.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 8003b1a:	e015      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff fb0e 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003b20:	0003      	movs	r3, r0
 8003b22:	61fb      	str	r3, [r7, #28]
            break;
 8003b24:	e013      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 8003b26:	f7ff fa63 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	61fb      	str	r3, [r7, #28]
            break;
 8003b2e:	e00e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b30:	4b53      	ldr	r3, [pc, #332]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d104      	bne.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 8003b42:	4b50      	ldr	r3, [pc, #320]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003b44:	61fb      	str	r3, [r7, #28]
            break;
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	e179      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003b4c:	46c0      	nop			@ (mov r8, r8)
        break;
 8003b4e:	e177      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b52:	2388      	movs	r3, #136	@ 0x88
 8003b54:	58d2      	ldr	r2, [r2, r3]
 8003b56:	23c0      	movs	r3, #192	@ 0xc0
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	23c0      	movs	r3, #192	@ 0xc0
 8003b62:	031b      	lsls	r3, r3, #12
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d03d      	beq.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	23c0      	movs	r3, #192	@ 0xc0
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d843      	bhi.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	031b      	lsls	r3, r3, #12
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d027      	beq.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	2380      	movs	r3, #128	@ 0x80
 8003b80:	031b      	lsls	r3, r3, #12
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d839      	bhi.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	02db      	lsls	r3, r3, #11
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 8003b96:	e030      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003b98:	f7ff fad0 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	61fb      	str	r3, [r7, #28]
            break;
 8003ba0:	e032      	b.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003ba2:	4a37      	ldr	r2, [pc, #220]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003ba4:	2394      	movs	r3, #148	@ 0x94
 8003ba6:	58d3      	ldr	r3, [r2, r3]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d126      	bne.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003bb0:	4a33      	ldr	r2, [pc, #204]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003bb2:	2394      	movs	r3, #148	@ 0x94
 8003bb4:	58d3      	ldr	r3, [r2, r3]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d102      	bne.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 8003bbe:	23fa      	movs	r3, #250	@ 0xfa
 8003bc0:	61fb      	str	r3, [r7, #28]
            break;
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 8003bc4:	23fa      	movs	r3, #250	@ 0xfa
 8003bc6:	01db      	lsls	r3, r3, #7
 8003bc8:	61fb      	str	r3, [r7, #28]
            break;
 8003bca:	e018      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	2380      	movs	r3, #128	@ 0x80
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d111      	bne.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 8003bde:	4b29      	ldr	r3, [pc, #164]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003be0:	61fb      	str	r3, [r7, #28]
            break;
 8003be2:	e00e      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003be4:	4a26      	ldr	r2, [pc, #152]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003be6:	2390      	movs	r3, #144	@ 0x90
 8003be8:	58d3      	ldr	r3, [r2, r3]
 8003bea:	2202      	movs	r2, #2
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	61fb      	str	r3, [r7, #28]
            break;
 8003bf8:	e005      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	e120      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	e11e      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	e11c      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003c06:	46c0      	nop			@ (mov r8, r8)
        break;
 8003c08:	e11a      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003c0c:	2388      	movs	r3, #136	@ 0x88
 8003c0e:	58d2      	ldr	r2, [r2, r3]
 8003c10:	23c0      	movs	r3, #192	@ 0xc0
 8003c12:	039b      	lsls	r3, r3, #14
 8003c14:	4013      	ands	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	23c0      	movs	r3, #192	@ 0xc0
 8003c1c:	039b      	lsls	r3, r3, #14
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d042      	beq.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	23c0      	movs	r3, #192	@ 0xc0
 8003c26:	039b      	lsls	r3, r3, #14
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d848      	bhi.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	039b      	lsls	r3, r3, #14
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d02c      	beq.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	039b      	lsls	r3, r3, #14
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d83e      	bhi.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	035b      	lsls	r3, r3, #13
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 8003c50:	e035      	b.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003c52:	f7ff fa73 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003c56:	0003      	movs	r3, r0
 8003c58:	61fb      	str	r3, [r7, #28]
            break;
 8003c5a:	e037      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c5c:	4a08      	ldr	r2, [pc, #32]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003c5e:	2394      	movs	r3, #148	@ 0x94
 8003c60:	58d3      	ldr	r3, [r2, r3]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d12b      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003c6a:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003c6c:	2394      	movs	r3, #148	@ 0x94
 8003c6e:	58d3      	ldr	r3, [r2, r3]
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d107      	bne.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8003c78:	23fa      	movs	r3, #250	@ 0xfa
 8003c7a:	61fb      	str	r3, [r7, #28]
            break;
 8003c7c:	e021      	b.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	40021000 	.word	0x40021000
 8003c84:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8003c88:	23fa      	movs	r3, #250	@ 0xfa
 8003c8a:	01db      	lsls	r3, r3, #7
 8003c8c:	61fb      	str	r3, [r7, #28]
            break;
 8003c8e:	e018      	b.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c90:	4b6e      	ldr	r3, [pc, #440]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	401a      	ands	r2, r3
 8003c9a:	2380      	movs	r3, #128	@ 0x80
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d111      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 8003ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003ca4:	61fb      	str	r3, [r7, #28]
            break;
 8003ca6:	e00e      	b.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ca8:	4a68      	ldr	r2, [pc, #416]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003caa:	2390      	movs	r3, #144	@ 0x90
 8003cac:	58d3      	ldr	r3, [r2, r3]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d109      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	61fb      	str	r3, [r7, #28]
            break;
 8003cbc:	e005      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	e0be      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	e0bc      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	e0ba      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003cca:	46c0      	nop			@ (mov r8, r8)
        break;
 8003ccc:	e0b8      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8003cce:	4a5f      	ldr	r2, [pc, #380]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003cd0:	2388      	movs	r3, #136	@ 0x88
 8003cd2:	58d2      	ldr	r2, [r2, r3]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	045b      	lsls	r3, r3, #17
 8003cd8:	4013      	ands	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	045b      	lsls	r3, r3, #17
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d011      	beq.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 8003cec:	e019      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8003cee:	4b57      	ldr	r3, [pc, #348]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	23e0      	movs	r3, #224	@ 0xe0
 8003cf4:	01db      	lsls	r3, r3, #7
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d104      	bne.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 8003cfa:	f7ff fa1f 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	61fb      	str	r3, [r7, #28]
            break;
 8003d02:	e00e      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8003d04:	f7ff fa1a 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
            break;
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003d10:	2408      	movs	r4, #8
 8003d12:	193b      	adds	r3, r7, r4
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 f8a1 	bl	8003e5c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003d1a:	193b      	adds	r3, r7, r4
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61fb      	str	r3, [r7, #28]
            break;
 8003d20:	46c0      	nop			@ (mov r8, r8)
        break;
 8003d22:	e08d      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8003d24:	4a49      	ldr	r2, [pc, #292]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d26:	2388      	movs	r3, #136	@ 0x88
 8003d28:	58d2      	ldr	r2, [r2, r3]
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	049b      	lsls	r3, r3, #18
 8003d2e:	4013      	ands	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	049b      	lsls	r3, r3, #18
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d011      	beq.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 8003d42:	e019      	b.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8003d44:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	23e0      	movs	r3, #224	@ 0xe0
 8003d4a:	01db      	lsls	r3, r3, #7
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d104      	bne.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7ff f9f4 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003d54:	0003      	movs	r3, r0
 8003d56:	61fb      	str	r3, [r7, #28]
            break;
 8003d58:	e00e      	b.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8003d5a:	f7ff f9ef 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
            break;
 8003d64:	e008      	b.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003d66:	2408      	movs	r4, #8
 8003d68:	193b      	adds	r3, r7, r4
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f000 f876 	bl	8003e5c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003d70:	193b      	adds	r3, r7, r4
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	61fb      	str	r3, [r7, #28]
            break;
 8003d76:	46c0      	nop			@ (mov r8, r8)
        break;
 8003d78:	e062      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003d7a:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d7c:	2388      	movs	r3, #136	@ 0x88
 8003d7e:	58d2      	ldr	r2, [r2, r3]
 8003d80:	23c0      	movs	r3, #192	@ 0xc0
 8003d82:	051b      	lsls	r3, r3, #20
 8003d84:	4013      	ands	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	23c0      	movs	r3, #192	@ 0xc0
 8003d8c:	051b      	lsls	r3, r3, #20
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d017      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	23c0      	movs	r3, #192	@ 0xc0
 8003d96:	051b      	lsls	r3, r3, #20
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d844      	bhi.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	2380      	movs	r3, #128	@ 0x80
 8003da0:	051b      	lsls	r3, r3, #20
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d033      	beq.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	2380      	movs	r3, #128	@ 0x80
 8003daa:	051b      	lsls	r3, r3, #20
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d83a      	bhi.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d034      	beq.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	04db      	lsls	r3, r3, #19
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 8003dc0:	e031      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 8003dc2:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8003dc4:	61fb      	str	r3, [r7, #28]
            break;
 8003dc6:	e031      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003dc8:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d12a      	bne.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d005      	beq.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8003dde:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	220f      	movs	r2, #15
 8003de6:	4013      	ands	r3, r2
 8003de8:	e005      	b.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8003dea:	4a18      	ldr	r2, [pc, #96]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003dec:	2394      	movs	r3, #148	@ 0x94
 8003dee:	58d3      	ldr	r3, [r2, r3]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	220f      	movs	r2, #15
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b0b      	cmp	r3, #11
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 8003dfe:	230b      	movs	r3, #11
 8003e00:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8003e02:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	0092      	lsls	r2, r2, #2
 8003e08:	58d3      	ldr	r3, [r2, r3]
 8003e0a:	61fb      	str	r3, [r7, #28]
            break;
 8003e0c:	e00d      	b.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003e0e:	2408      	movs	r4, #8
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f822 	bl	8003e5c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	61fb      	str	r3, [r7, #28]
            break;
 8003e1e:	e005      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
            break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003e2a:	46c0      	nop			@ (mov r8, r8)
        break;
 8003e2c:	e008      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003e2e:	46c0      	nop			@ (mov r8, r8)
 8003e30:	e006      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	e004      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003e3e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8003e40:	69fb      	ldr	r3, [r7, #28]
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b009      	add	sp, #36	@ 0x24
 8003e48:	bd90      	pop	{r4, r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	02dc6c00 	.word	0x02dc6c00
 8003e58:	08005df8 	.word	0x08005df8

08003e5c <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e64:	4b58      	ldr	r3, [pc, #352]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	227f      	movs	r2, #127	@ 0x7f
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e70:	4b55      	ldr	r3, [pc, #340]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003e7a:	4b53      	ldr	r3, [pc, #332]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	2207      	movs	r2, #7
 8003e82:	4013      	ands	r3, r2
 8003e84:	3301      	adds	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003e88:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d005      	beq.n	8003e9e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8003e92:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	220f      	movs	r2, #15
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003ea0:	2394      	movs	r3, #148	@ 0x94
 8003ea2:	58d3      	ldr	r3, [r2, r3]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b0b      	cmp	r3, #11
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8003eb2:	230b      	movs	r3, #11
 8003eb4:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d020      	beq.n	8003efe <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d827      	bhi.n	8003f12 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d00c      	beq.n	8003ee2 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	483e      	ldr	r0, [pc, #248]	@ (8003fcc <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8003ed2:	f7fc f92b 	bl	800012c <__udivsi3>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	001a      	movs	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4353      	muls	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]
      break;
 8003ee0:	e025      	b.n	8003f2e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	58d3      	ldr	r3, [r2, r3]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7fc f91d 	bl	800012c <__udivsi3>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4353      	muls	r3, r2
 8003efa:	61fb      	str	r3, [r7, #28]
      break;
 8003efc:	e017      	b.n	8003f2e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	4834      	ldr	r0, [pc, #208]	@ (8003fd4 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8003f02:	f7fc f913 	bl	800012c <__udivsi3>
 8003f06:	0003      	movs	r3, r0
 8003f08:	001a      	movs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4353      	muls	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]
      break;
 8003f10:	e00d      	b.n	8003f2e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003f12:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	0092      	lsls	r2, r2, #2
 8003f18:	58d3      	ldr	r3, [r2, r3]
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fc f905 	bl	800012c <__udivsi3>
 8003f22:	0003      	movs	r3, r0
 8003f24:	001a      	movs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4353      	muls	r3, r2
 8003f2a:	61fb      	str	r3, [r7, #28]
      break;
 8003f2c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8003f2e:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	025b      	lsls	r3, r3, #9
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003f3a:	4b23      	ldr	r3, [pc, #140]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8003f3e:	0c5b      	lsrs	r3, r3, #17
 8003f40:	221f      	movs	r2, #31
 8003f42:	4013      	ands	r3, r2
 8003f44:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003f46:	0019      	movs	r1, r3
 8003f48:	69f8      	ldr	r0, [r7, #28]
 8003f4a:	f7fc f8ef 	bl	800012c <__udivsi3>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	001a      	movs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	045b      	lsls	r3, r3, #17
 8003f66:	4013      	ands	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003f6a:	4b17      	ldr	r3, [pc, #92]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8003f6e:	0e5b      	lsrs	r3, r3, #25
 8003f70:	2207      	movs	r2, #7
 8003f72:	4013      	ands	r3, r2
 8003f74:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003f76:	0019      	movs	r1, r3
 8003f78:	69f8      	ldr	r0, [r7, #28]
 8003f7a:	f7fc f8d7 	bl	800012c <__udivsi3>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	001a      	movs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e002      	b.n	8003f8e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	2380      	movs	r3, #128	@ 0x80
 8003f94:	055b      	lsls	r3, r3, #21
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8003f9e:	0f5b      	lsrs	r3, r3, #29
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	69f8      	ldr	r0, [r7, #28]
 8003faa:	f7fc f8bf 	bl	800012c <__udivsi3>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8003fb6:	e002      	b.n	8003fbe <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b008      	add	sp, #32
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	08005df8 	.word	0x08005df8
 8003fd4:	003d0900 	.word	0x003d0900

08003fd8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d100      	bne.n	8003ff0 <HAL_RTC_Init+0x18>
 8003fee:	e08b      	b.n	8004108 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	222d      	movs	r2, #45	@ 0x2d
 8003ffa:	5c9b      	ldrb	r3, [r3, r2]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	222c      	movs	r2, #44	@ 0x2c
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f7fd f8ad 	bl	800116c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	222d      	movs	r2, #45	@ 0x2d
 8004016:	2102      	movs	r1, #2
 8004018:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800401a:	4b3f      	ldr	r3, [pc, #252]	@ (8004118 <HAL_RTC_Init+0x140>)
 800401c:	22ca      	movs	r2, #202	@ 0xca
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004020:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_RTC_Init+0x140>)
 8004022:	2253      	movs	r2, #83	@ 0x53
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 fb47 	bl	80046bc <RTC_EnterInitMode>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d00b      	beq.n	800404a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RTC_Init+0x140>)
 8004034:	22ff      	movs	r2, #255	@ 0xff
 8004036:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	222d      	movs	r2, #45	@ 0x2d
 800403c:	2104      	movs	r1, #4
 800403e:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8004040:	230f      	movs	r3, #15
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e05e      	b.n	8004108 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800404a:	4b33      	ldr	r3, [pc, #204]	@ (8004118 <HAL_RTC_Init+0x140>)
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	4b32      	ldr	r3, [pc, #200]	@ (8004118 <HAL_RTC_Init+0x140>)
 8004050:	4932      	ldr	r1, [pc, #200]	@ (800411c <HAL_RTC_Init+0x144>)
 8004052:	400a      	ands	r2, r1
 8004054:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004056:	4b30      	ldr	r3, [pc, #192]	@ (8004118 <HAL_RTC_Init+0x140>)
 8004058:	6999      	ldr	r1, [r3, #24]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	431a      	orrs	r2, r3
 800406a:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RTC_Init+0x140>)
 800406c:	430a      	orrs	r2, r1
 800406e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68d9      	ldr	r1, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	041a      	lsls	r2, r3, #16
 800407a:	4b27      	ldr	r3, [pc, #156]	@ (8004118 <HAL_RTC_Init+0x140>)
 800407c:	430a      	orrs	r2, r1
 800407e:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004080:	4b25      	ldr	r3, [pc, #148]	@ (8004118 <HAL_RTC_Init+0x140>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a26      	ldr	r2, [pc, #152]	@ (8004120 <HAL_RTC_Init+0x148>)
 8004086:	4013      	ands	r3, r2
 8004088:	0019      	movs	r1, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	431a      	orrs	r2, r3
 8004094:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <HAL_RTC_Init+0x140>)
 8004096:	430a      	orrs	r2, r1
 8004098:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800409a:	4b1f      	ldr	r3, [pc, #124]	@ (8004118 <HAL_RTC_Init+0x140>)
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <HAL_RTC_Init+0x140>)
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	438a      	bics	r2, r1
 80040a4:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80040a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004118 <HAL_RTC_Init+0x140>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2220      	movs	r2, #32
 80040ac:	4013      	ands	r3, r2
 80040ae:	d110      	bne.n	80040d2 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fadc 	bl	8004670 <HAL_RTC_WaitForSynchro>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040bc:	4b16      	ldr	r3, [pc, #88]	@ (8004118 <HAL_RTC_Init+0x140>)
 80040be:	22ff      	movs	r2, #255	@ 0xff
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	222d      	movs	r2, #45	@ 0x2d
 80040c6:	2104      	movs	r1, #4
 80040c8:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 80040ca:	230f      	movs	r3, #15
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80040d2:	230f      	movs	r3, #15
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d115      	bne.n	8004108 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 80040dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_RTC_Init+0x140>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	08d9      	lsrs	r1, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <HAL_RTC_Init+0x140>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <HAL_RTC_Init+0x140>)
 80040fc:	22ff      	movs	r2, #255	@ 0xff
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	222d      	movs	r2, #45	@ 0x2d
 8004104:	2101      	movs	r1, #1
 8004106:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8004108:	230f      	movs	r3, #15
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	781b      	ldrb	r3, [r3, #0]
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b004      	add	sp, #16
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	40002800 	.word	0x40002800
 800411c:	fb8fffbf 	.word	0xfb8fffbf
 8004120:	ffffe0ff 	.word	0xffffe0ff

08004124 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	222c      	movs	r2, #44	@ 0x2c
 8004134:	5c9b      	ldrb	r3, [r3, r2]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_RTC_SetTime+0x1a>
 800413a:	2302      	movs	r3, #2
 800413c:	e0a7      	b.n	800428e <HAL_RTC_SetTime+0x16a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	222c      	movs	r2, #44	@ 0x2c
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	222d      	movs	r2, #45	@ 0x2d
 800414a:	2102      	movs	r1, #2
 800414c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800414e:	4b52      	ldr	r3, [pc, #328]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004150:	22ca      	movs	r2, #202	@ 0xca
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24
 8004154:	4b50      	ldr	r3, [pc, #320]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004156:	2253      	movs	r2, #83	@ 0x53
 8004158:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 faad 	bl	80046bc <RTC_EnterInitMode>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d00c      	beq.n	8004180 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004166:	4b4c      	ldr	r3, [pc, #304]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004168:	22ff      	movs	r2, #255	@ 0xff
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	222d      	movs	r2, #45	@ 0x2d
 8004170:	2104      	movs	r1, #4
 8004172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	222c      	movs	r2, #44	@ 0x2c
 8004178:	2100      	movs	r1, #0
 800417a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e086      	b.n	800428e <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004180:	4b45      	ldr	r3, [pc, #276]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	23c0      	movs	r3, #192	@ 0xc0
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	401a      	ands	r2, r3
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	429a      	cmp	r2, r3
 8004190:	d053      	beq.n	800423a <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d124      	bne.n	80041e2 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004198:	4b3f      	ldr	r3, [pc, #252]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2240      	movs	r2, #64	@ 0x40
 800419e:	4013      	ands	r3, r2
 80041a0:	d102      	bne.n	80041a8 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 fab1 	bl	8004714 <RTC_ByteToBcd2>
 80041b2:	0003      	movs	r3, r0
 80041b4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 faaa 	bl	8004714 <RTC_ByteToBcd2>
 80041c0:	0003      	movs	r3, r0
 80041c2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041c4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	789b      	ldrb	r3, [r3, #2]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 faa2 	bl	8004714 <RTC_ByteToBcd2>
 80041d0:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041d2:	0022      	movs	r2, r4
 80041d4:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	78db      	ldrb	r3, [r3, #3]
 80041da:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e016      	b.n	8004210 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80041e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2240      	movs	r2, #64	@ 0x40
 80041e8:	4013      	ands	r3, r2
 80041ea:	d102      	bne.n	80041f2 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2200      	movs	r2, #0
 80041f0:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041fe:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004204:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004210:	4b21      	ldr	r3, [pc, #132]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4921      	ldr	r1, [pc, #132]	@ (800429c <HAL_RTC_SetTime+0x178>)
 8004216:	400a      	ands	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800421a:	4b1f      	ldr	r3, [pc, #124]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004220:	491f      	ldr	r1, [pc, #124]	@ (80042a0 <HAL_RTC_SetTime+0x17c>)
 8004222:	400a      	ands	r2, r1
 8004224:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004226:	4b1c      	ldr	r3, [pc, #112]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	431a      	orrs	r2, r3
 8004234:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800423a:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004240:	2180      	movs	r1, #128	@ 0x80
 8004242:	438a      	bics	r2, r1
 8004244:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004246:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2220      	movs	r2, #32
 800424c:	4013      	ands	r3, r2
 800424e:	d112      	bne.n	8004276 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	0018      	movs	r0, r3
 8004254:	f000 fa0c 	bl	8004670 <HAL_RTC_WaitForSynchro>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d00c      	beq.n	8004276 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800425c:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 800425e:	22ff      	movs	r2, #255	@ 0xff
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	222d      	movs	r2, #45	@ 0x2d
 8004266:	2104      	movs	r1, #4
 8004268:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	222c      	movs	r2, #44	@ 0x2c
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00b      	b.n	800428e <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004276:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <HAL_RTC_SetTime+0x174>)
 8004278:	22ff      	movs	r2, #255	@ 0xff
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	222d      	movs	r2, #45	@ 0x2d
 8004280:	2101      	movs	r1, #1
 8004282:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	222c      	movs	r2, #44	@ 0x2c
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
  }
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b007      	add	sp, #28
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	40002800 	.word	0x40002800
 800429c:	007f7f7f 	.word	0x007f7f7f
 80042a0:	fffbffff 	.word	0xfffbffff

080042a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	222c      	movs	r2, #44	@ 0x2c
 80042b4:	5c9b      	ldrb	r3, [r3, r2]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_RTC_SetDate+0x1a>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e090      	b.n	80043e0 <HAL_RTC_SetDate+0x13c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	222c      	movs	r2, #44	@ 0x2c
 80042c2:	2101      	movs	r1, #1
 80042c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	222d      	movs	r2, #45	@ 0x2d
 80042ca:	2102      	movs	r1, #2
 80042cc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10e      	bne.n	80042f2 <HAL_RTC_SetDate+0x4e>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	001a      	movs	r2, r3
 80042da:	2310      	movs	r3, #16
 80042dc:	4013      	ands	r3, r2
 80042de:	d008      	beq.n	80042f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2210      	movs	r2, #16
 80042e6:	4393      	bics	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	330a      	adds	r3, #10
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11c      	bne.n	8004332 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	78db      	ldrb	r3, [r3, #3]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 fa09 	bl	8004714 <RTC_ByteToBcd2>
 8004302:	0003      	movs	r3, r0
 8004304:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	0018      	movs	r0, r3
 800430c:	f000 fa02 	bl	8004714 <RTC_ByteToBcd2>
 8004310:	0003      	movs	r3, r0
 8004312:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004314:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	789b      	ldrb	r3, [r3, #2]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f9fa 	bl	8004714 <RTC_ByteToBcd2>
 8004320:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004322:	0022      	movs	r2, r4
 8004324:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00e      	b.n	8004350 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	78db      	ldrb	r3, [r3, #3]
 8004336:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800433e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004344:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004350:	4b25      	ldr	r3, [pc, #148]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 8004352:	22ca      	movs	r2, #202	@ 0xca
 8004354:	625a      	str	r2, [r3, #36]	@ 0x24
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 8004358:	2253      	movs	r2, #83	@ 0x53
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	0018      	movs	r0, r3
 8004360:	f000 f9ac 	bl	80046bc <RTC_EnterInitMode>
 8004364:	1e03      	subs	r3, r0, #0
 8004366:	d00c      	beq.n	8004382 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004368:	4b1f      	ldr	r3, [pc, #124]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 800436a:	22ff      	movs	r2, #255	@ 0xff
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	222d      	movs	r2, #45	@ 0x2d
 8004372:	2104      	movs	r1, #4
 8004374:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	222c      	movs	r2, #44	@ 0x2c
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e02e      	b.n	80043e0 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004382:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4919      	ldr	r1, [pc, #100]	@ (80043ec <HAL_RTC_SetDate+0x148>)
 8004388:	400a      	ands	r2, r1
 800438a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800438c:	4b16      	ldr	r3, [pc, #88]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	438a      	bics	r2, r1
 8004396:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004398:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2220      	movs	r2, #32
 800439e:	4013      	ands	r3, r2
 80043a0:	d112      	bne.n	80043c8 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f000 f963 	bl	8004670 <HAL_RTC_WaitForSynchro>
 80043aa:	1e03      	subs	r3, r0, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ae:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 80043b0:	22ff      	movs	r2, #255	@ 0xff
 80043b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	222d      	movs	r2, #45	@ 0x2d
 80043b8:	2104      	movs	r1, #4
 80043ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	222c      	movs	r2, #44	@ 0x2c
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e00b      	b.n	80043e0 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c8:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <HAL_RTC_SetDate+0x144>)
 80043ca:	22ff      	movs	r2, #255	@ 0xff
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	222d      	movs	r2, #45	@ 0x2d
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	222c      	movs	r2, #44	@ 0x2c
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
  }
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b007      	add	sp, #28
 80043e6:	bd90      	pop	{r4, r7, pc}
 80043e8:	40002800 	.word	0x40002800
 80043ec:	00ffff3f 	.word	0x00ffff3f

080043f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	222c      	movs	r2, #44	@ 0x2c
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_RTC_SetAlarm_IT+0x1e>
 800440a:	2302      	movs	r3, #2
 800440c:	e0f1      	b.n	80045f2 <HAL_RTC_SetAlarm_IT+0x202>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	222c      	movs	r2, #44	@ 0x2c
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	222d      	movs	r2, #45	@ 0x2d
 800441a:	2102      	movs	r1, #2
 800441c:	5499      	strb	r1, [r3, r2]
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800441e:	4b77      	ldr	r3, [pc, #476]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	23c0      	movs	r3, #192	@ 0xc0
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	429a      	cmp	r2, r3
 8004432:	d05a      	beq.n	80044ea <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d135      	bne.n	80044a6 <HAL_RTC_SetAlarm_IT+0xb6>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800443a:	4b70      	ldr	r3, [pc, #448]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2240      	movs	r2, #64	@ 0x40
 8004440:	4013      	ands	r3, r2
 8004442:	d102      	bne.n	800444a <HAL_RTC_SetAlarm_IT+0x5a>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f960 	bl	8004714 <RTC_ByteToBcd2>
 8004454:	0003      	movs	r3, r0
 8004456:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f959 	bl	8004714 <RTC_ByteToBcd2>
 8004462:	0003      	movs	r3, r0
 8004464:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004466:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	789b      	ldrb	r3, [r3, #2]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f951 	bl	8004714 <RTC_ByteToBcd2>
 8004472:	0003      	movs	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004474:	0022      	movs	r2, r4
 8004476:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	78db      	ldrb	r3, [r3, #3]
 800447c:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800447e:	431a      	orrs	r2, r3
 8004480:	0014      	movs	r4, r2
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2224      	movs	r2, #36	@ 0x24
 8004486:	5c9b      	ldrb	r3, [r3, r2]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f943 	bl	8004714 <RTC_ByteToBcd2>
 800448e:	0003      	movs	r3, r0
 8004490:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004492:	0022      	movs	r2, r4
 8004494:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800449a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e021      	b.n	80044ea <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044a6:	4b55      	ldr	r3, [pc, #340]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2240      	movs	r2, #64	@ 0x40
 80044ac:	4013      	ands	r3, r2
 80044ae:	d102      	bne.n	80044b6 <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	785b      	ldrb	r3, [r3, #1]
 80044c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044c2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	78db      	ldrb	r3, [r3, #3]
 80044ce:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044d0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2124      	movs	r1, #36	@ 0x24
 80044d6:	5c5b      	ldrb	r3, [r3, r1]
 80044d8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044da:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d13a      	bne.n	800456c <HAL_RTC_SetAlarm_IT+0x17c>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80044f6:	4b41      	ldr	r3, [pc, #260]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	4b40      	ldr	r3, [pc, #256]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80044fc:	4940      	ldr	r1, [pc, #256]	@ (8004600 <HAL_RTC_SetAlarm_IT+0x210>)
 80044fe:	400a      	ands	r2, r1
 8004500:	619a      	str	r2, [r3, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004502:	4b3e      	ldr	r3, [pc, #248]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004504:	2201      	movs	r2, #1
 8004506:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	2380      	movs	r3, #128	@ 0x80
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	429a      	cmp	r2, r3
 8004510:	d107      	bne.n	8004522 <HAL_RTC_SetAlarm_IT+0x132>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	4b38      	ldr	r3, [pc, #224]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800451c:	430a      	orrs	r2, r1
 800451e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004520:	e006      	b.n	8004530 <HAL_RTC_SetAlarm_IT+0x140>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004522:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	641a      	str	r2, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004528:	4a34      	ldr	r2, [pc, #208]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004530:	4a32      	ldr	r2, [pc, #200]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	2b01      	cmp	r3, #1
 800453e:	d107      	bne.n	8004550 <HAL_RTC_SetAlarm_IT+0x160>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8004540:	4b2e      	ldr	r3, [pc, #184]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004546:	2180      	movs	r1, #128	@ 0x80
 8004548:	0509      	lsls	r1, r1, #20
 800454a:	430a      	orrs	r2, r1
 800454c:	619a      	str	r2, [r3, #24]
 800454e:	e005      	b.n	800455c <HAL_RTC_SetAlarm_IT+0x16c>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8004550:	4b2a      	ldr	r3, [pc, #168]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	4b29      	ldr	r3, [pc, #164]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004556:	492b      	ldr	r1, [pc, #172]	@ (8004604 <HAL_RTC_SetAlarm_IT+0x214>)
 8004558:	400a      	ands	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800455c:	4b27      	ldr	r3, [pc, #156]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004562:	2188      	movs	r1, #136	@ 0x88
 8004564:	0149      	lsls	r1, r1, #5
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
 800456a:	e039      	b.n	80045e0 <HAL_RTC_SetAlarm_IT+0x1f0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800456c:	4b23      	ldr	r3, [pc, #140]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	4b22      	ldr	r3, [pc, #136]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004572:	4925      	ldr	r1, [pc, #148]	@ (8004608 <HAL_RTC_SetAlarm_IT+0x218>)
 8004574:	400a      	ands	r2, r1
 8004576:	619a      	str	r2, [r3, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004578:	4b20      	ldr	r3, [pc, #128]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800457a:	2202      	movs	r2, #2
 800457c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	2380      	movs	r3, #128	@ 0x80
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	429a      	cmp	r2, r3
 8004586:	d107      	bne.n	8004598 <HAL_RTC_SetAlarm_IT+0x1a8>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6999      	ldr	r1, [r3, #24]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	4b1a      	ldr	r3, [pc, #104]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 8004592:	430a      	orrs	r2, r1
 8004594:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004596:	e006      	b.n	80045a6 <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004598:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	649a      	str	r2, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800459e:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80045a6:	4a15      	ldr	r2, [pc, #84]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d107      	bne.n	80045c6 <HAL_RTC_SetAlarm_IT+0x1d6>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80045b6:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045bc:	2180      	movs	r1, #128	@ 0x80
 80045be:	0549      	lsls	r1, r1, #21
 80045c0:	430a      	orrs	r2, r1
 80045c2:	619a      	str	r2, [r3, #24]
 80045c4:	e005      	b.n	80045d2 <HAL_RTC_SetAlarm_IT+0x1e2>

    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80045c6:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045cc:	490f      	ldr	r1, [pc, #60]	@ (800460c <HAL_RTC_SetAlarm_IT+0x21c>)
 80045ce:	400a      	ands	r2, r1
 80045d0:	619a      	str	r2, [r3, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80045d2:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <HAL_RTC_SetAlarm_IT+0x20c>)
 80045d8:	2188      	movs	r1, #136	@ 0x88
 80045da:	0189      	lsls	r1, r1, #6
 80045dc:	430a      	orrs	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
  }

  hrtc->State = HAL_RTC_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	222d      	movs	r2, #45	@ 0x2d
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	222c      	movs	r2, #44	@ 0x2c
 80045ec:	2100      	movs	r1, #0
 80045ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b007      	add	sp, #28
 80045f8:	bd90      	pop	{r4, r7, pc}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	40002800 	.word	0x40002800
 8004600:	ffffeeff 	.word	0xffffeeff
 8004604:	f7ffffff 	.word	0xf7ffffff
 8004608:	ffffddff 	.word	0xffffddff
 800460c:	efffffff 	.word	0xefffffff

08004610 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 8004618:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_RTC_AlarmIRQHandler+0x4c>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d006      	beq.n	8004634 <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004626:	4b0d      	ldr	r3, [pc, #52]	@ (800465c <HAL_RTC_AlarmIRQHandler+0x4c>)
 8004628:	2201      	movs	r2, #1
 800462a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	0018      	movs	r0, r3
 8004630:	f000 f816 	bl	8004660 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2202      	movs	r2, #2
 8004638:	4013      	ands	r3, r2
 800463a:	d006      	beq.n	800464a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800463c:	4b07      	ldr	r3, [pc, #28]	@ (800465c <HAL_RTC_AlarmIRQHandler+0x4c>)
 800463e:	2202      	movs	r2, #2
 8004640:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f88d 	bl	8004764 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	222d      	movs	r2, #45	@ 0x2d
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]
}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b004      	add	sp, #16
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	40002800 	.word	0x40002800

08004660 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004678:	4b0f      	ldr	r3, [pc, #60]	@ (80046b8 <HAL_RTC_WaitForSynchro+0x48>)
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4b0e      	ldr	r3, [pc, #56]	@ (80046b8 <HAL_RTC_WaitForSynchro+0x48>)
 800467e:	2120      	movs	r1, #32
 8004680:	438a      	bics	r2, r1
 8004682:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004684:	f7fc ff4a 	bl	800151c <HAL_GetTick>
 8004688:	0003      	movs	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800468c:	e00a      	b.n	80046a4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800468e:	f7fc ff45 	bl	800151c <HAL_GetTick>
 8004692:	0002      	movs	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	23fa      	movs	r3, #250	@ 0xfa
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d901      	bls.n	80046a4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e005      	b.n	80046b0 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80046a4:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <HAL_RTC_WaitForSynchro+0x48>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	4013      	ands	r3, r2
 80046ac:	d0ef      	beq.n	800468e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b004      	add	sp, #16
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40002800 	.word	0x40002800

080046bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80046c4:	4b12      	ldr	r3, [pc, #72]	@ (8004710 <RTC_EnterInitMode+0x54>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2240      	movs	r2, #64	@ 0x40
 80046ca:	4013      	ands	r3, r2
 80046cc:	d11a      	bne.n	8004704 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80046ce:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <RTC_EnterInitMode+0x54>)
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <RTC_EnterInitMode+0x54>)
 80046d4:	2180      	movs	r1, #128	@ 0x80
 80046d6:	430a      	orrs	r2, r1
 80046d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046da:	f7fc ff1f 	bl	800151c <HAL_GetTick>
 80046de:	0003      	movs	r3, r0
 80046e0:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80046e2:	e00a      	b.n	80046fa <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80046e4:	f7fc ff1a 	bl	800151c <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	23fa      	movs	r3, #250	@ 0xfa
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d901      	bls.n	80046fa <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e005      	b.n	8004706 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80046fa:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <RTC_EnterInitMode+0x54>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	4013      	ands	r3, r2
 8004702:	d0ef      	beq.n	80046e4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b004      	add	sp, #16
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	40002800 	.word	0x40002800

08004714 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	0002      	movs	r2, r0
 800471c:	1dfb      	adds	r3, r7, #7
 800471e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004724:	230b      	movs	r3, #11
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	1dfa      	adds	r2, r7, #7
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 800472e:	e008      	b.n	8004742 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004736:	220b      	movs	r2, #11
 8004738:	18bb      	adds	r3, r7, r2
 800473a:	18ba      	adds	r2, r7, r2
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	3a0a      	subs	r2, #10
 8004740:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8004742:	210b      	movs	r1, #11
 8004744:	187b      	adds	r3, r7, r1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b09      	cmp	r3, #9
 800474a:	d8f1      	bhi.n	8004730 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	b2da      	uxtb	r2, r3
 8004754:	187b      	adds	r3, r7, r1
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4313      	orrs	r3, r2
 800475a:	b2db      	uxtb	r3, r3
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b004      	add	sp, #16
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800476c:	46c0      	nop			@ (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	b002      	add	sp, #8
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e046      	b.n	8004814 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2288      	movs	r2, #136	@ 0x88
 800478a:	589b      	ldr	r3, [r3, r2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2284      	movs	r2, #132	@ 0x84
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	0018      	movs	r0, r3
 800479c:	f7fc fd2e 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2288      	movs	r2, #136	@ 0x88
 80047a4:	2124      	movs	r1, #36	@ 0x24
 80047a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2101      	movs	r1, #1
 80047b4:	438a      	bics	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 fa8a 	bl	8004cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 f8cc 	bl	8004968 <UART_SetConfig>
 80047d0:	0003      	movs	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e01c      	b.n	8004814 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	490d      	ldr	r1, [pc, #52]	@ (800481c <HAL_UART_Init+0xa8>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	212a      	movs	r1, #42	@ 0x2a
 80047f6:	438a      	bics	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 fb19 	bl	8004e44 <UART_CheckIdleState>
 8004812:	0003      	movs	r3, r0
}
 8004814:	0018      	movs	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}
 800481c:	ffffb7ff 	.word	0xffffb7ff

08004820 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	1dbb      	adds	r3, r7, #6
 800482e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2288      	movs	r2, #136	@ 0x88
 8004834:	589b      	ldr	r3, [r3, r2]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d000      	beq.n	800483c <HAL_UART_Transmit+0x1c>
 800483a:	e090      	b.n	800495e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_UART_Transmit+0x2a>
 8004842:	1dbb      	adds	r3, r7, #6
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e088      	b.n	8004960 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	2380      	movs	r3, #128	@ 0x80
 8004854:	015b      	lsls	r3, r3, #5
 8004856:	429a      	cmp	r2, r3
 8004858:	d109      	bne.n	800486e <HAL_UART_Transmit+0x4e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d105      	bne.n	800486e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2201      	movs	r2, #1
 8004866:	4013      	ands	r3, r2
 8004868:	d001      	beq.n	800486e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e078      	b.n	8004960 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2290      	movs	r2, #144	@ 0x90
 8004872:	2100      	movs	r1, #0
 8004874:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2288      	movs	r2, #136	@ 0x88
 800487a:	2121      	movs	r1, #33	@ 0x21
 800487c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487e:	f7fc fe4d 	bl	800151c <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1dba      	adds	r2, r7, #6
 800488a:	2154      	movs	r1, #84	@ 0x54
 800488c:	8812      	ldrh	r2, [r2, #0]
 800488e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1dba      	adds	r2, r7, #6
 8004894:	2156      	movs	r1, #86	@ 0x56
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	015b      	lsls	r3, r3, #5
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d108      	bne.n	80048b8 <HAL_UART_Transmit+0x98>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	e003      	b.n	80048c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048c0:	e030      	b.n	8004924 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	0013      	movs	r3, r2
 80048cc:	2200      	movs	r2, #0
 80048ce:	2180      	movs	r1, #128	@ 0x80
 80048d0:	f000 fb62 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2288      	movs	r2, #136	@ 0x88
 80048dc:	2120      	movs	r1, #32
 80048de:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e03d      	b.n	8004960 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	001a      	movs	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	05d2      	lsls	r2, r2, #23
 80048f6:	0dd2      	lsrs	r2, r2, #23
 80048f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	3302      	adds	r3, #2
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e007      	b.n	8004912 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2256      	movs	r2, #86	@ 0x56
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b299      	uxth	r1, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2256      	movs	r2, #86	@ 0x56
 8004922:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2256      	movs	r2, #86	@ 0x56
 8004928:	5a9b      	ldrh	r3, [r3, r2]
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1c8      	bne.n	80048c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	0013      	movs	r3, r2
 800493a:	2200      	movs	r2, #0
 800493c:	2140      	movs	r1, #64	@ 0x40
 800493e:	f000 fb2b 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004942:	1e03      	subs	r3, r0, #0
 8004944:	d005      	beq.n	8004952 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2288      	movs	r2, #136	@ 0x88
 800494a:	2120      	movs	r1, #32
 800494c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e006      	b.n	8004960 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2288      	movs	r2, #136	@ 0x88
 8004956:	2120      	movs	r1, #32
 8004958:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e000      	b.n	8004960 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b008      	add	sp, #32
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004968:	b5b0      	push	{r4, r5, r7, lr}
 800496a:	b092      	sub	sp, #72	@ 0x48
 800496c:	af00      	add	r7, sp, #0
 800496e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004970:	231f      	movs	r3, #31
 8004972:	2220      	movs	r2, #32
 8004974:	189b      	adds	r3, r3, r2
 8004976:	19db      	adds	r3, r3, r7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	431a      	orrs	r2, r3
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	431a      	orrs	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	4313      	orrs	r3, r2
 8004992:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4ac6      	ldr	r2, [pc, #792]	@ (8004cb4 <UART_SetConfig+0x34c>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4ac1      	ldr	r2, [pc, #772]	@ (8004cb8 <UART_SetConfig+0x350>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0018      	movs	r0, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	68d9      	ldr	r1, [r3, #12]
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	0003      	movs	r3, r0
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4abb      	ldr	r2, [pc, #748]	@ (8004cbc <UART_SetConfig+0x354>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <UART_SetConfig+0x80>
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4ab9      	ldr	r2, [pc, #740]	@ (8004cc0 <UART_SetConfig+0x358>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049e4:	4313      	orrs	r3, r2
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4ab5      	ldr	r2, [pc, #724]	@ (8004cc4 <UART_SetConfig+0x35c>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	220f      	movs	r2, #15
 8004a06:	4393      	bics	r3, r2
 8004a08:	0018      	movs	r0, r3
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	0003      	movs	r3, r0
 8004a14:	430b      	orrs	r3, r1
 8004a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4aaa      	ldr	r2, [pc, #680]	@ (8004cc8 <UART_SetConfig+0x360>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d102      	bne.n	8004a28 <UART_SetConfig+0xc0>
 8004a22:	2301      	movs	r3, #1
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a26:	e02b      	b.n	8004a80 <UART_SetConfig+0x118>
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4aa7      	ldr	r2, [pc, #668]	@ (8004ccc <UART_SetConfig+0x364>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d102      	bne.n	8004a38 <UART_SetConfig+0xd0>
 8004a32:	2302      	movs	r3, #2
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a36:	e023      	b.n	8004a80 <UART_SetConfig+0x118>
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4aa4      	ldr	r2, [pc, #656]	@ (8004cd0 <UART_SetConfig+0x368>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d103      	bne.n	8004a4a <UART_SetConfig+0xe2>
 8004a42:	2380      	movs	r3, #128	@ 0x80
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a48:	e01a      	b.n	8004a80 <UART_SetConfig+0x118>
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4aa1      	ldr	r2, [pc, #644]	@ (8004cd4 <UART_SetConfig+0x36c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <UART_SetConfig+0xf4>
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	029b      	lsls	r3, r3, #10
 8004a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5a:	e011      	b.n	8004a80 <UART_SetConfig+0x118>
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a96      	ldr	r2, [pc, #600]	@ (8004cbc <UART_SetConfig+0x354>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d102      	bne.n	8004a6c <UART_SetConfig+0x104>
 8004a66:	2310      	movs	r3, #16
 8004a68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a6a:	e009      	b.n	8004a80 <UART_SetConfig+0x118>
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a93      	ldr	r2, [pc, #588]	@ (8004cc0 <UART_SetConfig+0x358>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d102      	bne.n	8004a7c <UART_SetConfig+0x114>
 8004a76:	2308      	movs	r3, #8
 8004a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a7a:	e001      	b.n	8004a80 <UART_SetConfig+0x118>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a8d      	ldr	r2, [pc, #564]	@ (8004cbc <UART_SetConfig+0x354>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d005      	beq.n	8004a96 <UART_SetConfig+0x12e>
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a8c      	ldr	r2, [pc, #560]	@ (8004cc0 <UART_SetConfig+0x358>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d000      	beq.n	8004a96 <UART_SetConfig+0x12e>
 8004a94:	e06f      	b.n	8004b76 <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fe fdb7 	bl	800360c <HAL_RCCEx_GetPeriphCLKFreq>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d100      	bne.n	8004aaa <UART_SetConfig+0x142>
 8004aa8:	e0ec      	b.n	8004c84 <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aae:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd8 <UART_SetConfig+0x370>)
 8004ab0:	0052      	lsls	r2, r2, #1
 8004ab2:	5ad3      	ldrh	r3, [r2, r3]
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ab8:	f7fb fb38 	bl	800012c <__udivsi3>
 8004abc:	0003      	movs	r3, r0
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	0013      	movs	r3, r2
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	189b      	adds	r3, r3, r2
 8004aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d305      	bcc.n	8004adc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d906      	bls.n	8004aea <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8004adc:	231f      	movs	r3, #31
 8004ade:	2220      	movs	r2, #32
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e044      	b.n	8004b74 <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af6:	4b78      	ldr	r3, [pc, #480]	@ (8004cd8 <UART_SetConfig+0x370>)
 8004af8:	0052      	lsls	r2, r2, #1
 8004afa:	5ad3      	ldrh	r3, [r2, r3]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	69b8      	ldr	r0, [r7, #24]
 8004b08:	69f9      	ldr	r1, [r7, #28]
 8004b0a:	f7fb fc85 	bl	8000418 <__aeabi_uldivmod>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	000b      	movs	r3, r1
 8004b12:	0e11      	lsrs	r1, r2, #24
 8004b14:	021d      	lsls	r5, r3, #8
 8004b16:	430d      	orrs	r5, r1
 8004b18:	0214      	lsls	r4, r2, #8
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	1900      	adds	r0, r0, r4
 8004b2c:	4169      	adcs	r1, r5
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f7fb fc6c 	bl	8000418 <__aeabi_uldivmod>
 8004b40:	0002      	movs	r2, r0
 8004b42:	000b      	movs	r3, r1
 8004b44:	0013      	movs	r3, r2
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b4a:	23c0      	movs	r3, #192	@ 0xc0
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d309      	bcc.n	8004b66 <UART_SetConfig+0x1fe>
 8004b52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	035b      	lsls	r3, r3, #13
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d204      	bcs.n	8004b66 <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e006      	b.n	8004b74 <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b66:	231f      	movs	r3, #31
 8004b68:	2220      	movs	r2, #32
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	19db      	adds	r3, r3, r7
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004b72:	e087      	b.n	8004c84 <UART_SetConfig+0x31c>
 8004b74:	e086      	b.n	8004c84 <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d14c      	bne.n	8004c1c <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fe fd41 	bl	800360c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d100      	bne.n	8004b96 <UART_SetConfig+0x22e>
 8004b94:	e076      	b.n	8004c84 <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd8 <UART_SetConfig+0x370>)
 8004b9c:	0052      	lsls	r2, r2, #1
 8004b9e:	5ad3      	ldrh	r3, [r2, r3]
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ba4:	f7fb fac2 	bl	800012c <__udivsi3>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	005a      	lsls	r2, r3, #1
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	18d2      	adds	r2, r2, r3
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0019      	movs	r1, r3
 8004bba:	0010      	movs	r0, r2
 8004bbc:	f7fb fab6 	bl	800012c <__udivsi3>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d921      	bls.n	8004c0e <UART_SetConfig+0x2a6>
 8004bca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	025b      	lsls	r3, r3, #9
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d21c      	bcs.n	8004c0e <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	2012      	movs	r0, #18
 8004bda:	2420      	movs	r4, #32
 8004bdc:	1903      	adds	r3, r0, r4
 8004bde:	19db      	adds	r3, r3, r7
 8004be0:	210f      	movs	r1, #15
 8004be2:	438a      	bics	r2, r1
 8004be4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2207      	movs	r2, #7
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b299      	uxth	r1, r3
 8004bf2:	1903      	adds	r3, r0, r4
 8004bf4:	19db      	adds	r3, r3, r7
 8004bf6:	1902      	adds	r2, r0, r4
 8004bf8:	19d2      	adds	r2, r2, r7
 8004bfa:	8812      	ldrh	r2, [r2, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	1902      	adds	r2, r0, r4
 8004c06:	19d2      	adds	r2, r2, r7
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e03a      	b.n	8004c84 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0e:	231f      	movs	r3, #31
 8004c10:	2220      	movs	r2, #32
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	19db      	adds	r3, r3, r7
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e033      	b.n	8004c84 <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7fe fcf4 	bl	800360c <HAL_RCCEx_GetPeriphCLKFreq>
 8004c24:	0003      	movs	r3, r0
 8004c26:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8004c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02a      	beq.n	8004c84 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c32:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <UART_SetConfig+0x370>)
 8004c34:	0052      	lsls	r2, r2, #1
 8004c36:	5ad3      	ldrh	r3, [r2, r3]
 8004c38:	0019      	movs	r1, r3
 8004c3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c3c:	f7fb fa76 	bl	800012c <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	001a      	movs	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	18d2      	adds	r2, r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	0019      	movs	r1, r3
 8004c52:	0010      	movs	r0, r2
 8004c54:	f7fb fa6a 	bl	800012c <__udivsi3>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d90a      	bls.n	8004c78 <UART_SetConfig+0x310>
 8004c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	025b      	lsls	r3, r3, #9
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d205      	bcs.n	8004c78 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	e005      	b.n	8004c84 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c78:	231f      	movs	r3, #31
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	19db      	adds	r3, r3, r7
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	226a      	movs	r2, #106	@ 0x6a
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	2268      	movs	r2, #104	@ 0x68
 8004c90:	2101      	movs	r1, #1
 8004c92:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	2200      	movs	r2, #0
 8004c98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	19db      	adds	r3, r3, r7
 8004ca8:	781b      	ldrb	r3, [r3, #0]
}
 8004caa:	0018      	movs	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b012      	add	sp, #72	@ 0x48
 8004cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	cfff69f3 	.word	0xcfff69f3
 8004cb8:	ffffcfff 	.word	0xffffcfff
 8004cbc:	40008000 	.word	0x40008000
 8004cc0:	40008400 	.word	0x40008400
 8004cc4:	11fff4ff 	.word	0x11fff4ff
 8004cc8:	40013800 	.word	0x40013800
 8004ccc:	40004400 	.word	0x40004400
 8004cd0:	40004800 	.word	0x40004800
 8004cd4:	40004c00 	.word	0x40004c00
 8004cd8:	08005eec 	.word	0x08005eec

08004cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	2208      	movs	r2, #8
 8004cea:	4013      	ands	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8004e20 <UART_AdvFeatureConfig+0x144>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4a43      	ldr	r2, [pc, #268]	@ (8004e24 <UART_AdvFeatureConfig+0x148>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a3b      	ldr	r2, [pc, #236]	@ (8004e28 <UART_AdvFeatureConfig+0x14c>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	2204      	movs	r2, #4
 8004d50:	4013      	ands	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4a34      	ldr	r2, [pc, #208]	@ (8004e2c <UART_AdvFeatureConfig+0x150>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	2210      	movs	r2, #16
 8004d72:	4013      	ands	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e30 <UART_AdvFeatureConfig+0x154>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	2220      	movs	r2, #32
 8004d94:	4013      	ands	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4a25      	ldr	r2, [pc, #148]	@ (8004e34 <UART_AdvFeatureConfig+0x158>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	2240      	movs	r2, #64	@ 0x40
 8004db6:	4013      	ands	r3, r2
 8004db8:	d01d      	beq.n	8004df6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e38 <UART_AdvFeatureConfig+0x15c>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	035b      	lsls	r3, r3, #13
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d10b      	bne.n	8004df6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <UART_AdvFeatureConfig+0x160>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	0019      	movs	r1, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	2280      	movs	r2, #128	@ 0x80
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4a0e      	ldr	r2, [pc, #56]	@ (8004e40 <UART_AdvFeatureConfig+0x164>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }
}
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	ffff7fff 	.word	0xffff7fff
 8004e24:	fffdffff 	.word	0xfffdffff
 8004e28:	fffeffff 	.word	0xfffeffff
 8004e2c:	fffbffff 	.word	0xfffbffff
 8004e30:	ffffefff 	.word	0xffffefff
 8004e34:	ffffdfff 	.word	0xffffdfff
 8004e38:	ffefffff 	.word	0xffefffff
 8004e3c:	ff9fffff 	.word	0xff9fffff
 8004e40:	fff7ffff 	.word	0xfff7ffff

08004e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b092      	sub	sp, #72	@ 0x48
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2290      	movs	r2, #144	@ 0x90
 8004e50:	2100      	movs	r1, #0
 8004e52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e54:	f7fc fb62 	bl	800151c <HAL_GetTick>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2208      	movs	r2, #8
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d12d      	bne.n	8004ec6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6c:	2280      	movs	r2, #128	@ 0x80
 8004e6e:	0391      	lsls	r1, r2, #14
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	4a47      	ldr	r2, [pc, #284]	@ (8004f90 <UART_CheckIdleState+0x14c>)
 8004e74:	9200      	str	r2, [sp, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f000 f88e 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	1e03      	subs	r3, r0, #0
 8004e7e:	d022      	beq.n	8004ec6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e80:	f3ef 8310 	mrs	r3, PRIMASK
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	f383 8810 	msr	PRIMASK, r3
}
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2180      	movs	r1, #128	@ 0x80
 8004ea2:	438a      	bics	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2288      	movs	r2, #136	@ 0x88
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2284      	movs	r2, #132	@ 0x84
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e060      	b.n	8004f88 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d146      	bne.n	8004f62 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	03d1      	lsls	r1, r2, #15
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	@ (8004f90 <UART_CheckIdleState+0x14c>)
 8004ede:	9200      	str	r2, [sp, #0]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f000 f859 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d03b      	beq.n	8004f62 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004eea:	f3ef 8310 	mrs	r3, PRIMASK
 8004eee:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4922      	ldr	r1, [pc, #136]	@ (8004f94 <UART_CheckIdleState+0x150>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f20:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f22:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f26:	2301      	movs	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	438a      	bics	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	228c      	movs	r2, #140	@ 0x8c
 8004f52:	2120      	movs	r1, #32
 8004f54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2284      	movs	r2, #132	@ 0x84
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e012      	b.n	8004f88 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2288      	movs	r2, #136	@ 0x88
 8004f66:	2120      	movs	r1, #32
 8004f68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	228c      	movs	r2, #140	@ 0x8c
 8004f6e:	2120      	movs	r1, #32
 8004f70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2284      	movs	r2, #132	@ 0x84
 8004f82:	2100      	movs	r1, #0
 8004f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b010      	add	sp, #64	@ 0x40
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	01ffffff 	.word	0x01ffffff
 8004f94:	fffffedf 	.word	0xfffffedf

08004f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa8:	e051      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3301      	adds	r3, #1
 8004fae:	d04e      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fc fab4 	bl	800151c <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e051      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d03b      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b80      	cmp	r3, #128	@ 0x80
 8004fda:	d038      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	d035      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d111      	bne.n	8005014 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f000 f83c 	bl	8005078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2290      	movs	r2, #144	@ 0x90
 8005004:	2108      	movs	r1, #8
 8005006:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2284      	movs	r2, #132	@ 0x84
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e02c      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	2380      	movs	r3, #128	@ 0x80
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	401a      	ands	r2, r3
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	429a      	cmp	r2, r3
 8005026:	d112      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2280      	movs	r2, #128	@ 0x80
 800502e:	0112      	lsls	r2, r2, #4
 8005030:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 f81f 	bl	8005078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2290      	movs	r2, #144	@ 0x90
 800503e:	2120      	movs	r1, #32
 8005040:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2284      	movs	r2, #132	@ 0x84
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e00f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	425a      	negs	r2, r3
 800505e:	4153      	adcs	r3, r2
 8005060:	b2db      	uxtb	r3, r3
 8005062:	001a      	movs	r2, r3
 8005064:	1dfb      	adds	r3, r7, #7
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d09e      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	@ 0x38
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	617b      	str	r3, [r7, #20]
  return(result);
 8005086:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
 800508a:	2301      	movs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			@ (mov r8, r8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4926      	ldr	r1, [pc, #152]	@ (800513c <UART_EndRxTransfer+0xc4>)
 80050a2:	400a      	ands	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050b2:	f3ef 8310 	mrs	r3, PRIMASK
 80050b6:	623b      	str	r3, [r7, #32]
  return(result);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80050bc:	2301      	movs	r3, #1
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	f383 8810 	msr	PRIMASK, r3
}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	491b      	ldr	r1, [pc, #108]	@ (8005140 <UART_EndRxTransfer+0xc8>)
 80050d4:	400a      	ands	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d118      	bne.n	800511e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050ec:	f3ef 8310 	mrs	r3, PRIMASK
 80050f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80050f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f6:	2301      	movs	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f383 8810 	msr	PRIMASK, r3
}
 8005100:	46c0      	nop			@ (mov r8, r8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2110      	movs	r1, #16
 800510e:	438a      	bics	r2, r1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f383 8810 	msr	PRIMASK, r3
}
 800511c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	228c      	movs	r2, #140	@ 0x8c
 8005122:	2120      	movs	r1, #32
 8005124:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005132:	46c0      	nop			@ (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b00e      	add	sp, #56	@ 0x38
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	fffffedf 	.word	0xfffffedf
 8005140:	effffffe 	.word	0xeffffffe

08005144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2284      	movs	r2, #132	@ 0x84
 8005150:	5c9b      	ldrb	r3, [r3, r2]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_UARTEx_DisableFifoMode+0x16>
 8005156:	2302      	movs	r3, #2
 8005158:	e027      	b.n	80051aa <HAL_UARTEx_DisableFifoMode+0x66>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2284      	movs	r2, #132	@ 0x84
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2288      	movs	r2, #136	@ 0x88
 8005166:	2124      	movs	r1, #36	@ 0x24
 8005168:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2101      	movs	r1, #1
 800517e:	438a      	bics	r2, r1
 8005180:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a0b      	ldr	r2, [pc, #44]	@ (80051b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005186:	4013      	ands	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2288      	movs	r2, #136	@ 0x88
 800519c:	2120      	movs	r1, #32
 800519e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2284      	movs	r2, #132	@ 0x84
 80051a4:	2100      	movs	r1, #0
 80051a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b004      	add	sp, #16
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	dfffffff 	.word	0xdfffffff

080051b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2284      	movs	r2, #132	@ 0x84
 80051c6:	5c9b      	ldrb	r3, [r3, r2]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e02e      	b.n	800522e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2284      	movs	r2, #132	@ 0x84
 80051d4:	2101      	movs	r1, #1
 80051d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2288      	movs	r2, #136	@ 0x88
 80051dc:	2124      	movs	r1, #36	@ 0x24
 80051de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2101      	movs	r1, #1
 80051f4:	438a      	bics	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	08d9      	lsrs	r1, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0018      	movs	r0, r3
 8005210:	f000 f854 	bl	80052bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2288      	movs	r2, #136	@ 0x88
 8005220:	2120      	movs	r1, #32
 8005222:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2284      	movs	r2, #132	@ 0x84
 8005228:	2100      	movs	r1, #0
 800522a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	0018      	movs	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	b004      	add	sp, #16
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2284      	movs	r2, #132	@ 0x84
 8005246:	5c9b      	ldrb	r3, [r3, r2]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e02f      	b.n	80052b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2284      	movs	r2, #132	@ 0x84
 8005254:	2101      	movs	r1, #1
 8005256:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2288      	movs	r2, #136	@ 0x88
 800525c:	2124      	movs	r1, #36	@ 0x24
 800525e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2101      	movs	r1, #1
 8005274:	438a      	bics	r2, r1
 8005276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4a0e      	ldr	r2, [pc, #56]	@ (80052b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	0018      	movs	r0, r3
 8005292:	f000 f813 	bl	80052bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2288      	movs	r2, #136	@ 0x88
 80052a2:	2120      	movs	r1, #32
 80052a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2284      	movs	r2, #132	@ 0x84
 80052aa:	2100      	movs	r1, #0
 80052ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	f1ffffff 	.word	0xf1ffffff

080052bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d108      	bne.n	80052de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	226a      	movs	r2, #106	@ 0x6a
 80052d0:	2101      	movs	r1, #1
 80052d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2268      	movs	r2, #104	@ 0x68
 80052d8:	2101      	movs	r1, #1
 80052da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052dc:	e043      	b.n	8005366 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052de:	260f      	movs	r6, #15
 80052e0:	19bb      	adds	r3, r7, r6
 80052e2:	2208      	movs	r2, #8
 80052e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052e6:	200e      	movs	r0, #14
 80052e8:	183b      	adds	r3, r7, r0
 80052ea:	2208      	movs	r2, #8
 80052ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	0e5b      	lsrs	r3, r3, #25
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	240d      	movs	r4, #13
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	2107      	movs	r1, #7
 80052fe:	400a      	ands	r2, r1
 8005300:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	0f5b      	lsrs	r3, r3, #29
 800530a:	b2da      	uxtb	r2, r3
 800530c:	250c      	movs	r5, #12
 800530e:	197b      	adds	r3, r7, r5
 8005310:	2107      	movs	r1, #7
 8005312:	400a      	ands	r2, r1
 8005314:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005316:	183b      	adds	r3, r7, r0
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	197a      	adds	r2, r7, r5
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	4914      	ldr	r1, [pc, #80]	@ (8005370 <UARTEx_SetNbDataToProcess+0xb4>)
 8005320:	5c8a      	ldrb	r2, [r1, r2]
 8005322:	435a      	muls	r2, r3
 8005324:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005326:	197b      	adds	r3, r7, r5
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	4a12      	ldr	r2, [pc, #72]	@ (8005374 <UARTEx_SetNbDataToProcess+0xb8>)
 800532c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800532e:	0019      	movs	r1, r3
 8005330:	f7fa ff86 	bl	8000240 <__divsi3>
 8005334:	0003      	movs	r3, r0
 8005336:	b299      	uxth	r1, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	226a      	movs	r2, #106	@ 0x6a
 800533c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800533e:	19bb      	adds	r3, r7, r6
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	193a      	adds	r2, r7, r4
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	490a      	ldr	r1, [pc, #40]	@ (8005370 <UARTEx_SetNbDataToProcess+0xb4>)
 8005348:	5c8a      	ldrb	r2, [r1, r2]
 800534a:	435a      	muls	r2, r3
 800534c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800534e:	193b      	adds	r3, r7, r4
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4a08      	ldr	r2, [pc, #32]	@ (8005374 <UARTEx_SetNbDataToProcess+0xb8>)
 8005354:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005356:	0019      	movs	r1, r3
 8005358:	f7fa ff72 	bl	8000240 <__divsi3>
 800535c:	0003      	movs	r3, r0
 800535e:	b299      	uxth	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2268      	movs	r2, #104	@ 0x68
 8005364:	5299      	strh	r1, [r3, r2]
}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	46bd      	mov	sp, r7
 800536a:	b005      	add	sp, #20
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	08005f04 	.word	0x08005f04
 8005374:	08005f0c 	.word	0x08005f0c

08005378 <_vsniprintf_r>:
 8005378:	b530      	push	{r4, r5, lr}
 800537a:	0005      	movs	r5, r0
 800537c:	0014      	movs	r4, r2
 800537e:	0008      	movs	r0, r1
 8005380:	001a      	movs	r2, r3
 8005382:	b09b      	sub	sp, #108	@ 0x6c
 8005384:	2c00      	cmp	r4, #0
 8005386:	da05      	bge.n	8005394 <_vsniprintf_r+0x1c>
 8005388:	238b      	movs	r3, #139	@ 0x8b
 800538a:	2001      	movs	r0, #1
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	4240      	negs	r0, r0
 8005390:	b01b      	add	sp, #108	@ 0x6c
 8005392:	bd30      	pop	{r4, r5, pc}
 8005394:	2382      	movs	r3, #130	@ 0x82
 8005396:	4669      	mov	r1, sp
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	818b      	strh	r3, [r1, #12]
 800539c:	2100      	movs	r1, #0
 800539e:	9000      	str	r0, [sp, #0]
 80053a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80053a2:	9004      	str	r0, [sp, #16]
 80053a4:	428c      	cmp	r4, r1
 80053a6:	d000      	beq.n	80053aa <_vsniprintf_r+0x32>
 80053a8:	1e61      	subs	r1, r4, #1
 80053aa:	2301      	movs	r3, #1
 80053ac:	9102      	str	r1, [sp, #8]
 80053ae:	9105      	str	r1, [sp, #20]
 80053b0:	4669      	mov	r1, sp
 80053b2:	425b      	negs	r3, r3
 80053b4:	81cb      	strh	r3, [r1, #14]
 80053b6:	0028      	movs	r0, r5
 80053b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80053ba:	f000 f9a7 	bl	800570c <_svfiprintf_r>
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	da01      	bge.n	80053c6 <_vsniprintf_r+0x4e>
 80053c2:	238b      	movs	r3, #139	@ 0x8b
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	d0e2      	beq.n	8005390 <_vsniprintf_r+0x18>
 80053ca:	2200      	movs	r2, #0
 80053cc:	9b00      	ldr	r3, [sp, #0]
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e7de      	b.n	8005390 <_vsniprintf_r+0x18>
	...

080053d4 <vsniprintf>:
 80053d4:	b513      	push	{r0, r1, r4, lr}
 80053d6:	4c04      	ldr	r4, [pc, #16]	@ (80053e8 <vsniprintf+0x14>)
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	0013      	movs	r3, r2
 80053dc:	000a      	movs	r2, r1
 80053de:	0001      	movs	r1, r0
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	f7ff ffc9 	bl	8005378 <_vsniprintf_r>
 80053e6:	bd16      	pop	{r1, r2, r4, pc}
 80053e8:	2000000c 	.word	0x2000000c

080053ec <memset>:
 80053ec:	0003      	movs	r3, r0
 80053ee:	1882      	adds	r2, r0, r2
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	7019      	strb	r1, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	@ (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	2000000c 	.word	0x2000000c

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	2600      	movs	r6, #0
 800540c:	4c0c      	ldr	r4, [pc, #48]	@ (8005440 <__libc_init_array+0x38>)
 800540e:	4d0d      	ldr	r5, [pc, #52]	@ (8005444 <__libc_init_array+0x3c>)
 8005410:	1b64      	subs	r4, r4, r5
 8005412:	10a4      	asrs	r4, r4, #2
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	2600      	movs	r6, #0
 800541a:	f000 fc61 	bl	8005ce0 <_init>
 800541e:	4c0a      	ldr	r4, [pc, #40]	@ (8005448 <__libc_init_array+0x40>)
 8005420:	4d0a      	ldr	r5, [pc, #40]	@ (800544c <__libc_init_array+0x44>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	00b3      	lsls	r3, r6, #2
 800542e:	58eb      	ldr	r3, [r5, r3]
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	00b3      	lsls	r3, r6, #2
 8005438:	58eb      	ldr	r3, [r5, r3]
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005f50 	.word	0x08005f50
 8005444:	08005f50 	.word	0x08005f50
 8005448:	08005f54 	.word	0x08005f54
 800544c:	08005f50 	.word	0x08005f50

08005450 <__retarget_lock_acquire_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_release_recursive>:
 8005452:	4770      	bx	lr

08005454 <_free_r>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	0005      	movs	r5, r0
 8005458:	1e0c      	subs	r4, r1, #0
 800545a:	d010      	beq.n	800547e <_free_r+0x2a>
 800545c:	3c04      	subs	r4, #4
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da00      	bge.n	8005466 <_free_r+0x12>
 8005464:	18e4      	adds	r4, r4, r3
 8005466:	0028      	movs	r0, r5
 8005468:	f000 f8e0 	bl	800562c <__malloc_lock>
 800546c:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <_free_r+0x90>)
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <_free_r+0x2c>
 8005474:	6063      	str	r3, [r4, #4]
 8005476:	6014      	str	r4, [r2, #0]
 8005478:	0028      	movs	r0, r5
 800547a:	f000 f8df 	bl	800563c <__malloc_unlock>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	42a3      	cmp	r3, r4
 8005482:	d908      	bls.n	8005496 <_free_r+0x42>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	1821      	adds	r1, r4, r0
 8005488:	428b      	cmp	r3, r1
 800548a:	d1f3      	bne.n	8005474 <_free_r+0x20>
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	1809      	adds	r1, r1, r0
 8005492:	6021      	str	r1, [r4, #0]
 8005494:	e7ee      	b.n	8005474 <_free_r+0x20>
 8005496:	001a      	movs	r2, r3
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <_free_r+0x4e>
 800549e:	42a3      	cmp	r3, r4
 80054a0:	d9f9      	bls.n	8005496 <_free_r+0x42>
 80054a2:	6811      	ldr	r1, [r2, #0]
 80054a4:	1850      	adds	r0, r2, r1
 80054a6:	42a0      	cmp	r0, r4
 80054a8:	d10b      	bne.n	80054c2 <_free_r+0x6e>
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	1809      	adds	r1, r1, r0
 80054ae:	1850      	adds	r0, r2, r1
 80054b0:	6011      	str	r1, [r2, #0]
 80054b2:	4283      	cmp	r3, r0
 80054b4:	d1e0      	bne.n	8005478 <_free_r+0x24>
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	1841      	adds	r1, r0, r1
 80054bc:	6011      	str	r1, [r2, #0]
 80054be:	6053      	str	r3, [r2, #4]
 80054c0:	e7da      	b.n	8005478 <_free_r+0x24>
 80054c2:	42a0      	cmp	r0, r4
 80054c4:	d902      	bls.n	80054cc <_free_r+0x78>
 80054c6:	230c      	movs	r3, #12
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	e7d5      	b.n	8005478 <_free_r+0x24>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	1821      	adds	r1, r4, r0
 80054d0:	428b      	cmp	r3, r1
 80054d2:	d103      	bne.n	80054dc <_free_r+0x88>
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	1809      	adds	r1, r1, r0
 80054da:	6021      	str	r1, [r4, #0]
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	6054      	str	r4, [r2, #4]
 80054e0:	e7ca      	b.n	8005478 <_free_r+0x24>
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	20000334 	.word	0x20000334

080054e8 <sbrk_aligned>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005528 <sbrk_aligned+0x40>)
 80054ec:	000d      	movs	r5, r1
 80054ee:	6831      	ldr	r1, [r6, #0]
 80054f0:	0004      	movs	r4, r0
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d102      	bne.n	80054fc <sbrk_aligned+0x14>
 80054f6:	f000 fb95 	bl	8005c24 <_sbrk_r>
 80054fa:	6030      	str	r0, [r6, #0]
 80054fc:	0029      	movs	r1, r5
 80054fe:	0020      	movs	r0, r4
 8005500:	f000 fb90 	bl	8005c24 <_sbrk_r>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d103      	bne.n	8005510 <sbrk_aligned+0x28>
 8005508:	2501      	movs	r5, #1
 800550a:	426d      	negs	r5, r5
 800550c:	0028      	movs	r0, r5
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	2303      	movs	r3, #3
 8005512:	1cc5      	adds	r5, r0, #3
 8005514:	439d      	bics	r5, r3
 8005516:	42a8      	cmp	r0, r5
 8005518:	d0f8      	beq.n	800550c <sbrk_aligned+0x24>
 800551a:	1a29      	subs	r1, r5, r0
 800551c:	0020      	movs	r0, r4
 800551e:	f000 fb81 	bl	8005c24 <_sbrk_r>
 8005522:	3001      	adds	r0, #1
 8005524:	d1f2      	bne.n	800550c <sbrk_aligned+0x24>
 8005526:	e7ef      	b.n	8005508 <sbrk_aligned+0x20>
 8005528:	20000330 	.word	0x20000330

0800552c <_malloc_r>:
 800552c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552e:	2203      	movs	r2, #3
 8005530:	1ccb      	adds	r3, r1, #3
 8005532:	4393      	bics	r3, r2
 8005534:	3308      	adds	r3, #8
 8005536:	0005      	movs	r5, r0
 8005538:	001f      	movs	r7, r3
 800553a:	2b0c      	cmp	r3, #12
 800553c:	d234      	bcs.n	80055a8 <_malloc_r+0x7c>
 800553e:	270c      	movs	r7, #12
 8005540:	42b9      	cmp	r1, r7
 8005542:	d833      	bhi.n	80055ac <_malloc_r+0x80>
 8005544:	0028      	movs	r0, r5
 8005546:	f000 f871 	bl	800562c <__malloc_lock>
 800554a:	4e37      	ldr	r6, [pc, #220]	@ (8005628 <_malloc_r+0xfc>)
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	001c      	movs	r4, r3
 8005550:	2c00      	cmp	r4, #0
 8005552:	d12f      	bne.n	80055b4 <_malloc_r+0x88>
 8005554:	0039      	movs	r1, r7
 8005556:	0028      	movs	r0, r5
 8005558:	f7ff ffc6 	bl	80054e8 <sbrk_aligned>
 800555c:	0004      	movs	r4, r0
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d15f      	bne.n	8005622 <_malloc_r+0xf6>
 8005562:	6834      	ldr	r4, [r6, #0]
 8005564:	9400      	str	r4, [sp, #0]
 8005566:	9b00      	ldr	r3, [sp, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d14a      	bne.n	8005602 <_malloc_r+0xd6>
 800556c:	2c00      	cmp	r4, #0
 800556e:	d052      	beq.n	8005616 <_malloc_r+0xea>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	0028      	movs	r0, r5
 8005574:	18e3      	adds	r3, r4, r3
 8005576:	9900      	ldr	r1, [sp, #0]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	f000 fb53 	bl	8005c24 <_sbrk_r>
 800557e:	9b01      	ldr	r3, [sp, #4]
 8005580:	4283      	cmp	r3, r0
 8005582:	d148      	bne.n	8005616 <_malloc_r+0xea>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	0028      	movs	r0, r5
 8005588:	1aff      	subs	r7, r7, r3
 800558a:	0039      	movs	r1, r7
 800558c:	f7ff ffac 	bl	80054e8 <sbrk_aligned>
 8005590:	3001      	adds	r0, #1
 8005592:	d040      	beq.n	8005616 <_malloc_r+0xea>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	19db      	adds	r3, r3, r7
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	6833      	ldr	r3, [r6, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	2a00      	cmp	r2, #0
 80055a0:	d133      	bne.n	800560a <_malloc_r+0xde>
 80055a2:	9b00      	ldr	r3, [sp, #0]
 80055a4:	6033      	str	r3, [r6, #0]
 80055a6:	e019      	b.n	80055dc <_malloc_r+0xb0>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dac9      	bge.n	8005540 <_malloc_r+0x14>
 80055ac:	230c      	movs	r3, #12
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	2000      	movs	r0, #0
 80055b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055b4:	6821      	ldr	r1, [r4, #0]
 80055b6:	1bc9      	subs	r1, r1, r7
 80055b8:	d420      	bmi.n	80055fc <_malloc_r+0xd0>
 80055ba:	290b      	cmp	r1, #11
 80055bc:	d90a      	bls.n	80055d4 <_malloc_r+0xa8>
 80055be:	19e2      	adds	r2, r4, r7
 80055c0:	6027      	str	r7, [r4, #0]
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	d104      	bne.n	80055d0 <_malloc_r+0xa4>
 80055c6:	6032      	str	r2, [r6, #0]
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	6011      	str	r1, [r2, #0]
 80055cc:	6053      	str	r3, [r2, #4]
 80055ce:	e005      	b.n	80055dc <_malloc_r+0xb0>
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	e7f9      	b.n	80055c8 <_malloc_r+0x9c>
 80055d4:	6862      	ldr	r2, [r4, #4]
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	d10e      	bne.n	80055f8 <_malloc_r+0xcc>
 80055da:	6032      	str	r2, [r6, #0]
 80055dc:	0028      	movs	r0, r5
 80055de:	f000 f82d 	bl	800563c <__malloc_unlock>
 80055e2:	0020      	movs	r0, r4
 80055e4:	2207      	movs	r2, #7
 80055e6:	300b      	adds	r0, #11
 80055e8:	1d23      	adds	r3, r4, #4
 80055ea:	4390      	bics	r0, r2
 80055ec:	1ac2      	subs	r2, r0, r3
 80055ee:	4298      	cmp	r0, r3
 80055f0:	d0df      	beq.n	80055b2 <_malloc_r+0x86>
 80055f2:	1a1b      	subs	r3, r3, r0
 80055f4:	50a3      	str	r3, [r4, r2]
 80055f6:	e7dc      	b.n	80055b2 <_malloc_r+0x86>
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e7ef      	b.n	80055dc <_malloc_r+0xb0>
 80055fc:	0023      	movs	r3, r4
 80055fe:	6864      	ldr	r4, [r4, #4]
 8005600:	e7a6      	b.n	8005550 <_malloc_r+0x24>
 8005602:	9c00      	ldr	r4, [sp, #0]
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	e7ad      	b.n	8005566 <_malloc_r+0x3a>
 800560a:	001a      	movs	r2, r3
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	42a3      	cmp	r3, r4
 8005610:	d1fb      	bne.n	800560a <_malloc_r+0xde>
 8005612:	2300      	movs	r3, #0
 8005614:	e7da      	b.n	80055cc <_malloc_r+0xa0>
 8005616:	230c      	movs	r3, #12
 8005618:	0028      	movs	r0, r5
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f000 f80e 	bl	800563c <__malloc_unlock>
 8005620:	e7c6      	b.n	80055b0 <_malloc_r+0x84>
 8005622:	6007      	str	r7, [r0, #0]
 8005624:	e7da      	b.n	80055dc <_malloc_r+0xb0>
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	20000334 	.word	0x20000334

0800562c <__malloc_lock>:
 800562c:	b510      	push	{r4, lr}
 800562e:	4802      	ldr	r0, [pc, #8]	@ (8005638 <__malloc_lock+0xc>)
 8005630:	f7ff ff0e 	bl	8005450 <__retarget_lock_acquire_recursive>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	2000032c 	.word	0x2000032c

0800563c <__malloc_unlock>:
 800563c:	b510      	push	{r4, lr}
 800563e:	4802      	ldr	r0, [pc, #8]	@ (8005648 <__malloc_unlock+0xc>)
 8005640:	f7ff ff07 	bl	8005452 <__retarget_lock_release_recursive>
 8005644:	bd10      	pop	{r4, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	2000032c 	.word	0x2000032c

0800564c <__ssputs_r>:
 800564c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564e:	688e      	ldr	r6, [r1, #8]
 8005650:	b085      	sub	sp, #20
 8005652:	001f      	movs	r7, r3
 8005654:	000c      	movs	r4, r1
 8005656:	680b      	ldr	r3, [r1, #0]
 8005658:	9002      	str	r0, [sp, #8]
 800565a:	9203      	str	r2, [sp, #12]
 800565c:	42be      	cmp	r6, r7
 800565e:	d830      	bhi.n	80056c2 <__ssputs_r+0x76>
 8005660:	210c      	movs	r1, #12
 8005662:	5e62      	ldrsh	r2, [r4, r1]
 8005664:	2190      	movs	r1, #144	@ 0x90
 8005666:	00c9      	lsls	r1, r1, #3
 8005668:	420a      	tst	r2, r1
 800566a:	d028      	beq.n	80056be <__ssputs_r+0x72>
 800566c:	2003      	movs	r0, #3
 800566e:	6921      	ldr	r1, [r4, #16]
 8005670:	1a5b      	subs	r3, r3, r1
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	6963      	ldr	r3, [r4, #20]
 8005676:	4343      	muls	r3, r0
 8005678:	9801      	ldr	r0, [sp, #4]
 800567a:	0fdd      	lsrs	r5, r3, #31
 800567c:	18ed      	adds	r5, r5, r3
 800567e:	1c7b      	adds	r3, r7, #1
 8005680:	181b      	adds	r3, r3, r0
 8005682:	106d      	asrs	r5, r5, #1
 8005684:	42ab      	cmp	r3, r5
 8005686:	d900      	bls.n	800568a <__ssputs_r+0x3e>
 8005688:	001d      	movs	r5, r3
 800568a:	0552      	lsls	r2, r2, #21
 800568c:	d528      	bpl.n	80056e0 <__ssputs_r+0x94>
 800568e:	0029      	movs	r1, r5
 8005690:	9802      	ldr	r0, [sp, #8]
 8005692:	f7ff ff4b 	bl	800552c <_malloc_r>
 8005696:	1e06      	subs	r6, r0, #0
 8005698:	d02c      	beq.n	80056f4 <__ssputs_r+0xa8>
 800569a:	9a01      	ldr	r2, [sp, #4]
 800569c:	6921      	ldr	r1, [r4, #16]
 800569e:	f000 fade 	bl	8005c5e <memcpy>
 80056a2:	89a2      	ldrh	r2, [r4, #12]
 80056a4:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <__ssputs_r+0xbc>)
 80056a6:	401a      	ands	r2, r3
 80056a8:	2380      	movs	r3, #128	@ 0x80
 80056aa:	4313      	orrs	r3, r2
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	6126      	str	r6, [r4, #16]
 80056b2:	18f6      	adds	r6, r6, r3
 80056b4:	6026      	str	r6, [r4, #0]
 80056b6:	003e      	movs	r6, r7
 80056b8:	6165      	str	r5, [r4, #20]
 80056ba:	1aed      	subs	r5, r5, r3
 80056bc:	60a5      	str	r5, [r4, #8]
 80056be:	42be      	cmp	r6, r7
 80056c0:	d900      	bls.n	80056c4 <__ssputs_r+0x78>
 80056c2:	003e      	movs	r6, r7
 80056c4:	0032      	movs	r2, r6
 80056c6:	9903      	ldr	r1, [sp, #12]
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	f000 fa99 	bl	8005c00 <memmove>
 80056ce:	2000      	movs	r0, #0
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	1b9b      	subs	r3, r3, r6
 80056d4:	60a3      	str	r3, [r4, #8]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	199b      	adds	r3, r3, r6
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	b005      	add	sp, #20
 80056de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e0:	002a      	movs	r2, r5
 80056e2:	9802      	ldr	r0, [sp, #8]
 80056e4:	f000 fac4 	bl	8005c70 <_realloc_r>
 80056e8:	1e06      	subs	r6, r0, #0
 80056ea:	d1e0      	bne.n	80056ae <__ssputs_r+0x62>
 80056ec:	6921      	ldr	r1, [r4, #16]
 80056ee:	9802      	ldr	r0, [sp, #8]
 80056f0:	f7ff feb0 	bl	8005454 <_free_r>
 80056f4:	230c      	movs	r3, #12
 80056f6:	2001      	movs	r0, #1
 80056f8:	9a02      	ldr	r2, [sp, #8]
 80056fa:	4240      	negs	r0, r0
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	89a2      	ldrh	r2, [r4, #12]
 8005700:	3334      	adds	r3, #52	@ 0x34
 8005702:	4313      	orrs	r3, r2
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	e7e9      	b.n	80056dc <__ssputs_r+0x90>
 8005708:	fffffb7f 	.word	0xfffffb7f

0800570c <_svfiprintf_r>:
 800570c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570e:	b0a1      	sub	sp, #132	@ 0x84
 8005710:	9003      	str	r0, [sp, #12]
 8005712:	001d      	movs	r5, r3
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	000f      	movs	r7, r1
 8005718:	0016      	movs	r6, r2
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	d511      	bpl.n	8005742 <_svfiprintf_r+0x36>
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10e      	bne.n	8005742 <_svfiprintf_r+0x36>
 8005724:	2140      	movs	r1, #64	@ 0x40
 8005726:	f7ff ff01 	bl	800552c <_malloc_r>
 800572a:	6038      	str	r0, [r7, #0]
 800572c:	6138      	str	r0, [r7, #16]
 800572e:	2800      	cmp	r0, #0
 8005730:	d105      	bne.n	800573e <_svfiprintf_r+0x32>
 8005732:	230c      	movs	r3, #12
 8005734:	9a03      	ldr	r2, [sp, #12]
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	2001      	movs	r0, #1
 800573a:	4240      	negs	r0, r0
 800573c:	e0cf      	b.n	80058de <_svfiprintf_r+0x1d2>
 800573e:	2340      	movs	r3, #64	@ 0x40
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	2300      	movs	r3, #0
 8005744:	ac08      	add	r4, sp, #32
 8005746:	6163      	str	r3, [r4, #20]
 8005748:	3320      	adds	r3, #32
 800574a:	7663      	strb	r3, [r4, #25]
 800574c:	3310      	adds	r3, #16
 800574e:	76a3      	strb	r3, [r4, #26]
 8005750:	9507      	str	r5, [sp, #28]
 8005752:	0035      	movs	r5, r6
 8005754:	782b      	ldrb	r3, [r5, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <_svfiprintf_r+0x52>
 800575a:	2b25      	cmp	r3, #37	@ 0x25
 800575c:	d148      	bne.n	80057f0 <_svfiprintf_r+0xe4>
 800575e:	1bab      	subs	r3, r5, r6
 8005760:	9305      	str	r3, [sp, #20]
 8005762:	42b5      	cmp	r5, r6
 8005764:	d00b      	beq.n	800577e <_svfiprintf_r+0x72>
 8005766:	0032      	movs	r2, r6
 8005768:	0039      	movs	r1, r7
 800576a:	9803      	ldr	r0, [sp, #12]
 800576c:	f7ff ff6e 	bl	800564c <__ssputs_r>
 8005770:	3001      	adds	r0, #1
 8005772:	d100      	bne.n	8005776 <_svfiprintf_r+0x6a>
 8005774:	e0ae      	b.n	80058d4 <_svfiprintf_r+0x1c8>
 8005776:	6963      	ldr	r3, [r4, #20]
 8005778:	9a05      	ldr	r2, [sp, #20]
 800577a:	189b      	adds	r3, r3, r2
 800577c:	6163      	str	r3, [r4, #20]
 800577e:	782b      	ldrb	r3, [r5, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d100      	bne.n	8005786 <_svfiprintf_r+0x7a>
 8005784:	e0a6      	b.n	80058d4 <_svfiprintf_r+0x1c8>
 8005786:	2201      	movs	r2, #1
 8005788:	2300      	movs	r3, #0
 800578a:	4252      	negs	r2, r2
 800578c:	6062      	str	r2, [r4, #4]
 800578e:	a904      	add	r1, sp, #16
 8005790:	3254      	adds	r2, #84	@ 0x54
 8005792:	1852      	adds	r2, r2, r1
 8005794:	1c6e      	adds	r6, r5, #1
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	60e3      	str	r3, [r4, #12]
 800579a:	60a3      	str	r3, [r4, #8]
 800579c:	7013      	strb	r3, [r2, #0]
 800579e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80057a0:	4b54      	ldr	r3, [pc, #336]	@ (80058f4 <_svfiprintf_r+0x1e8>)
 80057a2:	2205      	movs	r2, #5
 80057a4:	0018      	movs	r0, r3
 80057a6:	7831      	ldrb	r1, [r6, #0]
 80057a8:	9305      	str	r3, [sp, #20]
 80057aa:	f000 fa4d 	bl	8005c48 <memchr>
 80057ae:	1c75      	adds	r5, r6, #1
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d11f      	bne.n	80057f4 <_svfiprintf_r+0xe8>
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	06d3      	lsls	r3, r2, #27
 80057b8:	d504      	bpl.n	80057c4 <_svfiprintf_r+0xb8>
 80057ba:	2353      	movs	r3, #83	@ 0x53
 80057bc:	a904      	add	r1, sp, #16
 80057be:	185b      	adds	r3, r3, r1
 80057c0:	2120      	movs	r1, #32
 80057c2:	7019      	strb	r1, [r3, #0]
 80057c4:	0713      	lsls	r3, r2, #28
 80057c6:	d504      	bpl.n	80057d2 <_svfiprintf_r+0xc6>
 80057c8:	2353      	movs	r3, #83	@ 0x53
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	185b      	adds	r3, r3, r1
 80057ce:	212b      	movs	r1, #43	@ 0x2b
 80057d0:	7019      	strb	r1, [r3, #0]
 80057d2:	7833      	ldrb	r3, [r6, #0]
 80057d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80057d6:	d016      	beq.n	8005806 <_svfiprintf_r+0xfa>
 80057d8:	0035      	movs	r5, r6
 80057da:	2100      	movs	r1, #0
 80057dc:	200a      	movs	r0, #10
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	782a      	ldrb	r2, [r5, #0]
 80057e2:	1c6e      	adds	r6, r5, #1
 80057e4:	3a30      	subs	r2, #48	@ 0x30
 80057e6:	2a09      	cmp	r2, #9
 80057e8:	d950      	bls.n	800588c <_svfiprintf_r+0x180>
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d111      	bne.n	8005812 <_svfiprintf_r+0x106>
 80057ee:	e017      	b.n	8005820 <_svfiprintf_r+0x114>
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7af      	b.n	8005754 <_svfiprintf_r+0x48>
 80057f4:	9b05      	ldr	r3, [sp, #20]
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	1ac0      	subs	r0, r0, r3
 80057fa:	2301      	movs	r3, #1
 80057fc:	4083      	lsls	r3, r0
 80057fe:	4313      	orrs	r3, r2
 8005800:	002e      	movs	r6, r5
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	e7cc      	b.n	80057a0 <_svfiprintf_r+0x94>
 8005806:	9b07      	ldr	r3, [sp, #28]
 8005808:	1d19      	adds	r1, r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	9107      	str	r1, [sp, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	db01      	blt.n	8005816 <_svfiprintf_r+0x10a>
 8005812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005814:	e004      	b.n	8005820 <_svfiprintf_r+0x114>
 8005816:	425b      	negs	r3, r3
 8005818:	60e3      	str	r3, [r4, #12]
 800581a:	2302      	movs	r3, #2
 800581c:	4313      	orrs	r3, r2
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	782b      	ldrb	r3, [r5, #0]
 8005822:	2b2e      	cmp	r3, #46	@ 0x2e
 8005824:	d10c      	bne.n	8005840 <_svfiprintf_r+0x134>
 8005826:	786b      	ldrb	r3, [r5, #1]
 8005828:	2b2a      	cmp	r3, #42	@ 0x2a
 800582a:	d134      	bne.n	8005896 <_svfiprintf_r+0x18a>
 800582c:	9b07      	ldr	r3, [sp, #28]
 800582e:	3502      	adds	r5, #2
 8005830:	1d1a      	adds	r2, r3, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	9207      	str	r2, [sp, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	da01      	bge.n	800583e <_svfiprintf_r+0x132>
 800583a:	2301      	movs	r3, #1
 800583c:	425b      	negs	r3, r3
 800583e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005840:	4e2d      	ldr	r6, [pc, #180]	@ (80058f8 <_svfiprintf_r+0x1ec>)
 8005842:	2203      	movs	r2, #3
 8005844:	0030      	movs	r0, r6
 8005846:	7829      	ldrb	r1, [r5, #0]
 8005848:	f000 f9fe 	bl	8005c48 <memchr>
 800584c:	2800      	cmp	r0, #0
 800584e:	d006      	beq.n	800585e <_svfiprintf_r+0x152>
 8005850:	2340      	movs	r3, #64	@ 0x40
 8005852:	1b80      	subs	r0, r0, r6
 8005854:	4083      	lsls	r3, r0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	3501      	adds	r5, #1
 800585a:	4313      	orrs	r3, r2
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	7829      	ldrb	r1, [r5, #0]
 8005860:	2206      	movs	r2, #6
 8005862:	4826      	ldr	r0, [pc, #152]	@ (80058fc <_svfiprintf_r+0x1f0>)
 8005864:	1c6e      	adds	r6, r5, #1
 8005866:	7621      	strb	r1, [r4, #24]
 8005868:	f000 f9ee 	bl	8005c48 <memchr>
 800586c:	2800      	cmp	r0, #0
 800586e:	d038      	beq.n	80058e2 <_svfiprintf_r+0x1d6>
 8005870:	4b23      	ldr	r3, [pc, #140]	@ (8005900 <_svfiprintf_r+0x1f4>)
 8005872:	2b00      	cmp	r3, #0
 8005874:	d122      	bne.n	80058bc <_svfiprintf_r+0x1b0>
 8005876:	2207      	movs	r2, #7
 8005878:	9b07      	ldr	r3, [sp, #28]
 800587a:	3307      	adds	r3, #7
 800587c:	4393      	bics	r3, r2
 800587e:	3308      	adds	r3, #8
 8005880:	9307      	str	r3, [sp, #28]
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	9a04      	ldr	r2, [sp, #16]
 8005886:	189b      	adds	r3, r3, r2
 8005888:	6163      	str	r3, [r4, #20]
 800588a:	e762      	b.n	8005752 <_svfiprintf_r+0x46>
 800588c:	4343      	muls	r3, r0
 800588e:	0035      	movs	r5, r6
 8005890:	2101      	movs	r1, #1
 8005892:	189b      	adds	r3, r3, r2
 8005894:	e7a4      	b.n	80057e0 <_svfiprintf_r+0xd4>
 8005896:	2300      	movs	r3, #0
 8005898:	200a      	movs	r0, #10
 800589a:	0019      	movs	r1, r3
 800589c:	3501      	adds	r5, #1
 800589e:	6063      	str	r3, [r4, #4]
 80058a0:	782a      	ldrb	r2, [r5, #0]
 80058a2:	1c6e      	adds	r6, r5, #1
 80058a4:	3a30      	subs	r2, #48	@ 0x30
 80058a6:	2a09      	cmp	r2, #9
 80058a8:	d903      	bls.n	80058b2 <_svfiprintf_r+0x1a6>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0c8      	beq.n	8005840 <_svfiprintf_r+0x134>
 80058ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80058b0:	e7c6      	b.n	8005840 <_svfiprintf_r+0x134>
 80058b2:	4341      	muls	r1, r0
 80058b4:	0035      	movs	r5, r6
 80058b6:	2301      	movs	r3, #1
 80058b8:	1889      	adds	r1, r1, r2
 80058ba:	e7f1      	b.n	80058a0 <_svfiprintf_r+0x194>
 80058bc:	aa07      	add	r2, sp, #28
 80058be:	9200      	str	r2, [sp, #0]
 80058c0:	0021      	movs	r1, r4
 80058c2:	003a      	movs	r2, r7
 80058c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <_svfiprintf_r+0x1f8>)
 80058c6:	9803      	ldr	r0, [sp, #12]
 80058c8:	e000      	b.n	80058cc <_svfiprintf_r+0x1c0>
 80058ca:	bf00      	nop
 80058cc:	9004      	str	r0, [sp, #16]
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	3301      	adds	r3, #1
 80058d2:	d1d6      	bne.n	8005882 <_svfiprintf_r+0x176>
 80058d4:	89bb      	ldrh	r3, [r7, #12]
 80058d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80058d8:	065b      	lsls	r3, r3, #25
 80058da:	d500      	bpl.n	80058de <_svfiprintf_r+0x1d2>
 80058dc:	e72c      	b.n	8005738 <_svfiprintf_r+0x2c>
 80058de:	b021      	add	sp, #132	@ 0x84
 80058e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e2:	aa07      	add	r2, sp, #28
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	0021      	movs	r1, r4
 80058e8:	003a      	movs	r2, r7
 80058ea:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <_svfiprintf_r+0x1f8>)
 80058ec:	9803      	ldr	r0, [sp, #12]
 80058ee:	f000 f87b 	bl	80059e8 <_printf_i>
 80058f2:	e7eb      	b.n	80058cc <_svfiprintf_r+0x1c0>
 80058f4:	08005f14 	.word	0x08005f14
 80058f8:	08005f1a 	.word	0x08005f1a
 80058fc:	08005f1e 	.word	0x08005f1e
 8005900:	00000000 	.word	0x00000000
 8005904:	0800564d 	.word	0x0800564d

08005908 <_printf_common>:
 8005908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800590a:	0016      	movs	r6, r2
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	688a      	ldr	r2, [r1, #8]
 8005910:	690b      	ldr	r3, [r1, #16]
 8005912:	000c      	movs	r4, r1
 8005914:	9000      	str	r0, [sp, #0]
 8005916:	4293      	cmp	r3, r2
 8005918:	da00      	bge.n	800591c <_printf_common+0x14>
 800591a:	0013      	movs	r3, r2
 800591c:	0022      	movs	r2, r4
 800591e:	6033      	str	r3, [r6, #0]
 8005920:	3243      	adds	r2, #67	@ 0x43
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	2a00      	cmp	r2, #0
 8005926:	d001      	beq.n	800592c <_printf_common+0x24>
 8005928:	3301      	adds	r3, #1
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	069b      	lsls	r3, r3, #26
 8005930:	d502      	bpl.n	8005938 <_printf_common+0x30>
 8005932:	6833      	ldr	r3, [r6, #0]
 8005934:	3302      	adds	r3, #2
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	2306      	movs	r3, #6
 800593c:	0015      	movs	r5, r2
 800593e:	401d      	ands	r5, r3
 8005940:	421a      	tst	r2, r3
 8005942:	d027      	beq.n	8005994 <_printf_common+0x8c>
 8005944:	0023      	movs	r3, r4
 8005946:	3343      	adds	r3, #67	@ 0x43
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	1e5a      	subs	r2, r3, #1
 800594c:	4193      	sbcs	r3, r2
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	0692      	lsls	r2, r2, #26
 8005952:	d430      	bmi.n	80059b6 <_printf_common+0xae>
 8005954:	0022      	movs	r2, r4
 8005956:	9901      	ldr	r1, [sp, #4]
 8005958:	9800      	ldr	r0, [sp, #0]
 800595a:	9d08      	ldr	r5, [sp, #32]
 800595c:	3243      	adds	r2, #67	@ 0x43
 800595e:	47a8      	blx	r5
 8005960:	3001      	adds	r0, #1
 8005962:	d025      	beq.n	80059b0 <_printf_common+0xa8>
 8005964:	2206      	movs	r2, #6
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	2500      	movs	r5, #0
 800596a:	4013      	ands	r3, r2
 800596c:	2b04      	cmp	r3, #4
 800596e:	d105      	bne.n	800597c <_printf_common+0x74>
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	68e5      	ldr	r5, [r4, #12]
 8005974:	1aed      	subs	r5, r5, r3
 8005976:	43eb      	mvns	r3, r5
 8005978:	17db      	asrs	r3, r3, #31
 800597a:	401d      	ands	r5, r3
 800597c:	68a3      	ldr	r3, [r4, #8]
 800597e:	6922      	ldr	r2, [r4, #16]
 8005980:	4293      	cmp	r3, r2
 8005982:	dd01      	ble.n	8005988 <_printf_common+0x80>
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	18ed      	adds	r5, r5, r3
 8005988:	2600      	movs	r6, #0
 800598a:	42b5      	cmp	r5, r6
 800598c:	d120      	bne.n	80059d0 <_printf_common+0xc8>
 800598e:	2000      	movs	r0, #0
 8005990:	e010      	b.n	80059b4 <_printf_common+0xac>
 8005992:	3501      	adds	r5, #1
 8005994:	68e3      	ldr	r3, [r4, #12]
 8005996:	6832      	ldr	r2, [r6, #0]
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	42ab      	cmp	r3, r5
 800599c:	ddd2      	ble.n	8005944 <_printf_common+0x3c>
 800599e:	0022      	movs	r2, r4
 80059a0:	2301      	movs	r3, #1
 80059a2:	9901      	ldr	r1, [sp, #4]
 80059a4:	9800      	ldr	r0, [sp, #0]
 80059a6:	9f08      	ldr	r7, [sp, #32]
 80059a8:	3219      	adds	r2, #25
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1f0      	bne.n	8005992 <_printf_common+0x8a>
 80059b0:	2001      	movs	r0, #1
 80059b2:	4240      	negs	r0, r0
 80059b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059b6:	2030      	movs	r0, #48	@ 0x30
 80059b8:	18e1      	adds	r1, r4, r3
 80059ba:	3143      	adds	r1, #67	@ 0x43
 80059bc:	7008      	strb	r0, [r1, #0]
 80059be:	0021      	movs	r1, r4
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	3145      	adds	r1, #69	@ 0x45
 80059c4:	7809      	ldrb	r1, [r1, #0]
 80059c6:	18a2      	adds	r2, r4, r2
 80059c8:	3243      	adds	r2, #67	@ 0x43
 80059ca:	3302      	adds	r3, #2
 80059cc:	7011      	strb	r1, [r2, #0]
 80059ce:	e7c1      	b.n	8005954 <_printf_common+0x4c>
 80059d0:	0022      	movs	r2, r4
 80059d2:	2301      	movs	r3, #1
 80059d4:	9901      	ldr	r1, [sp, #4]
 80059d6:	9800      	ldr	r0, [sp, #0]
 80059d8:	9f08      	ldr	r7, [sp, #32]
 80059da:	321a      	adds	r2, #26
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	d0e6      	beq.n	80059b0 <_printf_common+0xa8>
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7d1      	b.n	800598a <_printf_common+0x82>
	...

080059e8 <_printf_i>:
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	b08b      	sub	sp, #44	@ 0x2c
 80059ec:	9206      	str	r2, [sp, #24]
 80059ee:	000a      	movs	r2, r1
 80059f0:	3243      	adds	r2, #67	@ 0x43
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	9005      	str	r0, [sp, #20]
 80059f6:	9203      	str	r2, [sp, #12]
 80059f8:	7e0a      	ldrb	r2, [r1, #24]
 80059fa:	000c      	movs	r4, r1
 80059fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80059fe:	2a78      	cmp	r2, #120	@ 0x78
 8005a00:	d809      	bhi.n	8005a16 <_printf_i+0x2e>
 8005a02:	2a62      	cmp	r2, #98	@ 0x62
 8005a04:	d80b      	bhi.n	8005a1e <_printf_i+0x36>
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d100      	bne.n	8005a0c <_printf_i+0x24>
 8005a0a:	e0ba      	b.n	8005b82 <_printf_i+0x19a>
 8005a0c:	497a      	ldr	r1, [pc, #488]	@ (8005bf8 <_printf_i+0x210>)
 8005a0e:	9104      	str	r1, [sp, #16]
 8005a10:	2a58      	cmp	r2, #88	@ 0x58
 8005a12:	d100      	bne.n	8005a16 <_printf_i+0x2e>
 8005a14:	e08e      	b.n	8005b34 <_printf_i+0x14c>
 8005a16:	0025      	movs	r5, r4
 8005a18:	3542      	adds	r5, #66	@ 0x42
 8005a1a:	702a      	strb	r2, [r5, #0]
 8005a1c:	e022      	b.n	8005a64 <_printf_i+0x7c>
 8005a1e:	0010      	movs	r0, r2
 8005a20:	3863      	subs	r0, #99	@ 0x63
 8005a22:	2815      	cmp	r0, #21
 8005a24:	d8f7      	bhi.n	8005a16 <_printf_i+0x2e>
 8005a26:	f7fa fb77 	bl	8000118 <__gnu_thumb1_case_shi>
 8005a2a:	0016      	.short	0x0016
 8005a2c:	fff6001f 	.word	0xfff6001f
 8005a30:	fff6fff6 	.word	0xfff6fff6
 8005a34:	001ffff6 	.word	0x001ffff6
 8005a38:	fff6fff6 	.word	0xfff6fff6
 8005a3c:	fff6fff6 	.word	0xfff6fff6
 8005a40:	0036009f 	.word	0x0036009f
 8005a44:	fff6007e 	.word	0xfff6007e
 8005a48:	00b0fff6 	.word	0x00b0fff6
 8005a4c:	0036fff6 	.word	0x0036fff6
 8005a50:	fff6fff6 	.word	0xfff6fff6
 8005a54:	0082      	.short	0x0082
 8005a56:	0025      	movs	r5, r4
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	3542      	adds	r5, #66	@ 0x42
 8005a5c:	1d11      	adds	r1, r2, #4
 8005a5e:	6019      	str	r1, [r3, #0]
 8005a60:	6813      	ldr	r3, [r2, #0]
 8005a62:	702b      	strb	r3, [r5, #0]
 8005a64:	2301      	movs	r3, #1
 8005a66:	e09e      	b.n	8005ba6 <_printf_i+0x1be>
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	6809      	ldr	r1, [r1, #0]
 8005a6c:	1d02      	adds	r2, r0, #4
 8005a6e:	060d      	lsls	r5, r1, #24
 8005a70:	d50b      	bpl.n	8005a8a <_printf_i+0xa2>
 8005a72:	6806      	ldr	r6, [r0, #0]
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	da03      	bge.n	8005a82 <_printf_i+0x9a>
 8005a7a:	232d      	movs	r3, #45	@ 0x2d
 8005a7c:	9a03      	ldr	r2, [sp, #12]
 8005a7e:	4276      	negs	r6, r6
 8005a80:	7013      	strb	r3, [r2, #0]
 8005a82:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf8 <_printf_i+0x210>)
 8005a84:	270a      	movs	r7, #10
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	e018      	b.n	8005abc <_printf_i+0xd4>
 8005a8a:	6806      	ldr	r6, [r0, #0]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	0649      	lsls	r1, r1, #25
 8005a90:	d5f1      	bpl.n	8005a76 <_printf_i+0x8e>
 8005a92:	b236      	sxth	r6, r6
 8005a94:	e7ef      	b.n	8005a76 <_printf_i+0x8e>
 8005a96:	6808      	ldr	r0, [r1, #0]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	c940      	ldmia	r1!, {r6}
 8005a9c:	0605      	lsls	r5, r0, #24
 8005a9e:	d402      	bmi.n	8005aa6 <_printf_i+0xbe>
 8005aa0:	0640      	lsls	r0, r0, #25
 8005aa2:	d500      	bpl.n	8005aa6 <_printf_i+0xbe>
 8005aa4:	b2b6      	uxth	r6, r6
 8005aa6:	6019      	str	r1, [r3, #0]
 8005aa8:	4b53      	ldr	r3, [pc, #332]	@ (8005bf8 <_printf_i+0x210>)
 8005aaa:	270a      	movs	r7, #10
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	2a6f      	cmp	r2, #111	@ 0x6f
 8005ab0:	d100      	bne.n	8005ab4 <_printf_i+0xcc>
 8005ab2:	3f02      	subs	r7, #2
 8005ab4:	0023      	movs	r3, r4
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	3343      	adds	r3, #67	@ 0x43
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	60a3      	str	r3, [r4, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db06      	blt.n	8005ad2 <_printf_i+0xea>
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	9d03      	ldr	r5, [sp, #12]
 8005aca:	438a      	bics	r2, r1
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	4333      	orrs	r3, r6
 8005ad0:	d00c      	beq.n	8005aec <_printf_i+0x104>
 8005ad2:	9d03      	ldr	r5, [sp, #12]
 8005ad4:	0030      	movs	r0, r6
 8005ad6:	0039      	movs	r1, r7
 8005ad8:	f7fa fbae 	bl	8000238 <__aeabi_uidivmod>
 8005adc:	9b04      	ldr	r3, [sp, #16]
 8005ade:	3d01      	subs	r5, #1
 8005ae0:	5c5b      	ldrb	r3, [r3, r1]
 8005ae2:	702b      	strb	r3, [r5, #0]
 8005ae4:	0033      	movs	r3, r6
 8005ae6:	0006      	movs	r6, r0
 8005ae8:	429f      	cmp	r7, r3
 8005aea:	d9f3      	bls.n	8005ad4 <_printf_i+0xec>
 8005aec:	2f08      	cmp	r7, #8
 8005aee:	d109      	bne.n	8005b04 <_printf_i+0x11c>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	07db      	lsls	r3, r3, #31
 8005af4:	d506      	bpl.n	8005b04 <_printf_i+0x11c>
 8005af6:	6862      	ldr	r2, [r4, #4]
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	dc02      	bgt.n	8005b04 <_printf_i+0x11c>
 8005afe:	2330      	movs	r3, #48	@ 0x30
 8005b00:	3d01      	subs	r5, #1
 8005b02:	702b      	strb	r3, [r5, #0]
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	1b5b      	subs	r3, r3, r5
 8005b08:	6123      	str	r3, [r4, #16]
 8005b0a:	9b07      	ldr	r3, [sp, #28]
 8005b0c:	0021      	movs	r1, r4
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	9805      	ldr	r0, [sp, #20]
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	aa09      	add	r2, sp, #36	@ 0x24
 8005b16:	f7ff fef7 	bl	8005908 <_printf_common>
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d148      	bne.n	8005bb0 <_printf_i+0x1c8>
 8005b1e:	2001      	movs	r0, #1
 8005b20:	4240      	negs	r0, r0
 8005b22:	b00b      	add	sp, #44	@ 0x2c
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b26:	2220      	movs	r2, #32
 8005b28:	6809      	ldr	r1, [r1, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	6022      	str	r2, [r4, #0]
 8005b2e:	2278      	movs	r2, #120	@ 0x78
 8005b30:	4932      	ldr	r1, [pc, #200]	@ (8005bfc <_printf_i+0x214>)
 8005b32:	9104      	str	r1, [sp, #16]
 8005b34:	0021      	movs	r1, r4
 8005b36:	3145      	adds	r1, #69	@ 0x45
 8005b38:	700a      	strb	r2, [r1, #0]
 8005b3a:	6819      	ldr	r1, [r3, #0]
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	c940      	ldmia	r1!, {r6}
 8005b40:	0610      	lsls	r0, r2, #24
 8005b42:	d402      	bmi.n	8005b4a <_printf_i+0x162>
 8005b44:	0650      	lsls	r0, r2, #25
 8005b46:	d500      	bpl.n	8005b4a <_printf_i+0x162>
 8005b48:	b2b6      	uxth	r6, r6
 8005b4a:	6019      	str	r1, [r3, #0]
 8005b4c:	07d3      	lsls	r3, r2, #31
 8005b4e:	d502      	bpl.n	8005b56 <_printf_i+0x16e>
 8005b50:	2320      	movs	r3, #32
 8005b52:	4313      	orrs	r3, r2
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d001      	beq.n	8005b5e <_printf_i+0x176>
 8005b5a:	2710      	movs	r7, #16
 8005b5c:	e7aa      	b.n	8005ab4 <_printf_i+0xcc>
 8005b5e:	2220      	movs	r2, #32
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	4393      	bics	r3, r2
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	e7f8      	b.n	8005b5a <_printf_i+0x172>
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	680d      	ldr	r5, [r1, #0]
 8005b6c:	1d10      	adds	r0, r2, #4
 8005b6e:	6949      	ldr	r1, [r1, #20]
 8005b70:	6018      	str	r0, [r3, #0]
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	062e      	lsls	r6, r5, #24
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0x194>
 8005b78:	6019      	str	r1, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0x19a>
 8005b7c:	066d      	lsls	r5, r5, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0x190>
 8005b80:	8019      	strh	r1, [r3, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	9d03      	ldr	r5, [sp, #12]
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	e7bf      	b.n	8005b0a <_printf_i+0x122>
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	1d11      	adds	r1, r2, #4
 8005b8e:	6019      	str	r1, [r3, #0]
 8005b90:	6815      	ldr	r5, [r2, #0]
 8005b92:	2100      	movs	r1, #0
 8005b94:	0028      	movs	r0, r5
 8005b96:	6862      	ldr	r2, [r4, #4]
 8005b98:	f000 f856 	bl	8005c48 <memchr>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d001      	beq.n	8005ba4 <_printf_i+0x1bc>
 8005ba0:	1b40      	subs	r0, r0, r5
 8005ba2:	6060      	str	r0, [r4, #4]
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9a03      	ldr	r2, [sp, #12]
 8005bac:	7013      	strb	r3, [r2, #0]
 8005bae:	e7ac      	b.n	8005b0a <_printf_i+0x122>
 8005bb0:	002a      	movs	r2, r5
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	9906      	ldr	r1, [sp, #24]
 8005bb6:	9805      	ldr	r0, [sp, #20]
 8005bb8:	9d07      	ldr	r5, [sp, #28]
 8005bba:	47a8      	blx	r5
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d0ae      	beq.n	8005b1e <_printf_i+0x136>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	079b      	lsls	r3, r3, #30
 8005bc4:	d415      	bmi.n	8005bf2 <_printf_i+0x20a>
 8005bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc8:	68e0      	ldr	r0, [r4, #12]
 8005bca:	4298      	cmp	r0, r3
 8005bcc:	daa9      	bge.n	8005b22 <_printf_i+0x13a>
 8005bce:	0018      	movs	r0, r3
 8005bd0:	e7a7      	b.n	8005b22 <_printf_i+0x13a>
 8005bd2:	0022      	movs	r2, r4
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	9906      	ldr	r1, [sp, #24]
 8005bd8:	9805      	ldr	r0, [sp, #20]
 8005bda:	9e07      	ldr	r6, [sp, #28]
 8005bdc:	3219      	adds	r2, #25
 8005bde:	47b0      	blx	r6
 8005be0:	3001      	adds	r0, #1
 8005be2:	d09c      	beq.n	8005b1e <_printf_i+0x136>
 8005be4:	3501      	adds	r5, #1
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dcf0      	bgt.n	8005bd2 <_printf_i+0x1ea>
 8005bf0:	e7e9      	b.n	8005bc6 <_printf_i+0x1de>
 8005bf2:	2500      	movs	r5, #0
 8005bf4:	e7f7      	b.n	8005be6 <_printf_i+0x1fe>
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	08005f25 	.word	0x08005f25
 8005bfc:	08005f36 	.word	0x08005f36

08005c00 <memmove>:
 8005c00:	b510      	push	{r4, lr}
 8005c02:	4288      	cmp	r0, r1
 8005c04:	d902      	bls.n	8005c0c <memmove+0xc>
 8005c06:	188b      	adds	r3, r1, r2
 8005c08:	4298      	cmp	r0, r3
 8005c0a:	d308      	bcc.n	8005c1e <memmove+0x1e>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d007      	beq.n	8005c22 <memmove+0x22>
 8005c12:	5ccc      	ldrb	r4, [r1, r3]
 8005c14:	54c4      	strb	r4, [r0, r3]
 8005c16:	3301      	adds	r3, #1
 8005c18:	e7f9      	b.n	8005c0e <memmove+0xe>
 8005c1a:	5c8b      	ldrb	r3, [r1, r2]
 8005c1c:	5483      	strb	r3, [r0, r2]
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	d2fb      	bcs.n	8005c1a <memmove+0x1a>
 8005c22:	bd10      	pop	{r4, pc}

08005c24 <_sbrk_r>:
 8005c24:	2300      	movs	r3, #0
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	4d06      	ldr	r5, [pc, #24]	@ (8005c44 <_sbrk_r+0x20>)
 8005c2a:	0004      	movs	r4, r0
 8005c2c:	0008      	movs	r0, r1
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	f7fb fb76 	bl	8001320 <_sbrk>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d103      	bne.n	8005c40 <_sbrk_r+0x1c>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d000      	beq.n	8005c40 <_sbrk_r+0x1c>
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	20000328 	.word	0x20000328

08005c48 <memchr>:
 8005c48:	b2c9      	uxtb	r1, r1
 8005c4a:	1882      	adds	r2, r0, r2
 8005c4c:	4290      	cmp	r0, r2
 8005c4e:	d101      	bne.n	8005c54 <memchr+0xc>
 8005c50:	2000      	movs	r0, #0
 8005c52:	4770      	bx	lr
 8005c54:	7803      	ldrb	r3, [r0, #0]
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d0fb      	beq.n	8005c52 <memchr+0xa>
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	e7f6      	b.n	8005c4c <memchr+0x4>

08005c5e <memcpy>:
 8005c5e:	2300      	movs	r3, #0
 8005c60:	b510      	push	{r4, lr}
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d100      	bne.n	8005c68 <memcpy+0xa>
 8005c66:	bd10      	pop	{r4, pc}
 8005c68:	5ccc      	ldrb	r4, [r1, r3]
 8005c6a:	54c4      	strb	r4, [r0, r3]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	e7f8      	b.n	8005c62 <memcpy+0x4>

08005c70 <_realloc_r>:
 8005c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c72:	0006      	movs	r6, r0
 8005c74:	000c      	movs	r4, r1
 8005c76:	0015      	movs	r5, r2
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d105      	bne.n	8005c88 <_realloc_r+0x18>
 8005c7c:	0011      	movs	r1, r2
 8005c7e:	f7ff fc55 	bl	800552c <_malloc_r>
 8005c82:	0004      	movs	r4, r0
 8005c84:	0020      	movs	r0, r4
 8005c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	d103      	bne.n	8005c94 <_realloc_r+0x24>
 8005c8c:	f7ff fbe2 	bl	8005454 <_free_r>
 8005c90:	002c      	movs	r4, r5
 8005c92:	e7f7      	b.n	8005c84 <_realloc_r+0x14>
 8005c94:	f000 f81c 	bl	8005cd0 <_malloc_usable_size_r>
 8005c98:	0007      	movs	r7, r0
 8005c9a:	4285      	cmp	r5, r0
 8005c9c:	d802      	bhi.n	8005ca4 <_realloc_r+0x34>
 8005c9e:	0843      	lsrs	r3, r0, #1
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	d3ef      	bcc.n	8005c84 <_realloc_r+0x14>
 8005ca4:	0029      	movs	r1, r5
 8005ca6:	0030      	movs	r0, r6
 8005ca8:	f7ff fc40 	bl	800552c <_malloc_r>
 8005cac:	9001      	str	r0, [sp, #4]
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d101      	bne.n	8005cb6 <_realloc_r+0x46>
 8005cb2:	9c01      	ldr	r4, [sp, #4]
 8005cb4:	e7e6      	b.n	8005c84 <_realloc_r+0x14>
 8005cb6:	002a      	movs	r2, r5
 8005cb8:	42bd      	cmp	r5, r7
 8005cba:	d900      	bls.n	8005cbe <_realloc_r+0x4e>
 8005cbc:	003a      	movs	r2, r7
 8005cbe:	0021      	movs	r1, r4
 8005cc0:	9801      	ldr	r0, [sp, #4]
 8005cc2:	f7ff ffcc 	bl	8005c5e <memcpy>
 8005cc6:	0021      	movs	r1, r4
 8005cc8:	0030      	movs	r0, r6
 8005cca:	f7ff fbc3 	bl	8005454 <_free_r>
 8005cce:	e7f0      	b.n	8005cb2 <_realloc_r+0x42>

08005cd0 <_malloc_usable_size_r>:
 8005cd0:	1f0b      	subs	r3, r1, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1f18      	subs	r0, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da01      	bge.n	8005cde <_malloc_usable_size_r+0xe>
 8005cda:	580b      	ldr	r3, [r1, r0]
 8005cdc:	18c0      	adds	r0, r0, r3
 8005cde:	4770      	bx	lr

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
