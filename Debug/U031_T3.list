
U031_T3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005ee0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  08005f3c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005f3c  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c0b  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002503  00000000  00000000  00018c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0001b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7d  00000000  00000000  0001c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a69f  00000000  00000000  0001cbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171e  00000000  00000000  0003727c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aabc2  00000000  00000000  0004899a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f355c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  000f35a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f6fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c68 	.word	0x08005c68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005c68 	.word	0x08005c68

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	2201      	movs	r2, #1
 8000652:	431a      	orrs	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	611a      	str	r2, [r3, #16]
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	2206      	movs	r2, #6
 8000670:	4393      	bics	r3, r2
 8000672:	001a      	movs	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	431a      	orrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	611a      	str	r2, [r3, #16]
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	0c1b      	lsrs	r3, r3, #16
 8000694:	041a      	lsls	r2, r3, #16
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	431a      	orrs	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	619a      	str	r2, [r3, #24]
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <LL_LPTIM_OC_SetCompareCH1>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  CompareValue Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_OC_SetCompareCH1(LPTIM_TypeDef *LPTIMx, uint32_t CompareValue)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CCR1, LPTIM_CCR1_CCR1, CompareValue);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	0c1b      	lsrs	r3, r3, #16
 80006b6:	041a      	lsls	r2, r3, #16
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	615a      	str	r2, [r3, #20]
}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <LL_LPTIM_OC_GetCompareCH1>:
  * @rmtoll CCR1          CCR1           LL_LPTIM_OC_GetCompareCH1
  * @param  LPTIMx Low-Power Timer instance
  * @retval CompareValue Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_LPTIM_OC_GetCompareCH1(const LPTIM_TypeDef *LPTIMx)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(LPTIMx->CCR1, LPTIM_CCR1_CCR1));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	041b      	lsls	r3, r3, #16
 80006d6:	0c1b      	lsrs	r3, r3, #16
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <LL_LPTIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_LPTIM_GetCounter
  * @param  LPTIMx Low-Power Timer instance
  * @retval Counter value
  */
__STATIC_INLINE uint32_t LL_LPTIM_GetCounter(const LPTIM_TypeDef *LPTIMx)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(LPTIMx->CNT, LPTIM_CNT_CNT));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c1b      	lsrs	r3, r3, #16
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <LL_LPTIM_SetEncoderMode>:
  *         @arg @ref LL_LPTIM_ENCODER_MODE_FALLING
  *         @arg @ref LL_LPTIM_ENCODER_MODE_RISING_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetEncoderMode(LPTIM_TypeDef *LPTIMx, uint32_t EncoderMode)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKPOL, EncoderMode);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2206      	movs	r2, #6
 8000708:	4393      	bics	r3, r2
 800070a:	001a      	movs	r2, r3
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	431a      	orrs	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	60da      	str	r2, [r3, #12]
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}

0800071c <LL_LPTIM_EnableEncoderMode>:
  * @rmtoll CFGR         ENC           LL_LPTIM_EnableEncoderMode
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableEncoderMode(LPTIM_TypeDef *LPTIMx)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CFGR, LPTIM_CFGR_ENC);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	0452      	lsls	r2, r2, #17
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}

0800073a <LL_LPTIM_IsActiveFlag_UP>:
  * @rmtoll ISR          UP            LL_LPTIM_IsActiveFlag_UP
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_UP(const LPTIM_TypeDef *LPTIMx)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_UP) == LPTIM_ISR_UP) ? 1UL : 0UL));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2220      	movs	r2, #32
 8000748:	4013      	ands	r3, r2
 800074a:	2b20      	cmp	r3, #32
 800074c:	d101      	bne.n	8000752 <LL_LPTIM_IsActiveFlag_UP+0x18>
 800074e:	2301      	movs	r3, #1
 8000750:	e000      	b.n	8000754 <LL_LPTIM_IsActiveFlag_UP+0x1a>
 8000752:	2300      	movs	r3, #0
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}

0800075c <LL_LPTIM_IsActiveFlag_DOWN>:
  * @rmtoll ISR          DOWN          LL_LPTIM_IsActiveFlag_DOWN
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_DOWN(const LPTIM_TypeDef *LPTIMx)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_DOWN) == LPTIM_ISR_DOWN) ? 1UL : 0UL));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2240      	movs	r2, #64	@ 0x40
 800076a:	4013      	ands	r3, r2
 800076c:	2b40      	cmp	r3, #64	@ 0x40
 800076e:	d101      	bne.n	8000774 <LL_LPTIM_IsActiveFlag_DOWN+0x18>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <LL_LPTIM_IsActiveFlag_DOWN+0x1a>
 8000774:	2300      	movs	r3, #0
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fe28 	bl	80013da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f843 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9ad 	bl	8000aec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 f95d 	bl	8000a50 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8000796:	f000 f885 	bl	80008a4 <MX_LPTIM1_Init>
  MX_RTC_Init();
 800079a:	f000 f8bb 	bl	8000914 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  TRACSENS_StartCounting();
 800079e:	f000 fadf 	bl	8000d60 <TRACSENS_StartCounting>

	if (HAL_LPTIM_Counter_Start_IT(&hlptim1) != HAL_OK)
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <main+0x88>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fa75 	bl	8001c94 <HAL_LPTIM_Counter_Start_IT>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <main+0x32>
	{
	  Error_Handler();
 80007ae:	f000 fc1b 	bl	8000fe8 <Error_Handler>
	}

	/* Disable autoreload write complete interrupt */
	__HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_ARROK);
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <main+0x88>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <main+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2110      	movs	r1, #16
 80007be:	438a      	bics	r2, r1
 80007c0:	609a      	str	r2, [r3, #8]

	uint32_t value = LL_LPTIM_OC_GetCompareCH1(LPTIM1);
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <main+0x8c>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff7f 	bl	80006c8 <LL_LPTIM_OC_GetCompareCH1>
 80007ca:	0003      	movs	r3, r0
 80007cc:	607b      	str	r3, [r7, #4]

	UART_Printf("Main start %d\n\r", value);
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <main+0x90>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fbdb 	bl	8000f90 <UART_Printf>
	TRACSENS_DisplayInfo();
 80007da:	f000 f9dd 	bl	8000b98 <TRACSENS_DisplayInfo>
	HAL_Delay(1000);
 80007de:	23fa      	movs	r3, #250	@ 0xfa
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fe76 	bl	80014d4 <HAL_Delay>

	int32_t reading = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  reading = TRACSENS_GetCounter();
 80007ec:	f000 f9f4 	bl	8000bd8 <TRACSENS_GetCounter>
 80007f0:	0003      	movs	r3, r0
 80007f2:	603b      	str	r3, [r7, #0]
  //	  UART_Printf("reading %d %d\r\n",reading, lCntrMultiplier);
	  TRACSENS_DisplayInfo();
 80007f4:	f000 f9d0 	bl	8000b98 <TRACSENS_DisplayInfo>
	  HAL_Delay(2000);
 80007f8:	23fa      	movs	r3, #250	@ 0xfa
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fe69 	bl	80014d4 <HAL_Delay>
	  reading = TRACSENS_GetCounter();
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	e7f2      	b.n	80007ec <main+0x6c>
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	20000078 	.word	0x20000078
 800080c:	40007c00 	.word	0x40007c00
 8000810:	08005c80 	.word	0x08005c80

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b097      	sub	sp, #92	@ 0x5c
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	2410      	movs	r4, #16
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2348      	movs	r3, #72	@ 0x48
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f004 fda5 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f004 fd9e 	bl	8005374 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fe5d 	bl	80024fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	220a      	movs	r2, #10
 8000846:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2280      	movs	r2, #128	@ 0x80
 800084c:	0052      	lsls	r2, r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2240      	movs	r2, #64	@ 0x40
 8000854:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2201      	movs	r2, #1
 800085a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	f001 feb5 	bl	80025d4 <HAL_RCC_OscConfig>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800086e:	f000 fbbb 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	003b      	movs	r3, r7
 8000874:	2207      	movs	r2, #7
 8000876:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000878:	003b      	movs	r3, r7
 800087a:	2201      	movs	r2, #1
 800087c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	003b      	movs	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000884:	003b      	movs	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088a:	003b      	movs	r3, r7
 800088c:	2101      	movs	r1, #1
 800088e:	0018      	movs	r0, r3
 8000890:	f002 fa86 	bl	8002da0 <HAL_RCC_ClockConfig>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000898:	f000 fba6 	bl	8000fe8 <Error_Handler>
  }
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b017      	add	sp, #92	@ 0x5c
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <MX_LPTIM1_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008c8:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <MX_LPTIM1_Init+0x6c>)
 80008ca:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 100;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008ce:	2264      	movs	r2, #100	@ 0x64
 80008d0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	0412      	lsls	r2, r2, #16
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <MX_LPTIM1_Init+0x64>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 f879 	bl	80019ec <HAL_LPTIM_Init>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 80008fe:	f000 fb73 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078
 800090c:	40007c00 	.word	0x40007c00
 8000910:	0000ffff 	.word	0x0000ffff

08000914 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b092      	sub	sp, #72	@ 0x48
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800091a:	2334      	movs	r3, #52	@ 0x34
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	2314      	movs	r3, #20
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f004 fd25 	bl	8005374 <memset>
  RTC_DateTypeDef sDate = {0};
 800092a:	2330      	movs	r3, #48	@ 0x30
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000932:	003b      	movs	r3, r7
 8000934:	0018      	movs	r0, r3
 8000936:	2330      	movs	r3, #48	@ 0x30
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f004 fd1a 	bl	8005374 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000940:	4b41      	ldr	r3, [pc, #260]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000942:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <MX_RTC_Init+0x138>)
 8000944:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000946:	4b40      	ldr	r3, [pc, #256]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800094c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <MX_RTC_Init+0x134>)
 800094e:	227f      	movs	r2, #127	@ 0x7f
 8000950:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000952:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000954:	22ff      	movs	r2, #255	@ 0xff
 8000956:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000958:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <MX_RTC_Init+0x134>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800095e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000964:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800096a:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <MX_RTC_Init+0x134>)
 800096c:	2280      	movs	r2, #128	@ 0x80
 800096e:	05d2      	lsls	r2, r2, #23
 8000970:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000972:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000978:	4b33      	ldr	r3, [pc, #204]	@ (8000a48 <MX_RTC_Init+0x134>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800097e:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000980:	0018      	movs	r0, r3
 8000982:	f003 faed 	bl	8003f60 <HAL_RTC_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_RTC_Init+0x7a>
  {
    Error_Handler();
 800098a:	f000 fb2d 	bl	8000fe8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800098e:	2134      	movs	r1, #52	@ 0x34
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009ae:	1879      	adds	r1, r7, r1
 80009b0:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <MX_RTC_Init+0x134>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	0018      	movs	r0, r3
 80009b6:	f003 fb79 	bl	80040ac <HAL_RTC_SetTime>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80009be:	f000 fb13 	bl	8000fe8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009c2:	2130      	movs	r1, #48	@ 0x30
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2201      	movs	r2, #1
 80009d4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2225      	movs	r2, #37	@ 0x25
 80009da:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009dc:	1879      	adds	r1, r7, r1
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_RTC_Init+0x134>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 fc22 	bl	800422c <HAL_RTC_SetDate>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80009ec:	f000 fafc 	bl	8000fe8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 80009fc:	003b      	movs	r3, r7
 80009fe:	2210      	movs	r2, #16
 8000a00:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a02:	003b      	movs	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2224      	movs	r2, #36	@ 0x24
 8000a1e:	2101      	movs	r1, #1
 8000a20:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a2a:	0039      	movs	r1, r7
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_RTC_Init+0x134>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	0018      	movs	r0, r3
 8000a32:	f003 fca1 	bl	8004378 <HAL_RTC_SetAlarm_IT>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000a3a:	f000 fad5 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b012      	add	sp, #72	@ 0x48
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000110 	.word	0x20000110
 8000a4c:	40002800 	.word	0x40002800

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a56:	4a24      	ldr	r2, [pc, #144]	@ (8000ae8 <MX_USART2_UART_Init+0x98>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a5c:	22e1      	movs	r2, #225	@ 0xe1
 8000a5e:	0252      	lsls	r2, r2, #9
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 fe2e 	bl	80046fc <HAL_UART_Init>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 faa0 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	0018      	movs	r0, r3
 8000aae:	f004 fb47 	bl	8005140 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 fa97 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f004 fb7e 	bl	80051c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac8:	f000 fa8e 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <MX_USART2_UART_Init+0x94>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 fafc 	bl	80050cc <HAL_UARTEx_DisableFifoMode>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fa86 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	20000140 	.word	0x20000140
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b089      	sub	sp, #36	@ 0x24
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	240c      	movs	r4, #12
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2314      	movs	r3, #20
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f004 fc39 	bl	8005374 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <MX_GPIO_Init+0xa4>)
 8000b04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b06:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_GPIO_Init+0xa4>)
 8000b08:	2104      	movs	r1, #4
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0xa4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	2204      	movs	r2, #4
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_GPIO_Init+0xa4>)
 8000b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_GPIO_Init+0xa4>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_GPIO_Init+0xa4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b32:	23a0      	movs	r3, #160	@ 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 ff38 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2280      	movs	r2, #128	@ 0x80
 8000b44:	0192      	lsls	r2, r2, #6
 8000b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <MX_GPIO_Init+0xa8>)
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0010      	movs	r0, r2
 8000b5c:	f000 fdbc 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b60:	0021      	movs	r1, r4
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2220      	movs	r2, #32
 8000b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	187a      	adds	r2, r7, r1
 8000b7c:	23a0      	movs	r3, #160	@ 0xa0
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fda8 	bl	80016d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b009      	add	sp, #36	@ 0x24
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	50000800 	.word	0x50000800

08000b98 <TRACSENS_DisplayInfo>:

/* USER CODE BEGIN 4 */


void TRACSENS_DisplayInfo(void)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af02      	add	r7, sp, #8
	static int32_t _prevPulse= 0;
	int32_t _currPulse= TRACSENS_GetCounter();
 8000b9e:	f000 f81b 	bl	8000bd8 <TRACSENS_GetCounter>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	607b      	str	r3, [r7, #4]
//	if(_prevPulse!= _currPulse)
//	{
//		_prevPulse= _currPulse;

		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
				_currPulse, pConfig->rteErrorPatternCount, pConfig->rteErrorPatternState, pConfig->rteErrorPatternPreviousPulse);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <TRACSENS_DisplayInfo+0x38>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
 8000baa:	68da      	ldr	r2, [r3, #12]
				_currPulse, pConfig->rteErrorPatternCount, pConfig->rteErrorPatternState, pConfig->rteErrorPatternPreviousPulse);
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <TRACSENS_DisplayInfo+0x38>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	7c5b      	ldrb	r3, [r3, #17]
		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
 8000bb2:	001c      	movs	r4, r3
				_currPulse, pConfig->rteErrorPatternCount, pConfig->rteErrorPatternState, pConfig->rteErrorPatternPreviousPulse);
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <TRACSENS_DisplayInfo+0x38>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
		UART_Printf("#stat:mag2: display > curr: %d errCnt: %d errState: %d errPulse: %d\r\n",
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <TRACSENS_DisplayInfo+0x3c>)
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	0023      	movs	r3, r4
 8000bc2:	f000 f9e5 	bl	8000f90 <UART_Printf>
//	}
}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b003      	add	sp, #12
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	200001e4 	.word	0x200001e4
 8000bd4:	08005c90 	.word	0x08005c90

08000bd8 <TRACSENS_GetCounter>:

static int32_t TRACSENS_GetCounter(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	int32_t _value;
    do/* 2 consecutive readings need to be the same*/
    {
    	_value= LL_LPTIM_GetCounter(LPTIM1);
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <TRACSENS_GetCounter+0x2c>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fd7d 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000be6:	0003      	movs	r3, r0
 8000be8:	607b      	str	r3, [r7, #4]
    }while(LL_LPTIM_GetCounter(LPTIM1)!= _value);
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <TRACSENS_GetCounter+0x2c>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd77 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d1f1      	bne.n	8000bde <TRACSENS_GetCounter+0x6>
//		_value= 0xFFFF& ((TRACSENS_CFG_AUTORELOAD_VALUE+ 1)- _value);
//	}
//
//    _value+= (lCntrMultiplier* (TRACSENS_CFG_AUTORELOAD_VALUE+ 1));

    return _value;
 8000bfa:	687b      	ldr	r3, [r7, #4]
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40007c00 	.word	0x40007c00

08000c08 <TRACSENS_CompareCallback>:

void TRACSENS_CompareCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_CompareCallback\n\r");
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <TRACSENS_CompareCallback+0x28>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 f9bc 	bl	8000f90 <UART_Printf>
	if(UNKNOWN_CounterDirection== eCounterDirection)/*initially we don't know. we choose forward cos this compare confirming it forward*/
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <TRACSENS_CompareCallback+0x2c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <TRACSENS_CompareCallback+0x1e>
	{
		eCounterDirection= FORWARD_CounterDirection;
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <TRACSENS_CompareCallback+0x2c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
	}

	//DBG_Print("CompareCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	08005cd8 	.word	0x08005cd8
 8000c34:	200001d8 	.word	0x200001d8

08000c38 <TRACSENS_CounterChangedToUpCallback>:

void TRACSENS_CounterChangedToUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_CounterChangedToUpCallback\n\r");
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <TRACSENS_CounterChangedToUpCallback+0x2c>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 f9a4 	bl	8000f90 <UART_Printf>
	eCounterDirection= FORWARD_CounterDirection;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <TRACSENS_CounterChangedToUpCallback+0x30>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]

	if(true== pConfig->enableErrorPatternCheck)
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <TRACSENS_CounterChangedToUpCallback+0x34>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <TRACSENS_CounterChangedToUpCallback+0x24>
	{
		TRACSENS_ChangedToUpErrorHandling();
 8000c58:	f000 f90c 	bl	8000e74 <TRACSENS_ChangedToUpErrorHandling>
	}

	//DBG_Print("CounterChangedToUpCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08005cf4 	.word	0x08005cf4
 8000c68:	200001d8 	.word	0x200001d8
 8000c6c:	200001e4 	.word	0x200001e4

08000c70 <TRACSENS_CounterChangedToDownCallback>:

void TRACSENS_CounterChangedToDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_CounterChangedToDownCallback\n\r");
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <TRACSENS_CounterChangedToDownCallback+0x2c>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f988 	bl	8000f90 <UART_Printf>
	eCounterDirection= BACKWARD_CounterDirection;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <TRACSENS_CounterChangedToDownCallback+0x30>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	701a      	strb	r2, [r3, #0]

	if(true== pConfig->enableErrorPatternCheck)
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <TRACSENS_CounterChangedToDownCallback+0x34>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <TRACSENS_CounterChangedToDownCallback+0x24>
	{
		TRACSENS_ChangedToDownErrorHandling();
 8000c90:	f000 f900 	bl	8000e94 <TRACSENS_ChangedToDownErrorHandling>
	}

	//DBG_Print("CounterChangedToDownCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08005d1c 	.word	0x08005d1c
 8000ca0:	200001d8 	.word	0x200001d8
 8000ca4:	200001e4 	.word	0x200001e4

08000ca8 <TRACSENS_AutoReloadMatchCallback>:

void TRACSENS_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	UART_Printf("TRACSENS_AutoReloadMatchCallback\n\r");
 8000cb0:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <TRACSENS_AutoReloadMatchCallback+0xa4>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 f96c 	bl	8000f90 <UART_Printf>
	if(UNKNOWN_CounterDirection== eCounterDirection)/*initially we don't know. we choose backward cos we have a compare int to choose forward*/
 8000cb8:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <TRACSENS_AutoReloadMatchCallback+0x1e>
	{
		eCounterDirection= BACKWARD_CounterDirection;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	701a      	strb	r2, [r3, #0]
	}

	/*check and set cos sometimes direction interrupt will occur simultaneously with ARR interrupt, but served after ARR*/
	if(LL_LPTIM_IsActiveFlag_UP(LPTIM1))
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <TRACSENS_AutoReloadMatchCallback+0xac>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff fd36 	bl	800073a <LL_LPTIM_IsActiveFlag_UP>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d00f      	beq.n	8000cf2 <TRACSENS_AutoReloadMatchCallback+0x4a>
	{
		if(NORMAL_CounterMode== eMode)
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <TRACSENS_AutoReloadMatchCallback+0x3a>
		{
			eCounterDirection= FORWARD_CounterDirection;
 8000cda:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e01c      	b.n	8000d1c <TRACSENS_AutoReloadMatchCallback+0x74>
		}
		else if(INVERT_CounterMode== eMode)
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d118      	bne.n	8000d1c <TRACSENS_AutoReloadMatchCallback+0x74>
		{
			eCounterDirection= BACKWARD_CounterDirection;
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e014      	b.n	8000d1c <TRACSENS_AutoReloadMatchCallback+0x74>
		}
	}
	else if(LL_LPTIM_IsActiveFlag_DOWN(LPTIM1))
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <TRACSENS_AutoReloadMatchCallback+0xac>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fd31 	bl	800075c <LL_LPTIM_IsActiveFlag_DOWN>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d00e      	beq.n	8000d1c <TRACSENS_AutoReloadMatchCallback+0x74>
	{
		if(NORMAL_CounterMode== eMode)
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <TRACSENS_AutoReloadMatchCallback+0x66>
		{
			eCounterDirection= BACKWARD_CounterDirection;
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e006      	b.n	8000d1c <TRACSENS_AutoReloadMatchCallback+0x74>
		}
		else if(INVERT_CounterMode== eMode)
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <TRACSENS_AutoReloadMatchCallback+0xb0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d102      	bne.n	8000d1c <TRACSENS_AutoReloadMatchCallback+0x74>
		{
			eCounterDirection= FORWARD_CounterDirection;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(FORWARD_CounterDirection== eCounterDirection)
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <TRACSENS_AutoReloadMatchCallback+0x88>
	{
		lCntrMultiplier++;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d2c:	601a      	str	r2, [r3, #0]
	{
		lCntrMultiplier--;
	}

	//DBG_Print("AutoReloadMatchCallback:%d, multiplier:%d \r\n", eCounterDirection, lCntrMultiplier);
}
 8000d2e:	e008      	b.n	8000d42 <TRACSENS_AutoReloadMatchCallback+0x9a>
	else if(BACKWARD_CounterDirection== eCounterDirection)
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <TRACSENS_AutoReloadMatchCallback+0xa8>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d104      	bne.n	8000d42 <TRACSENS_AutoReloadMatchCallback+0x9a>
		lCntrMultiplier--;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <TRACSENS_AutoReloadMatchCallback+0xb4>)
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	08005d44 	.word	0x08005d44
 8000d50:	200001d8 	.word	0x200001d8
 8000d54:	40007c00 	.word	0x40007c00
 8000d58:	200001d4 	.word	0x200001d4
 8000d5c:	200001dc 	.word	0x200001dc

08000d60 <TRACSENS_StartCounting>:
void TRACSENS_StartCounting()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	TRACSENS_Power(true);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 f909 	bl	8000f7c <TRACSENS_Power>

	if(NORMAL_CounterMode== eMode)
 8000d6a:	4b38      	ldr	r3, [pc, #224]	@ (8000e4c <TRACSENS_StartCounting+0xec>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d118      	bne.n	8000da4 <TRACSENS_StartCounting+0x44>
	{
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, TRACSENS_CompareCallback);
 8000d72:	4a37      	ldr	r2, [pc, #220]	@ (8000e50 <TRACSENS_StartCounting+0xf0>)
 8000d74:	4b37      	ldr	r3, [pc, #220]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000d76:	2102      	movs	r1, #2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f001 fa9d 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_AUTORELOAD_MATCH_CB_ID, TRACSENS_AutoReloadMatchCallback);
 8000d7e:	4a36      	ldr	r2, [pc, #216]	@ (8000e58 <TRACSENS_StartCounting+0xf8>)
 8000d80:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000d82:	2103      	movs	r1, #3
 8000d84:	0018      	movs	r0, r3
 8000d86:	f001 fa97 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_UP_CB_ID, TRACSENS_CounterChangedToUpCallback);
 8000d8a:	4a34      	ldr	r2, [pc, #208]	@ (8000e5c <TRACSENS_StartCounting+0xfc>)
 8000d8c:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000d8e:	2107      	movs	r1, #7
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 fa91 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_DOWN_CB_ID, TRACSENS_CounterChangedToDownCallback);
 8000d96:	4a32      	ldr	r2, [pc, #200]	@ (8000e60 <TRACSENS_StartCounting+0x100>)
 8000d98:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f001 fa8b 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
 8000da2:	e01b      	b.n	8000ddc <TRACSENS_StartCounting+0x7c>
	}
	else if(INVERT_CounterMode== eMode)
 8000da4:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <TRACSENS_StartCounting+0xec>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d117      	bne.n	8000ddc <TRACSENS_StartCounting+0x7c>
	{
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, TRACSENS_CompareCallback);
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <TRACSENS_StartCounting+0xf0>)
 8000dae:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000db0:	2102      	movs	r1, #2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 fa80 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_AUTORELOAD_MATCH_CB_ID, TRACSENS_AutoReloadMatchCallback);
 8000db8:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <TRACSENS_StartCounting+0xf8>)
 8000dba:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 fa7a 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_UP_CB_ID, TRACSENS_CounterChangedToDownCallback);
 8000dc4:	4a26      	ldr	r2, [pc, #152]	@ (8000e60 <TRACSENS_StartCounting+0x100>)
 8000dc6:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000dc8:	2107      	movs	r1, #7
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 fa74 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
		HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_DOWN_CB_ID, TRACSENS_CounterChangedToUpCallback);
 8000dd0:	4a22      	ldr	r2, [pc, #136]	@ (8000e5c <TRACSENS_StartCounting+0xfc>)
 8000dd2:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <TRACSENS_StartCounting+0xf4>)
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 fa6e 	bl	80022b8 <HAL_LPTIM_RegisterCallback>
	}

	uwCompareValue=0x01;/*used once to detect direction*/
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <TRACSENS_StartCounting+0x104>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	801a      	strh	r2, [r3, #0]
//	LL_LPTIM_EnableIT_CC1(LPTIM1);		/*Enable the Compare Match interrupt for Channel 1 */
//	LL_LPTIM_EnableIT_ARRM(LPTIM1); 	/*Enable autoreload match interrupt (ARRMIE).*/
//	LL_LPTIM_EnableIT_UP(LPTIM1);		/*Enable direction change to up interrupt (UPIE).*/
//	LL_LPTIM_EnableIT_DOWN(LPTIM1);		/*Enable direction change to down interrupt (DOWNIE).*/

	LL_LPTIM_OC_SetCompareCH1(LPTIM1, 11);
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000de4:	210b      	movs	r1, #11
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff fc5d 	bl	80006a6 <LL_LPTIM_OC_SetCompareCH1>
//	LL_LPTIM_SetCompare(LPTIM1, uwCompareValue);/*we need this to know the initial pulse direction(which we don't know after reset)*/

	LL_LPTIM_SetEncoderMode(LPTIM1, LL_LPTIM_ENCODER_MODE_RISING_FALLING);
 8000dec:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000dee:	2104      	movs	r1, #4
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fc81 	bl	80006f8 <LL_LPTIM_SetEncoderMode>
    LL_LPTIM_EnableEncoderMode(LPTIM1);
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fc8f 	bl	800071c <LL_LPTIM_EnableEncoderMode>
    LL_LPTIM_Enable(LPTIM1);
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff fc1f 	bl	8000644 <LL_LPTIM_Enable>
	LL_LPTIM_SetAutoReload(LPTIM1, TRACSENS_CFG_AUTORELOAD_VALUE);
 8000e06:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <TRACSENS_StartCounting+0x10c>)
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fc39 	bl	8000684 <LL_LPTIM_SetAutoReload>
    LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000e14:	2104      	movs	r1, #4
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fc22 	bl	8000660 <LL_LPTIM_StartCounter>
    //LPTIM_FeedExternalClock();/*needed when using external clock in counter mode*/

    /*this is needed during power up as we always get extra pulse a bit while after start counting*/
	HAL_Delay(1);	/*when reboot, we get extra pulse*/
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f000 fb59 	bl	80014d4 <HAL_Delay>

	do/* 2 consecutive readings need to be the same*/
    {
    	lCntrErrorReading= LL_LPTIM_GetCounter(LPTIM1);
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fc5b 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <TRACSENS_StartCounting+0x110>)
 8000e30:	601a      	str	r2, [r3, #0]
    }while(LL_LPTIM_GetCounter(LPTIM1)!= lCntrErrorReading);
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <TRACSENS_StartCounting+0x108>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fc53 	bl	80006e0 <LL_LPTIM_GetCounter>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <TRACSENS_StartCounting+0x110>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d1ee      	bne.n	8000e22 <TRACSENS_StartCounting+0xc2>

	//DBG_Print("lCntrErrorReading: %d.\r\n", lCntrErrorReading);
}
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200001d4 	.word	0x200001d4
 8000e50:	08000c09 	.word	0x08000c09
 8000e54:	20000078 	.word	0x20000078
 8000e58:	08000ca9 	.word	0x08000ca9
 8000e5c:	08000c39 	.word	0x08000c39
 8000e60:	08000c71 	.word	0x08000c71
 8000e64:	200001d6 	.word	0x200001d6
 8000e68:	40007c00 	.word	0x40007c00
 8000e6c:	0000ffff 	.word	0x0000ffff
 8000e70:	200001e0 	.word	0x200001e0

08000e74 <TRACSENS_ChangedToUpErrorHandling>:

void TRACSENS_ChangedToUpErrorHandling(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	if(BWD_EXPECTING_FWD_CounterErrorState== pConfig->rteErrorPatternState)
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <TRACSENS_ChangedToUpErrorHandling+0x1c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	7c5b      	ldrb	r3, [r3, #17]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d103      	bne.n	8000e8a <TRACSENS_ChangedToUpErrorHandling+0x16>
	{
		pConfig->rteErrorPatternState= FWD_EXPECTING_BWD_END_CounterErrorState;
 8000e82:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <TRACSENS_ChangedToUpErrorHandling+0x1c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2203      	movs	r2, #3
 8000e88:	745a      	strb	r2, [r3, #17]
	}

}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001e4 	.word	0x200001e4

08000e94 <TRACSENS_ChangedToDownErrorHandling>:

void TRACSENS_ChangedToDownErrorHandling(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	int32_t _curr= TRACSENS_GetCounter();
 8000e9a:	f7ff fe9d 	bl	8000bd8 <TRACSENS_GetCounter>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	607b      	str	r3, [r7, #4]
	if(0!= (_curr- pConfig->rteErrorPatternPreviousPulse))
 8000ea2:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d013      	beq.n	8000ed6 <TRACSENS_ChangedToDownErrorHandling+0x42>
	{
		pConfig->rteErrorPatternState= NONE_CounterErrorState; /*reset if we get real pulse inbetween error pattern*/
 8000eae:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	745a      	strb	r2, [r3, #17]
		pConfig->rteErrorPatternJustStarted= false;
 8000eb6:	4b30      	ldr	r3, [pc, #192]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	761a      	strb	r2, [r3, #24]
		if(false== pConfig->rteErrorPatternCompensationStarted)
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	7c1b      	ldrb	r3, [r3, #16]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4053      	eors	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <TRACSENS_ChangedToDownErrorHandling+0x42>
		{
			pConfig->rteErrorPatternCount= 0;/*we need consecutive error pattern to mark the meter as erroneous that we can handle*/
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
			//DBG_Print("#stat:mag2: errorPatternCountCleared >\r\n");
		}
	}
	if(NONE_CounterErrorState== pConfig->rteErrorPatternState)
 8000ed6:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	7c5b      	ldrb	r3, [r3, #17]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d108      	bne.n	8000ef2 <TRACSENS_ChangedToDownErrorHandling+0x5e>
	{
		pConfig->rteErrorPatternJustStarted= true;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	761a      	strb	r2, [r3, #24]
		pConfig->rteErrorPatternState= BWD_EXPECTING_FWD_CounterErrorState;
 8000ee8:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2202      	movs	r2, #2
 8000eee:	745a      	strb	r2, [r3, #17]
 8000ef0:	e03a      	b.n	8000f68 <TRACSENS_ChangedToDownErrorHandling+0xd4>
	}
	else if(FWD_EXPECTING_BWD_CounterErrorState== pConfig->rteErrorPatternState)
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7c5b      	ldrb	r3, [r3, #17]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d104      	bne.n	8000f06 <TRACSENS_ChangedToDownErrorHandling+0x72>
	{
		pConfig->rteErrorPatternState= BWD_EXPECTING_FWD_END_CounterErrorState;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2204      	movs	r2, #4
 8000f02:	745a      	strb	r2, [r3, #17]
 8000f04:	e030      	b.n	8000f68 <TRACSENS_ChangedToDownErrorHandling+0xd4>
	}
	else if(FWD_EXPECTING_BWD_END_CounterErrorState== pConfig->rteErrorPatternState)
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	7c5b      	ldrb	r3, [r3, #17]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d12b      	bne.n	8000f68 <TRACSENS_ChangedToDownErrorHandling+0xd4>
	{
		pConfig->rteErrorPatternCount++;
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	3201      	adds	r2, #1
 8000f18:	60da      	str	r2, [r3, #12]
		if(true== pConfig->rteErrorPatternJustStarted)
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	7e1b      	ldrb	r3, [r3, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d008      	beq.n	8000f36 <TRACSENS_ChangedToDownErrorHandling+0xa2>
		{
			pConfig->rteErrorPatternJustStarted= false;
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	761a      	strb	r2, [r3, #24]
			pConfig->rteErrorPatternCount++;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	3201      	adds	r2, #1
 8000f34:	60da      	str	r2, [r3, #12]
		}

		if((false== pConfig->rteErrorPatternCompensationStarted)&& (pConfig->errorPatternConfirmationCount<= pConfig->rteErrorPatternCount))
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	7c1b      	ldrb	r3, [r3, #16]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4053      	eors	r3, r2
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00c      	beq.n	8000f60 <TRACSENS_ChangedToDownErrorHandling+0xcc>
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	885b      	ldrh	r3, [r3, #2]
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d803      	bhi.n	8000f60 <TRACSENS_ChangedToDownErrorHandling+0xcc>
		{
			pConfig->rteErrorPatternCompensationStarted= true;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	741a      	strb	r2, [r3, #16]
			//DBG_Print("#stat:mag2: errorPatternCompensationStarted > \r\n");
		}
		pConfig->rteErrorPatternState= BWD_EXPECTING_FWD_CounterErrorState;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2202      	movs	r2, #2
 8000f66:	745a      	strb	r2, [r3, #17]
	}
	pConfig->rteErrorPatternPreviousPulse= _curr;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <TRACSENS_ChangedToDownErrorHandling+0xe4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	615a      	str	r2, [r3, #20]
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200001e4 	.word	0x200001e4

08000f7c <TRACSENS_Power>:

static void TRACSENS_Power(bool _enable)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0002      	movs	r2, r0
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	701a      	strb	r2, [r3, #0]
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <UART_Printf>:

void UART_Printf(char *format, ...)
{
 8000f90:	b40f      	push	{r0, r1, r2, r3}
 8000f92:	b590      	push	{r4, r7, lr}
 8000f94:	b0c3      	sub	sp, #268	@ 0x10c
 8000f96:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 8000f98:	238a      	movs	r3, #138	@ 0x8a
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	185b      	adds	r3, r3, r1
 8000fa0:	19db      	adds	r3, r3, r7
 8000fa2:	607b      	str	r3, [r7, #4]
  vsnprintf(str, sizeof(str), format, args);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2288      	movs	r2, #136	@ 0x88
 8000fa8:	0052      	lsls	r2, r2, #1
 8000faa:	1852      	adds	r2, r2, r1
 8000fac:	19d2      	adds	r2, r2, r7
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	2180      	movs	r1, #128	@ 0x80
 8000fb2:	0049      	lsls	r1, r1, #1
 8000fb4:	2408      	movs	r4, #8
 8000fb6:	1938      	adds	r0, r7, r4
 8000fb8:	f004 f9d0 	bl	800535c <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff f8a2 	bl	8000108 <strlen>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	2301      	movs	r3, #1
 8000fca:	425b      	negs	r3, r3
 8000fcc:	1939      	adds	r1, r7, r4
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <UART_Printf+0x54>)
 8000fd0:	f003 fbea 	bl	80047a8 <HAL_UART_Transmit>
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b043      	add	sp, #268	@ 0x10c
 8000fda:	bc90      	pop	{r4, r7}
 8000fdc:	bc08      	pop	{r3}
 8000fde:	b004      	add	sp, #16
 8000fe0:	4718      	bx	r3
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	20000140 	.word	0x20000140

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	e7fd      	b.n	8000ff0 <Error_Handler+0x8>

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_MspInit+0x44>)
 8000ffc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_MspInit+0x44>)
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	0549      	lsls	r1, r1, #21
 8001004:	430a      	orrs	r2, r1
 8001006:	659a      	str	r2, [r3, #88]	@ 0x58
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_MspInit+0x44>)
 800100a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	055b      	lsls	r3, r3, #21
 8001010:	4013      	ands	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_MspInit+0x44>)
 8001018:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <HAL_MspInit+0x44>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	661a      	str	r2, [r3, #96]	@ 0x60
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001026:	2201      	movs	r2, #1
 8001028:	4013      	ands	r3, r2
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b099      	sub	sp, #100	@ 0x64
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	234c      	movs	r3, #76	@ 0x4c
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	0018      	movs	r0, r3
 800104a:	2314      	movs	r3, #20
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f004 f990 	bl	8005374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	2414      	movs	r4, #20
 8001056:	193b      	adds	r3, r7, r4
 8001058:	0018      	movs	r0, r3
 800105a:	2338      	movs	r3, #56	@ 0x38
 800105c:	001a      	movs	r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	f004 f988 	bl	8005374 <memset>
  if(hlptim->Instance==LPTIM1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <HAL_LPTIM_MspInit+0xc8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d145      	bne.n	80010fa <HAL_LPTIM_MspInit+0xbe>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2280      	movs	r2, #128	@ 0x80
 8001078:	02d2      	lsls	r2, r2, #11
 800107a:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	193b      	adds	r3, r7, r4
 800107e:	0018      	movs	r0, r3
 8001080:	f002 f8a4 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8001088:	f7ff ffae 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <HAL_LPTIM_MspInit+0xcc>)
 800108e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <HAL_LPTIM_MspInit+0xcc>)
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	0609      	lsls	r1, r1, #24
 8001096:	430a      	orrs	r2, r1
 8001098:	659a      	str	r2, [r3, #88]	@ 0x58
 800109a:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <HAL_LPTIM_MspInit+0xcc>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	0fdb      	lsrs	r3, r3, #31
 80010a0:	07db      	lsls	r3, r3, #31
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <HAL_LPTIM_MspInit+0xcc>)
 80010a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <HAL_LPTIM_MspInit+0xcc>)
 80010ac:	2104      	movs	r1, #4
 80010ae:	430a      	orrs	r2, r1
 80010b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_LPTIM_MspInit+0xcc>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	2204      	movs	r2, #4
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80010be:	214c      	movs	r1, #76	@ 0x4c
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2205      	movs	r2, #5
 80010c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2202      	movs	r2, #2
 80010ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2201      	movs	r2, #1
 80010dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_LPTIM_MspInit+0xd0>)
 80010e2:	0019      	movs	r1, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	f000 faf7 	bl	80016d8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2011      	movs	r0, #17
 80010f0:	f000 fac0 	bl	8001674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80010f4:	2011      	movs	r0, #17
 80010f6:	f000 fad2 	bl	800169e <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b019      	add	sp, #100	@ 0x64
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	40007c00 	.word	0x40007c00
 8001108:	40021000 	.word	0x40021000
 800110c:	50000800 	.word	0x50000800

08001110 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b093      	sub	sp, #76	@ 0x4c
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	2410      	movs	r4, #16
 800111a:	193b      	adds	r3, r7, r4
 800111c:	0018      	movs	r0, r3
 800111e:	2338      	movs	r3, #56	@ 0x38
 8001120:	001a      	movs	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	f004 f926 	bl	8005374 <memset>
  if(hrtc->Instance==RTC)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1a      	ldr	r2, [pc, #104]	@ (8001198 <HAL_RTC_MspInit+0x88>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12e      	bne.n	8001190 <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	0212      	lsls	r2, r2, #8
 8001138:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800113a:	193b      	adds	r3, r7, r4
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	193b      	adds	r3, r7, r4
 8001144:	0018      	movs	r0, r3
 8001146:	f002 f841 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d001      	beq.n	8001152 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800114e:	f7ff ff4b 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <HAL_RTC_MspInit+0x8c>)
 8001154:	2390      	movs	r3, #144	@ 0x90
 8001156:	58d3      	ldr	r3, [r2, r3]
 8001158:	4910      	ldr	r1, [pc, #64]	@ (800119c <HAL_RTC_MspInit+0x8c>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	0212      	lsls	r2, r2, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	2290      	movs	r2, #144	@ 0x90
 8001162:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_RTC_MspInit+0x8c>)
 8001166:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <HAL_RTC_MspInit+0x8c>)
 800116a:	2180      	movs	r1, #128	@ 0x80
 800116c:	00c9      	lsls	r1, r1, #3
 800116e:	430a      	orrs	r2, r1
 8001170:	659a      	str	r2, [r3, #88]	@ 0x58
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_RTC_MspInit+0x8c>)
 8001174:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2002      	movs	r0, #2
 8001186:	f000 fa75 	bl	8001674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800118a:	2002      	movs	r0, #2
 800118c:	f000 fa87 	bl	800169e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b013      	add	sp, #76	@ 0x4c
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	40002800 	.word	0x40002800
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b099      	sub	sp, #100	@ 0x64
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	234c      	movs	r3, #76	@ 0x4c
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	0018      	movs	r0, r3
 80011ae:	2314      	movs	r3, #20
 80011b0:	001a      	movs	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f004 f8de 	bl	8005374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	2414      	movs	r4, #20
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	0018      	movs	r0, r3
 80011be:	2338      	movs	r3, #56	@ 0x38
 80011c0:	001a      	movs	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f004 f8d6 	bl	8005374 <memset>
  if(huart->Instance==USART2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <HAL_UART_MspInit+0xb8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d13e      	bne.n	8001250 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	2202      	movs	r2, #2
 80011d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	0018      	movs	r0, r3
 80011e2:	f001 fff3 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ea:	f7ff fefd 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ee:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <HAL_UART_MspInit+0xbc>)
 80011f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <HAL_UART_MspInit+0xbc>)
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	0289      	lsls	r1, r1, #10
 80011f8:	430a      	orrs	r2, r1
 80011fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_UART_MspInit+0xbc>)
 80011fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_UART_MspInit+0xbc>)
 800120c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_UART_MspInit+0xbc>)
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_UART_MspInit+0xbc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001222:	214c      	movs	r1, #76	@ 0x4c
 8001224:	187b      	adds	r3, r7, r1
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2202      	movs	r2, #2
 800122e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2207      	movs	r2, #7
 8001240:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	187a      	adds	r2, r7, r1
 8001244:	23a0      	movs	r3, #160	@ 0xa0
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fa44 	bl	80016d8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b019      	add	sp, #100	@ 0x64
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	40004400 	.word	0x40004400
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	e7fd      	b.n	8001264 <NMI_Handler+0x4>

08001268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	e7fd      	b.n	800126c <HardFault_Handler+0x4>

08001270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f908 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <RTC_TAMP_IRQHandler+0x14>)
 800129a:	0018      	movs	r0, r3
 800129c:	f003 f97c 	bl	8004598 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	20000110 	.word	0x20000110

080012ac <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fd3e 	bl	8001d34 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80012b8:	46c0      	nop			@ (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	20000078 	.word	0x20000078

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f004 f846 	bl	8005384 <__errno>
 80012f8:	0003      	movs	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	2301      	movs	r3, #1
 8001300:	425b      	negs	r3, r3
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	18d2      	adds	r2, r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <_sbrk+0x64>)
 8001314:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b006      	add	sp, #24
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20003000 	.word	0x20003000
 8001324:	00000400 	.word	0x00000400
 8001328:	200001e8 	.word	0x200001e8
 800132c:	20000338 	.word	0x20000338

08001330 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <SystemInit+0x50>)
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	0512      	lsls	r2, r2, #20
 800133c:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <SystemInit+0x54>)
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	58d3      	ldr	r3, [r2, r3]
 8001344:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <SystemInit+0x54>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	4013      	ands	r3, r2
 8001354:	d010      	beq.n	8001378 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	22ff      	movs	r2, #255	@ 0xff
 800135a:	4013      	ands	r3, r2
 800135c:	2bcc      	cmp	r3, #204	@ 0xcc
 800135e:	d00b      	beq.n	8001378 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	22ff      	movs	r2, #255	@ 0xff
 8001364:	4013      	ands	r3, r2
 8001366:	2baa      	cmp	r3, #170	@ 0xaa
 8001368:	d006      	beq.n	8001378 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <SystemInit+0x54>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <SystemInit+0x54>)
 8001370:	2180      	movs	r1, #128	@ 0x80
 8001372:	02c9      	lsls	r1, r1, #11
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	40022000 	.word	0x40022000

08001388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800138a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800138c:	f7ff ffd0 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	@ (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	@ (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013b6:	f003 ffeb 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff f9e1 	bl	8000780 <main>

080013be <LoopForever>:

LoopForever:
  b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   r0, =_estack
 80013c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013cc:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 80013d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013d4:	20000338 	.word	0x20000338

080013d8 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_COMP1_IRQHandler>

080013da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	2003      	movs	r0, #3
 80013e8:	f000 f80e 	bl	8001408 <HAL_InitTick>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e001      	b.n	80013fc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f8:	f7ff fdfc 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	230f      	movs	r3, #15
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0U)
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <HAL_InitTick+0x88>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d02b      	beq.n	8001478 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_InitTick+0x8c>)
 8001422:	681c      	ldr	r4, [r3, #0]
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_InitTick+0x88>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	0019      	movs	r1, r3
 800142a:	23fa      	movs	r3, #250	@ 0xfa
 800142c:	0098      	lsls	r0, r3, #2
 800142e:	f7fe fe7d 	bl	800012c <__udivsi3>
 8001432:	0003      	movs	r3, r0
 8001434:	0019      	movs	r1, r3
 8001436:	0020      	movs	r0, r4
 8001438:	f7fe fe78 	bl	800012c <__udivsi3>
 800143c:	0003      	movs	r3, r0
 800143e:	0018      	movs	r0, r3
 8001440:	f000 f93d 	bl	80016be <HAL_SYSTICK_Config>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d112      	bne.n	800146e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d80a      	bhi.n	8001464 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2301      	movs	r3, #1
 8001452:	425b      	negs	r3, r3
 8001454:	2200      	movs	r2, #0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f90c 	bl	8001674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_InitTick+0x90>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00d      	b.n	8001480 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e008      	b.n	8001480 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800146e:	230f      	movs	r3, #15
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e003      	b.n	8001480 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001480:	230f      	movs	r3, #15
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b005      	add	sp, #20
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	20000008 	.word	0x20000008
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	001a      	movs	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x20>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	18d2      	adds	r2, r2, r3
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <HAL_IncTick+0x20>)
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	20000008 	.word	0x20000008
 80014bc:	200001ec 	.word	0x200001ec

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b02      	ldr	r3, [pc, #8]	@ (80014d0 <HAL_GetTick+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	200001ec 	.word	0x200001ec

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff fff0 	bl	80014c0 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	001a      	movs	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	189b      	adds	r3, r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	f7ff ffe0 	bl	80014c0 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b004      	add	sp, #16
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	0002      	movs	r2, r0
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b7f      	cmp	r3, #127	@ 0x7f
 800152e:	d809      	bhi.n	8001544 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	001a      	movs	r2, r3
 8001536:	231f      	movs	r3, #31
 8001538:	401a      	ands	r2, r3
 800153a:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_EnableIRQ+0x30>)
 800153c:	2101      	movs	r1, #1
 800153e:	4091      	lsls	r1, r2
 8001540:	000a      	movs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001544:	46c0      	nop			@ (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	0002      	movs	r2, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b7f      	cmp	r3, #127	@ 0x7f
 8001564:	d828      	bhi.n	80015b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001566:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <__NVIC_SetPriority+0xd4>)
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	33c0      	adds	r3, #192	@ 0xc0
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	589b      	ldr	r3, [r3, r2]
 8001576:	1dfa      	adds	r2, r7, #7
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	0011      	movs	r1, r2
 800157c:	2203      	movs	r2, #3
 800157e:	400a      	ands	r2, r1
 8001580:	00d2      	lsls	r2, r2, #3
 8001582:	21ff      	movs	r1, #255	@ 0xff
 8001584:	4091      	lsls	r1, r2
 8001586:	000a      	movs	r2, r1
 8001588:	43d2      	mvns	r2, r2
 800158a:	401a      	ands	r2, r3
 800158c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	019b      	lsls	r3, r3, #6
 8001592:	22ff      	movs	r2, #255	@ 0xff
 8001594:	401a      	ands	r2, r3
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	2303      	movs	r3, #3
 800159e:	4003      	ands	r3, r0
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a4:	481f      	ldr	r0, [pc, #124]	@ (8001624 <__NVIC_SetPriority+0xd4>)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	430a      	orrs	r2, r1
 80015b0:	33c0      	adds	r3, #192	@ 0xc0
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015b6:	e031      	b.n	800161c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <__NVIC_SetPriority+0xd8>)
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	0019      	movs	r1, r3
 80015c0:	230f      	movs	r3, #15
 80015c2:	400b      	ands	r3, r1
 80015c4:	3b08      	subs	r3, #8
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3306      	adds	r3, #6
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	3304      	adds	r3, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1dfa      	adds	r2, r7, #7
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	0011      	movs	r1, r2
 80015d8:	2203      	movs	r2, #3
 80015da:	400a      	ands	r2, r1
 80015dc:	00d2      	lsls	r2, r2, #3
 80015de:	21ff      	movs	r1, #255	@ 0xff
 80015e0:	4091      	lsls	r1, r2
 80015e2:	000a      	movs	r2, r1
 80015e4:	43d2      	mvns	r2, r2
 80015e6:	401a      	ands	r2, r3
 80015e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	22ff      	movs	r2, #255	@ 0xff
 80015f0:	401a      	ands	r2, r3
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	2303      	movs	r3, #3
 80015fa:	4003      	ands	r3, r0
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001600:	4809      	ldr	r0, [pc, #36]	@ (8001628 <__NVIC_SetPriority+0xd8>)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	001c      	movs	r4, r3
 8001608:	230f      	movs	r3, #15
 800160a:	4023      	ands	r3, r4
 800160c:	3b08      	subs	r3, #8
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	430a      	orrs	r2, r1
 8001612:	3306      	adds	r3, #6
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18c3      	adds	r3, r0, r3
 8001618:	3304      	adds	r3, #4
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b003      	add	sp, #12
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	045b      	lsls	r3, r3, #17
 800163c:	429a      	cmp	r2, r3
 800163e:	d301      	bcc.n	8001644 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001640:	2301      	movs	r3, #1
 8001642:	e010      	b.n	8001666 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <SysTick_Config+0x44>)
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	3a01      	subs	r2, #1
 800164a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164c:	2301      	movs	r3, #1
 800164e:	425b      	negs	r3, r3
 8001650:	2103      	movs	r1, #3
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff ff7c 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <SysTick_Config+0x44>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <SysTick_Config+0x44>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	210f      	movs	r1, #15
 8001680:	187b      	adds	r3, r7, r1
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	187b      	adds	r3, r7, r1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	0011      	movs	r1, r2
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	0002      	movs	r2, r0
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff33 	bl	800151c <__NVIC_EnableIRQ>
}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ffaf 	bl	800162c <SysTick_Config>
 80016ce:	0003      	movs	r3, r0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e14d      	b.n	8001984 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4091      	lsls	r1, r2
 80016f2:	000a      	movs	r2, r1
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d100      	bne.n	8001700 <HAL_GPIO_Init+0x28>
 80016fe:	e13e      	b.n	800197e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2203      	movs	r2, #3
 8001706:	4013      	ands	r3, r2
 8001708:	2b01      	cmp	r3, #1
 800170a:	d005      	beq.n	8001718 <HAL_GPIO_Init+0x40>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	4013      	ands	r3, r2
 8001714:	2b02      	cmp	r3, #2
 8001716:	d130      	bne.n	800177a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	43da      	mvns	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174e:	2201      	movs	r2, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	2201      	movs	r2, #1
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2203      	movs	r2, #3
 8001780:	4013      	ands	r3, r2
 8001782:	2b03      	cmp	r3, #3
 8001784:	d017      	beq.n	80017b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	4013      	ands	r3, r2
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d123      	bne.n	800180a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	58d3      	ldr	r3, [r2, r3]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2207      	movs	r2, #7
 80017d4:	4013      	ands	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	43da      	mvns	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2107      	movs	r1, #7
 80017ee:	400b      	ands	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	6939      	ldr	r1, [r7, #16]
 8001808:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	401a      	ands	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	23c0      	movs	r3, #192	@ 0xc0
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4013      	ands	r3, r2
 8001848:	d100      	bne.n	800184c <HAL_GPIO_Init+0x174>
 800184a:	e098      	b.n	800197e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800184c:	4a53      	ldr	r2, [pc, #332]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3318      	adds	r3, #24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	589b      	ldr	r3, [r3, r2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2203      	movs	r2, #3
 800185e:	4013      	ands	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	220f      	movs	r2, #15
 8001864:	409a      	lsls	r2, r3
 8001866:	0013      	movs	r3, r2
 8001868:	43da      	mvns	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	23a0      	movs	r3, #160	@ 0xa0
 8001874:	05db      	lsls	r3, r3, #23
 8001876:	429a      	cmp	r2, r3
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x1d6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a48      	ldr	r2, [pc, #288]	@ (80019a0 <HAL_GPIO_Init+0x2c8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x1d2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a47      	ldr	r2, [pc, #284]	@ (80019a4 <HAL_GPIO_Init+0x2cc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x1ce>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a46      	ldr	r2, [pc, #280]	@ (80019a8 <HAL_GPIO_Init+0x2d0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x1ca>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a45      	ldr	r2, [pc, #276]	@ (80019ac <HAL_GPIO_Init+0x2d4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x1c6>
 800189a:	2305      	movs	r3, #5
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 800189e:	2306      	movs	r3, #6
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x1d8>
 80018ae:	2300      	movs	r3, #0
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	2103      	movs	r1, #3
 80018b4:	400a      	ands	r2, r1
 80018b6:	00d2      	lsls	r2, r2, #3
 80018b8:	4093      	lsls	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018c0:	4936      	ldr	r1, [pc, #216]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3318      	adds	r3, #24
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ce:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43da      	mvns	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	035b      	lsls	r3, r3, #13
 80018e6:	4013      	ands	r3, r2
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43da      	mvns	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	039b      	lsls	r3, r3, #14
 8001910:	4013      	ands	r3, r2
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191c:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001922:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 8001924:	2384      	movs	r3, #132	@ 0x84
 8001926:	58d3      	ldr	r3, [r2, r3]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43da      	mvns	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	4013      	ands	r3, r2
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001948:	4914      	ldr	r1, [pc, #80]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 800194a:	2284      	movs	r2, #132	@ 0x84
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	58d3      	ldr	r3, [r2, r3]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	025b      	lsls	r3, r3, #9
 800196a:	4013      	ands	r3, r2
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001976:	4909      	ldr	r1, [pc, #36]	@ (800199c <HAL_GPIO_Init+0x2c4>)
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	40da      	lsrs	r2, r3
 800198c:	1e13      	subs	r3, r2, #0
 800198e:	d000      	beq.n	8001992 <HAL_GPIO_Init+0x2ba>
 8001990:	e6aa      	b.n	80016e8 <HAL_GPIO_Init+0x10>
  }
}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b006      	add	sp, #24
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021800 	.word	0x40021800
 80019a0:	50000400 	.word	0x50000400
 80019a4:	50000800 	.word	0x50000800
 80019a8:	50000c00 	.word	0x50000c00
 80019ac:	50001400 	.word	0x50001400

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	0008      	movs	r0, r1
 80019ba:	0011      	movs	r1, r2
 80019bc:	1cbb      	adds	r3, r7, #2
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	1c7b      	adds	r3, r7, #1
 80019c4:	1c0a      	adds	r2, r1, #0
 80019c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c8:	1c7b      	adds	r3, r7, #1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d8:	e003      	b.n	80019e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019da:	1cbb      	adds	r3, r7, #2
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e139      	b.n	8001c72 <HAL_LPTIM_Init+0x286>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2252      	movs	r2, #82	@ 0x52
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d113      	bne.n	8001a32 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2251      	movs	r2, #81	@ 0x51
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 fce5 	bl	80023e4 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a95      	ldr	r2, [pc, #596]	@ (8001c7c <HAL_LPTIM_Init+0x290>)
 8001a26:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	0010      	movs	r0, r2
 8001a30:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2252      	movs	r2, #82	@ 0x52
 8001a36:	2102      	movs	r1, #2
 8001a38:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	430a      	orrs	r2, r1
 8001a48:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	0052      	lsls	r2, r2, #1
 8001a52:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8001a5e:	2380      	movs	r3, #128	@ 0x80
 8001a60:	005a      	lsls	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0011      	movs	r1, r2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 fd10 	bl	800248c <LPTIM_WaitForFlag>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d101      	bne.n	8001a76 <HAL_LPTIM_Init+0x8a>
  {
    return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0fd      	b.n	8001c72 <HAL_LPTIM_Init+0x286>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a12      	ldr	r2, [r2, #32]
 8001a86:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 fcfd 	bl	800248c <LPTIM_WaitForFlag>
 8001a92:	0003      	movs	r3, r0
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d101      	bne.n	8001a9c <HAL_LPTIM_Init+0xb0>
  {
    return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0ea      	b.n	8001c72 <HAL_LPTIM_Init+0x286>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a77      	ldr	r2, [pc, #476]	@ (8001c80 <HAL_LPTIM_Init+0x294>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_LPTIM_Init+0xc4>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a76      	ldr	r2, [pc, #472]	@ (8001c84 <HAL_LPTIM_Init+0x298>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_LPTIM_Init+0xc8>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_LPTIM_Init+0xca>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d122      	bne.n	8001b00 <HAL_LPTIM_Init+0x114>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d149      	bne.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d142      	bne.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d13c      	bne.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	029b      	lsls	r3, r3, #10
 8001aea:	4013      	ands	r3, r2
 8001aec:	d135      	bne.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	438a      	bics	r2, r1
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	e02c      	b.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5e      	ldr	r2, [pc, #376]	@ (8001c80 <HAL_LPTIM_Init+0x294>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_LPTIM_Init+0x128>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5d      	ldr	r2, [pc, #372]	@ (8001c84 <HAL_LPTIM_Init+0x298>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_LPTIM_Init+0x12c>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_LPTIM_Init+0x12e>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d115      	bne.n	8001b4a <HAL_LPTIM_Init+0x15e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d117      	bne.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d110      	bne.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	e007      	b.n	8001b5a <HAL_LPTIM_Init+0x16e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	438a      	bics	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_LPTIM_Init+0x18a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d103      	bne.n	8001b7e <HAL_LPTIM_Init+0x192>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	221e      	movs	r2, #30
 8001b7a:	4393      	bics	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <HAL_LPTIM_Init+0x29c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d003      	beq.n	8001b90 <HAL_LPTIM_Init+0x1a4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	@ (8001c8c <HAL_LPTIM_Init+0x2a0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a3f      	ldr	r2, [pc, #252]	@ (8001c90 <HAL_LPTIM_Init+0x2a4>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ba0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8001ba6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001bac:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_LPTIM_Init+0x1e0>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_LPTIM_Init+0x1f4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_LPTIM_Init+0x204>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	4a24      	ldr	r2, [pc, #144]	@ (8001c88 <HAL_LPTIM_Init+0x29c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00a      	beq.n	8001c10 <HAL_LPTIM_Init+0x224>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c02:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001c08:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
#if defined(LPTIM3)
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
#else
  if (hlptim->Instance == LPTIM1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <HAL_LPTIM_Init+0x294>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d108      	bne.n	8001c34 <HAL_LPTIM_Init+0x248>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c32:	e009      	b.n	8001c48 <HAL_LPTIM_Init+0x25c>
  }
  else
  {
    if (hlptim->Instance == LPTIM2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <HAL_LPTIM_Init+0x298>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d104      	bne.n	8001c48 <HAL_LPTIM_Init+0x25c>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2253      	movs	r2, #83	@ 0x53
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	5499      	strb	r1, [r3, r2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2254      	movs	r2, #84	@ 0x54
 8001c54:	2101      	movs	r1, #1
 8001c56:	5499      	strb	r1, [r3, r2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2255      	movs	r2, #85	@ 0x55
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2256      	movs	r2, #86	@ 0x56
 8001c64:	2101      	movs	r1, #1
 8001c66:	5499      	strb	r1, [r3, r2]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2252      	movs	r2, #82	@ 0x52
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	0800103d 	.word	0x0800103d
 8001c80:	40007c00 	.word	0x40007c00
 8001c84:	40009400 	.word	0x40009400
 8001c88:	0000ffff 	.word	0x0000ffff
 8001c8c:	ffff1f3f 	.word	0xffff1f3f
 8001c90:	ff39f1fe 	.word	0xff39f1fe

08001c94 <HAL_LPTIM_Counter_Start_IT>:
  * @brief  Start the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2252      	movs	r2, #82	@ 0x52
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	5499      	strb	r1, [r3, r2]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d00d      	beq.n	8001cc8 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	491b      	ldr	r1, [pc, #108]	@ (8001d30 <HAL_LPTIM_Counter_Start_IT+0x9c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	0452      	lsls	r2, r2, #17
 8001ce0:	605a      	str	r2, [r3, #4]

  /* Enable interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK | LPTIM_IT_UPDATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	21c9      	movs	r1, #201	@ 0xc9
 8001cee:	0049      	lsls	r1, r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	045a      	lsls	r2, r3, #17
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fbc5 	bl	800248c <LPTIM_WaitForFlag>
 8001d02:	0003      	movs	r3, r0
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d101      	bne.n	8001d0c <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e00c      	b.n	8001d26 <HAL_LPTIM_Counter_Start_IT+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2104      	movs	r1, #4
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2252      	movs	r2, #82	@ 0x52
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	fffff1ff 	.word	0xfffff1ff

08001d34 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d124      	bne.n	8001d94 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d11d      	bne.n	8001d94 <HAL_LPTIM_IRQHandler+0x60>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2238      	movs	r2, #56	@ 0x38
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d006      	beq.n	8001d82 <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	228c      	movs	r2, #140	@ 0x8c
 8001d78:	589b      	ldr	r3, [r3, r2]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	0010      	movs	r0, r2
 8001d7e:	4798      	blx	r3
 8001d80:	e004      	b.n	8001d8c <HAL_LPTIM_IRQHandler+0x58>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	0010      	movs	r0, r2
 8001d8a:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2238      	movs	r2, #56	@ 0x38
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	401a      	ands	r2, r3
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d129      	bne.n	8001dfc <HAL_LPTIM_IRQHandler+0xc8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	401a      	ands	r2, r3
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d11f      	bne.n	8001dfc <HAL_LPTIM_IRQHandler+0xc8>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2280      	movs	r2, #128	@ 0x80
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2238      	movs	r2, #56	@ 0x38
 8001dca:	2102      	movs	r1, #2
 8001dcc:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	025b      	lsls	r3, r3, #9
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d006      	beq.n	8001dea <HAL_LPTIM_IRQHandler+0xb6>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	228c      	movs	r2, #140	@ 0x8c
 8001de0:	589b      	ldr	r3, [r3, r2]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	0010      	movs	r0, r2
 8001de6:	4798      	blx	r3
 8001de8:	e004      	b.n	8001df4 <HAL_LPTIM_IRQHandler+0xc0>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	0010      	movs	r0, r2
 8001df2:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2238      	movs	r2, #56	@ 0x38
 8001df8:	2100      	movs	r1, #0
 8001dfa:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	401a      	ands	r2, r3
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d128      	bne.n	8001e62 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d11e      	bne.n	8001e62 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2280      	movs	r2, #128	@ 0x80
 8001e2a:	00d2      	lsls	r2, r2, #3
 8001e2c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2238      	movs	r2, #56	@ 0x38
 8001e32:	2104      	movs	r1, #4
 8001e34:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d006      	beq.n	8001e50 <HAL_LPTIM_IRQHandler+0x11c>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	228c      	movs	r2, #140	@ 0x8c
 8001e46:	589b      	ldr	r3, [r3, r2]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	4798      	blx	r3
 8001e4e:	e004      	b.n	8001e5a <HAL_LPTIM_IRQHandler+0x126>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	0010      	movs	r0, r2
 8001e58:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2238      	movs	r2, #56	@ 0x38
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d129      	bne.n	8001eca <HAL_LPTIM_IRQHandler+0x196>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	401a      	ands	r2, r3
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11f      	bne.n	8001eca <HAL_LPTIM_IRQHandler+0x196>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2238      	movs	r2, #56	@ 0x38
 8001e98:	2108      	movs	r1, #8
 8001e9a:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d006      	beq.n	8001eb8 <HAL_LPTIM_IRQHandler+0x184>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	228c      	movs	r2, #140	@ 0x8c
 8001eae:	589b      	ldr	r3, [r3, r2]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	4798      	blx	r3
 8001eb6:	e004      	b.n	8001ec2 <HAL_LPTIM_IRQHandler+0x18e>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	0010      	movs	r0, r2
 8001ec0:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2238      	movs	r2, #56	@ 0x38
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	015b      	lsls	r3, r3, #5
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11c      	bne.n	8001f18 <HAL_LPTIM_IRQHandler+0x1e4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	015b      	lsls	r3, r3, #5
 8001ee8:	401a      	ands	r2, r3
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d112      	bne.n	8001f18 <HAL_LPTIM_IRQHandler+0x1e4>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	0152      	lsls	r2, r2, #5
 8001efa:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2238      	movs	r2, #56	@ 0x38
 8001f00:	2101      	movs	r1, #1
 8001f02:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2294      	movs	r2, #148	@ 0x94
 8001f08:	589b      	ldr	r3, [r3, r2]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	0010      	movs	r0, r2
 8001f0e:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2238      	movs	r2, #56	@ 0x38
 8001f14:	2100      	movs	r1, #0
 8001f16:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	401a      	ands	r2, r3
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	019b      	lsls	r3, r3, #6
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d11c      	bne.n	8001f66 <HAL_LPTIM_IRQHandler+0x232>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	019b      	lsls	r3, r3, #6
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d112      	bne.n	8001f66 <HAL_LPTIM_IRQHandler+0x232>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2280      	movs	r2, #128	@ 0x80
 8001f46:	0192      	lsls	r2, r2, #6
 8001f48:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2238      	movs	r2, #56	@ 0x38
 8001f4e:	2102      	movs	r1, #2
 8001f50:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2294      	movs	r2, #148	@ 0x94
 8001f56:	589b      	ldr	r3, [r3, r2]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2238      	movs	r2, #56	@ 0x38
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	01db      	lsls	r3, r3, #7
 8001f70:	401a      	ands	r2, r3
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d11c      	bne.n	8001fb4 <HAL_LPTIM_IRQHandler+0x280>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	01db      	lsls	r3, r3, #7
 8001f84:	401a      	ands	r2, r3
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	01db      	lsls	r3, r3, #7
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d112      	bne.n	8001fb4 <HAL_LPTIM_IRQHandler+0x280>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2280      	movs	r2, #128	@ 0x80
 8001f94:	01d2      	lsls	r2, r2, #7
 8001f96:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2238      	movs	r2, #56	@ 0x38
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2294      	movs	r2, #148	@ 0x94
 8001fa4:	589b      	ldr	r3, [r3, r2]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	0010      	movs	r0, r2
 8001faa:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2238      	movs	r2, #56	@ 0x38
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d11c      	bne.n	8002002 <HAL_LPTIM_IRQHandler+0x2ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d112      	bne.n	8002002 <HAL_LPTIM_IRQHandler+0x2ce>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	0212      	lsls	r2, r2, #8
 8001fe4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2238      	movs	r2, #56	@ 0x38
 8001fea:	2108      	movs	r1, #8
 8001fec:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2294      	movs	r2, #148	@ 0x94
 8001ff2:	589b      	ldr	r3, [r3, r2]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2238      	movs	r2, #56	@ 0x38
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2202      	movs	r2, #2
 800200a:	4013      	ands	r3, r2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d10f      	bne.n	8002030 <HAL_LPTIM_IRQHandler+0x2fc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d108      	bne.n	8002030 <HAL_LPTIM_IRQHandler+0x2fc>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2202      	movs	r2, #2
 8002024:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	0010      	movs	r0, r2
 800202e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	2b04      	cmp	r3, #4
 800203c:	d10f      	bne.n	800205e <HAL_LPTIM_IRQHandler+0x32a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	2b04      	cmp	r3, #4
 800204a:	d108      	bne.n	800205e <HAL_LPTIM_IRQHandler+0x32a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	0010      	movs	r0, r2
 800205c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2208      	movs	r2, #8
 8002066:	4013      	ands	r3, r2
 8002068:	2b08      	cmp	r3, #8
 800206a:	d113      	bne.n	8002094 <HAL_LPTIM_IRQHandler+0x360>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2208      	movs	r2, #8
 8002074:	4013      	ands	r3, r2
 8002076:	2b08      	cmp	r3, #8
 8002078:	d10c      	bne.n	8002094 <HAL_LPTIM_IRQHandler+0x360>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2208      	movs	r2, #8
 8002080:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2238      	movs	r2, #56	@ 0x38
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	0010      	movs	r0, r2
 8002092:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	031b      	lsls	r3, r3, #12
 800209e:	401a      	ands	r2, r3
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	031b      	lsls	r3, r3, #12
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d117      	bne.n	80020d8 <HAL_LPTIM_IRQHandler+0x3a4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	031b      	lsls	r3, r3, #12
 80020b2:	401a      	ands	r2, r3
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d10d      	bne.n	80020d8 <HAL_LPTIM_IRQHandler+0x3a4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	0312      	lsls	r2, r2, #12
 80020c4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2238      	movs	r2, #56	@ 0x38
 80020ca:	2102      	movs	r1, #2
 80020cc:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	0010      	movs	r0, r2
 80020d6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2210      	movs	r2, #16
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d10f      	bne.n	8002106 <HAL_LPTIM_IRQHandler+0x3d2>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2210      	movs	r2, #16
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d108      	bne.n	8002106 <HAL_LPTIM_IRQHandler+0x3d2>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2210      	movs	r2, #16
 80020fa:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	0010      	movs	r0, r2
 8002104:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	4013      	ands	r3, r2
 8002110:	2b20      	cmp	r3, #32
 8002112:	d10f      	bne.n	8002134 <HAL_LPTIM_IRQHandler+0x400>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2220      	movs	r2, #32
 800211c:	4013      	ands	r3, r2
 800211e:	2b20      	cmp	r3, #32
 8002120:	d108      	bne.n	8002134 <HAL_LPTIM_IRQHandler+0x400>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2220      	movs	r2, #32
 8002128:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	0010      	movs	r0, r2
 8002132:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2240      	movs	r2, #64	@ 0x40
 800213c:	4013      	ands	r3, r2
 800213e:	2b40      	cmp	r3, #64	@ 0x40
 8002140:	d10f      	bne.n	8002162 <HAL_LPTIM_IRQHandler+0x42e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	4013      	ands	r3, r2
 800214c:	2b40      	cmp	r3, #64	@ 0x40
 800214e:	d108      	bne.n	8002162 <HAL_LPTIM_IRQHandler+0x42e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2240      	movs	r2, #64	@ 0x40
 8002156:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	0010      	movs	r0, r2
 8002160:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	4013      	ands	r3, r2
 800216c:	2b80      	cmp	r3, #128	@ 0x80
 800216e:	d10f      	bne.n	8002190 <HAL_LPTIM_IRQHandler+0x45c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2280      	movs	r2, #128	@ 0x80
 8002178:	4013      	ands	r3, r2
 800217a:	2b80      	cmp	r3, #128	@ 0x80
 800217c:	d108      	bne.n	8002190 <HAL_LPTIM_IRQHandler+0x45c>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2280      	movs	r2, #128	@ 0x80
 8002184:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	0010      	movs	r0, r2
 800218e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	401a      	ands	r2, r3
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d114      	bne.n	80021ce <HAL_LPTIM_IRQHandler+0x49a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	401a      	ands	r2, r3
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d10a      	bne.n	80021ce <HAL_LPTIM_IRQHandler+0x49a>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2280      	movs	r2, #128	@ 0x80
 80021be:	0052      	lsls	r2, r2, #1
 80021c0:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	@ 0x80
 80021c6:	589b      	ldr	r3, [r3, r2]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	0010      	movs	r0, r2
 80021cc:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b002      	add	sp, #8
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b002      	add	sp, #8
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b002      	add	sp, #8
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	230b      	movs	r3, #11
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2317      	movs	r3, #23
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e07c      	b.n	80023d6 <HAL_LPTIM_RegisterCallback+0x11e>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2252      	movs	r2, #82	@ 0x52
 80022e0:	5c9b      	ldrb	r3, [r3, r2]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d154      	bne.n	8002392 <HAL_LPTIM_RegisterCallback+0xda>
  {
    switch (CallbackID)
 80022e8:	230b      	movs	r3, #11
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	d84a      	bhi.n	8002388 <HAL_LPTIM_RegisterCallback+0xd0>
 80022f2:	009a      	lsls	r2, r3, #2
 80022f4:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <HAL_LPTIM_RegisterCallback+0x128>)
 80022f6:	18d3      	adds	r3, r2, r3
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8002302:	e065      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800230a:	e061      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002312:	e05d      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800231a:	e059      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8002322:	e055      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800232a:	e051      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8002332:	e04d      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800233a:	e049      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8002342:	e045      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800234a:	e041      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2180      	movs	r1, #128	@ 0x80
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	505a      	str	r2, [r3, r1]
        break;
 8002354:	e03c      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2184      	movs	r1, #132	@ 0x84
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	505a      	str	r2, [r3, r1]
        break;
 800235e:	e037      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2188      	movs	r1, #136	@ 0x88
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	505a      	str	r2, [r3, r1]
        break;
 8002368:	e032      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	218c      	movs	r1, #140	@ 0x8c
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	505a      	str	r2, [r3, r1]
        break;
 8002372:	e02d      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2190      	movs	r1, #144	@ 0x90
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	505a      	str	r2, [r3, r1]
        break;
 800237c:	e028      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2194      	movs	r1, #148	@ 0x94
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	505a      	str	r2, [r3, r1]
        break;
 8002386:	e023      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8002388:	2317      	movs	r3, #23
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
        break;
 8002390:	e01e      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2252      	movs	r2, #82	@ 0x52
 8002396:	5c9b      	ldrb	r3, [r3, r2]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d114      	bne.n	80023c8 <HAL_LPTIM_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800239e:	230b      	movs	r3, #11
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_LPTIM_RegisterCallback+0xf6>
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d004      	beq.n	80023b6 <HAL_LPTIM_RegisterCallback+0xfe>
 80023ac:	e007      	b.n	80023be <HAL_LPTIM_RegisterCallback+0x106>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80023b4:	e00c      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80023bc:	e008      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80023be:	2317      	movs	r3, #23
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
        break;
 80023c6:	e003      	b.n	80023d0 <HAL_LPTIM_RegisterCallback+0x118>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80023c8:	2317      	movs	r3, #23
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80023d0:	2317      	movs	r3, #23
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	781b      	ldrb	r3, [r3, #0]
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b006      	add	sp, #24
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	08005db0 	.word	0x08005db0

080023e4 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <LPTIM_ResetCallback+0x70>)
 80023f0:	661a      	str	r2, [r3, #96]	@ 0x60
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a18      	ldr	r2, [pc, #96]	@ (8002458 <LPTIM_ResetCallback+0x74>)
 80023f6:	665a      	str	r2, [r3, #100]	@ 0x64
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a18      	ldr	r2, [pc, #96]	@ (800245c <LPTIM_ResetCallback+0x78>)
 80023fc:	669a      	str	r2, [r3, #104]	@ 0x68
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a17      	ldr	r2, [pc, #92]	@ (8002460 <LPTIM_ResetCallback+0x7c>)
 8002402:	66da      	str	r2, [r3, #108]	@ 0x6c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <LPTIM_ResetCallback+0x80>)
 8002408:	671a      	str	r2, [r3, #112]	@ 0x70
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <LPTIM_ResetCallback+0x84>)
 800240e:	675a      	str	r2, [r3, #116]	@ 0x74
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a16      	ldr	r2, [pc, #88]	@ (800246c <LPTIM_ResetCallback+0x88>)
 8002414:	679a      	str	r2, [r3, #120]	@ 0x78
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <LPTIM_ResetCallback+0x8c>)
 800241a:	67da      	str	r2, [r3, #124]	@ 0x7c
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2180      	movs	r1, #128	@ 0x80
 8002420:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <LPTIM_ResetCallback+0x90>)
 8002422:	505a      	str	r2, [r3, r1]
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2184      	movs	r1, #132	@ 0x84
 8002428:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <LPTIM_ResetCallback+0x94>)
 800242a:	505a      	str	r2, [r3, r1]
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	218c      	movs	r1, #140	@ 0x8c
 8002430:	4a12      	ldr	r2, [pc, #72]	@ (800247c <LPTIM_ResetCallback+0x98>)
 8002432:	505a      	str	r2, [r3, r1]
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2190      	movs	r1, #144	@ 0x90
 8002438:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <LPTIM_ResetCallback+0x9c>)
 800243a:	505a      	str	r2, [r3, r1]
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2194      	movs	r1, #148	@ 0x94
 8002440:	4a10      	ldr	r2, [pc, #64]	@ (8002484 <LPTIM_ResetCallback+0xa0>)
 8002442:	505a      	str	r2, [r3, r1]
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2188      	movs	r1, #136	@ 0x88
 8002448:	4a0f      	ldr	r2, [pc, #60]	@ (8002488 <LPTIM_ResetCallback+0xa4>)
 800244a:	505a      	str	r2, [r3, r1]
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	080021d7 	.word	0x080021d7
 8002458:	080021e7 	.word	0x080021e7
 800245c:	080021f7 	.word	0x080021f7
 8002460:	08002207 	.word	0x08002207
 8002464:	08002217 	.word	0x08002217
 8002468:	08002227 	.word	0x08002227
 800246c:	08002237 	.word	0x08002237
 8002470:	08002247 	.word	0x08002247
 8002474:	08002257 	.word	0x08002257
 8002478:	08002297 	.word	0x08002297
 800247c:	08002267 	.word	0x08002267
 8002480:	08002287 	.word	0x08002287
 8002484:	08002277 	.word	0x08002277
 8002488:	080022a7 	.word	0x080022a7

0800248c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002496:	230f      	movs	r3, #15
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <LPTIM_WaitForFlag+0x68>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4915      	ldr	r1, [pc, #84]	@ (80024f8 <LPTIM_WaitForFlag+0x6c>)
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fd fe41 	bl	800012c <__udivsi3>
 80024aa:	0003      	movs	r3, r0
 80024ac:	001a      	movs	r2, r3
 80024ae:	0013      	movs	r3, r2
 80024b0:	015b      	lsls	r3, r3, #5
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3b01      	subs	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80024c8:	230f      	movs	r3, #15
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2203      	movs	r2, #3
 80024ce:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4013      	ands	r3, r2
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d002      	beq.n	80024e6 <LPTIM_WaitForFlag+0x5a>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ea      	bne.n	80024bc <LPTIM_WaitForFlag+0x30>

  return result;
 80024e6:	230f      	movs	r3, #15
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	00004e20 	.word	0x00004e20

080024fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	429a      	cmp	r2, r3
 800250c:	d137      	bne.n	800257e <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	23c0      	movs	r3, #192	@ 0xc0
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	401a      	ands	r2, r3
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d040      	beq.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002526:	401a      	ands	r2, r3
 8002528:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800252a:	2180      	movs	r1, #128	@ 0x80
 800252c:	0089      	lsls	r1, r1, #2
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2232      	movs	r2, #50	@ 0x32
 8002538:	4353      	muls	r3, r2
 800253a:	491f      	ldr	r1, [pc, #124]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800253c:	0018      	movs	r0, r3
 800253e:	f7fd fdf5 	bl	800012c <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	3301      	adds	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002548:	e002      	b.n	8002550 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	401a      	ands	r2, r3
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	429a      	cmp	r2, r3
 8002560:	d102      	bne.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	401a      	ands	r2, r3
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	429a      	cmp	r2, r3
 8002578:	d113      	bne.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e012      	b.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	23c0      	movs	r3, #192	@ 0xc0
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	401a      	ands	r2, r3
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	429a      	cmp	r2, r3
 800258e:	d008      	beq.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002596:	401a      	ands	r2, r3
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	00c9      	lsls	r1, r1, #3
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b004      	add	sp, #16
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40007000 	.word	0x40007000
 80025b0:	fffff9ff 	.word	0xfffff9ff
 80025b4:	20000000 	.word	0x20000000
 80025b8:	000f4240 	.word	0x000f4240

080025bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <HAL_PWREx_GetVoltageRange+0x14>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	23c0      	movs	r3, #192	@ 0xc0
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4013      	ands	r3, r2
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40007000 	.word	0x40007000

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025dc:	4bc8      	ldr	r3, [pc, #800]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2238      	movs	r2, #56	@ 0x38
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e6:	4bc6      	ldr	r3, [pc, #792]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2203      	movs	r2, #3
 80025ec:	4013      	ands	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2210      	movs	r2, #16
 80025f6:	4013      	ands	r3, r2
 80025f8:	d100      	bne.n	80025fc <HAL_RCC_OscConfig+0x28>
 80025fa:	e0ee      	b.n	80027da <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_RCC_OscConfig+0x3e>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b18      	cmp	r3, #24
 8002606:	d000      	beq.n	800260a <HAL_RCC_OscConfig+0x36>
 8002608:	e093      	b.n	8002732 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d000      	beq.n	8002612 <HAL_RCC_OscConfig+0x3e>
 8002610:	e08f      	b.n	8002732 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002612:	4bbb      	ldr	r3, [pc, #748]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2202      	movs	r2, #2
 8002618:	4013      	ands	r3, r2
 800261a:	d006      	beq.n	800262a <HAL_RCC_OscConfig+0x56>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f000 fbae 	bl	8002d86 <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262e:	4bb4      	ldr	r3, [pc, #720]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2108      	movs	r1, #8
 8002634:	400b      	ands	r3, r1
 8002636:	d004      	beq.n	8002642 <HAL_RCC_OscConfig+0x6e>
 8002638:	4bb1      	ldr	r3, [pc, #708]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	21f0      	movs	r1, #240	@ 0xf0
 800263e:	400b      	ands	r3, r1
 8002640:	e005      	b.n	800264e <HAL_RCC_OscConfig+0x7a>
 8002642:	49af      	ldr	r1, [pc, #700]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002644:	2394      	movs	r3, #148	@ 0x94
 8002646:	58cb      	ldr	r3, [r1, r3]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	21f0      	movs	r1, #240	@ 0xf0
 800264c:	400b      	ands	r3, r1
 800264e:	4293      	cmp	r3, r2
 8002650:	d225      	bcs.n	800269e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fd4c 	bl	80030f4 <RCC_SetFlashLatencyFromMSIRange>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d002      	beq.n	8002666 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f000 fb90 	bl	8002d86 <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002666:	4ba6      	ldr	r3, [pc, #664]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4ba5      	ldr	r3, [pc, #660]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800266c:	2108      	movs	r1, #8
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4ba3      	ldr	r3, [pc, #652]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	22f0      	movs	r2, #240	@ 0xf0
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002680:	4b9f      	ldr	r3, [pc, #636]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002686:	4b9e      	ldr	r3, [pc, #632]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a9e      	ldr	r2, [pc, #632]	@ (8002904 <HAL_RCC_OscConfig+0x330>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	4b9a      	ldr	r3, [pc, #616]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	e027      	b.n	80026ee <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269e:	4b98      	ldr	r3, [pc, #608]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b97      	ldr	r3, [pc, #604]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	2108      	movs	r1, #8
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4b95      	ldr	r3, [pc, #596]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	22f0      	movs	r2, #240	@ 0xf0
 80026b0:	4393      	bics	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026be:	4b90      	ldr	r3, [pc, #576]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a90      	ldr	r2, [pc, #576]	@ (8002904 <HAL_RCC_OscConfig+0x330>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 fd08 	bl	80030f4 <RCC_SetFlashLatencyFromMSIRange>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d002      	beq.n	80026ee <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f000 fb4c 	bl	8002d86 <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80026ee:	f000 fc43 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 80026f2:	0001      	movs	r1, r0
 80026f4:	4b82      	ldr	r3, [pc, #520]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80026f6:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	220f      	movs	r2, #15
 80026fc:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80026fe:	4a82      	ldr	r2, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x334>)
 8002700:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002702:	001a      	movs	r2, r3
 8002704:	231f      	movs	r3, #31
 8002706:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002708:	000a      	movs	r2, r1
 800270a:	40da      	lsrs	r2, r3
 800270c:	4b7f      	ldr	r3, [pc, #508]	@ (800290c <HAL_RCC_OscConfig+0x338>)
 800270e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002710:	4b7f      	ldr	r3, [pc, #508]	@ (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	250f      	movs	r5, #15
 8002716:	197c      	adds	r4, r7, r5
 8002718:	0018      	movs	r0, r3
 800271a:	f7fe fe75 	bl	8001408 <HAL_InitTick>
 800271e:	0003      	movs	r3, r0
 8002720:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8002722:	197b      	adds	r3, r7, r5
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d056      	beq.n	80027d8 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 800272a:	197b      	adds	r3, r7, r5
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	f000 fb2a 	bl	8002d86 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d034      	beq.n	80027a4 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800273a:	4b71      	ldr	r3, [pc, #452]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b70      	ldr	r3, [pc, #448]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002740:	2101      	movs	r1, #1
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002746:	f7fe febb 	bl	80014c0 <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8002750:	f7fe feb6 	bl	80014c0 <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e311      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	4b67      	ldr	r3, [pc, #412]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d0f1      	beq.n	8002750 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276c:	4b64      	ldr	r3, [pc, #400]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002772:	2108      	movs	r1, #8
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4b61      	ldr	r3, [pc, #388]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	22f0      	movs	r2, #240	@ 0xf0
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002786:	4b5e      	ldr	r3, [pc, #376]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278c:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a5c      	ldr	r2, [pc, #368]	@ (8002904 <HAL_RCC_OscConfig+0x330>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	4b58      	ldr	r3, [pc, #352]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	e01a      	b.n	80027da <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027a4:	4b56      	ldr	r3, [pc, #344]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b55      	ldr	r3, [pc, #340]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fe86 	bl	80014c0 <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80027ba:	f7fe fe81 	bl	80014c0 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e2dc      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d1f1      	bne.n	80027ba <HAL_RCC_OscConfig+0x1e6>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d100      	bne.n	80027e6 <HAL_RCC_OscConfig+0x212>
 80027e4:	e065      	b.n	80028b2 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x224>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b18      	cmp	r3, #24
 80027f0:	d10e      	bne.n	8002810 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	029b      	lsls	r3, r3, #10
 8002800:	4013      	ands	r3, r2
 8002802:	d055      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2dc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d151      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e2ba      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	429a      	cmp	r2, r3
 800281a:	d107      	bne.n	800282c <HAL_RCC_OscConfig+0x258>
 800281c:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	0249      	lsls	r1, r1, #9
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e013      	b.n	8002854 <HAL_RCC_OscConfig+0x280>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	23a0      	movs	r3, #160	@ 0xa0
 8002832:	02db      	lsls	r3, r3, #11
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <HAL_RCC_OscConfig+0x274>
 8002838:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b30      	ldr	r3, [pc, #192]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800283e:	21a0      	movs	r1, #160	@ 0xa0
 8002840:	02c9      	lsls	r1, r1, #11
 8002842:	430a      	orrs	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e005      	b.n	8002854 <HAL_RCC_OscConfig+0x280>
 8002848:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800284e:	4931      	ldr	r1, [pc, #196]	@ (8002914 <HAL_RCC_OscConfig+0x340>)
 8002850:	400a      	ands	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d014      	beq.n	8002886 <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fe30 	bl	80014c0 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002866:	f7fe fe2b 	bl	80014c0 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	@ 0x64
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e286      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	@ 0x80
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	4013      	ands	r3, r2
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x292>
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fe1b 	bl	80014c0 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002890:	f7fe fe16 	bl	80014c0 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e271      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x2bc>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x2ea>
 80028bc:	e073      	b.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2fc>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b18      	cmp	r3, #24
 80028c8:	d128      	bne.n	800291c <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d125      	bne.n	800291c <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4013      	ands	r3, r2
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x314>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e24e      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <HAL_RCC_OscConfig+0x344>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	061a      	lsls	r2, r3, #24
 80028f8:	4b01      	ldr	r3, [pc, #4]	@ (8002900 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fe:	e052      	b.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
 8002900:	40021000 	.word	0x40021000
 8002904:	ffff00ff 	.word	0xffff00ff
 8002908:	08005d68 	.word	0x08005d68
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004
 8002914:	fffaffff 	.word	0xfffaffff
 8002918:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d026      	beq.n	8002972 <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4bc7      	ldr	r3, [pc, #796]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4bc6      	ldr	r3, [pc, #792]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 800292a:	2180      	movs	r1, #128	@ 0x80
 800292c:	0049      	lsls	r1, r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe fdc5 	bl	80014c0 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800293c:	f7fe fdc0 	bl	80014c0 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e21b      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294e:	4bbd      	ldr	r3, [pc, #756]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4013      	ands	r3, r2
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4bba      	ldr	r3, [pc, #744]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4aba      	ldr	r2, [pc, #744]	@ (8002c48 <HAL_RCC_OscConfig+0x674>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061a      	lsls	r2, r3, #24
 800296a:	4bb6      	ldr	r3, [pc, #728]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	e019      	b.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4bb4      	ldr	r3, [pc, #720]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4bb3      	ldr	r3, [pc, #716]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002978:	49b4      	ldr	r1, [pc, #720]	@ (8002c4c <HAL_RCC_OscConfig+0x678>)
 800297a:	400a      	ands	r2, r1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fd9f 	bl	80014c0 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002988:	f7fe fd9a 	bl	80014c0 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1f5      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299a:	4baa      	ldr	r3, [pc, #680]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4013      	ands	r3, r2
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2208      	movs	r2, #8
 80029ac:	4013      	ands	r3, r2
 80029ae:	d051      	beq.n	8002a54 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d031      	beq.n	8002a1c <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d108      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80029c0:	4aa0      	ldr	r2, [pc, #640]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 80029c2:	2394      	movs	r3, #148	@ 0x94
 80029c4:	58d3      	ldr	r3, [r2, r3]
 80029c6:	499f      	ldr	r1, [pc, #636]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 80029c8:	2204      	movs	r2, #4
 80029ca:	4393      	bics	r3, r2
 80029cc:	2294      	movs	r2, #148	@ 0x94
 80029ce:	508b      	str	r3, [r1, r2]
 80029d0:	e007      	b.n	80029e2 <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80029d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 80029d4:	2394      	movs	r3, #148	@ 0x94
 80029d6:	58d3      	ldr	r3, [r2, r3]
 80029d8:	499a      	ldr	r1, [pc, #616]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 80029da:	2204      	movs	r2, #4
 80029dc:	4313      	orrs	r3, r2
 80029de:	2294      	movs	r2, #148	@ 0x94
 80029e0:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4a98      	ldr	r2, [pc, #608]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 80029e4:	2394      	movs	r3, #148	@ 0x94
 80029e6:	58d3      	ldr	r3, [r2, r3]
 80029e8:	4996      	ldr	r1, [pc, #600]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	4313      	orrs	r3, r2
 80029ee:	2294      	movs	r2, #148	@ 0x94
 80029f0:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fd65 	bl	80014c0 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fe fd60 	bl	80014c0 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b11      	cmp	r3, #17
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1bb      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a0e:	4a8d      	ldr	r2, [pc, #564]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a10:	2394      	movs	r3, #148	@ 0x94
 8002a12:	58d3      	ldr	r3, [r2, r3]
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x428>
 8002a1a:	e01b      	b.n	8002a54 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1c:	4a89      	ldr	r2, [pc, #548]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a1e:	2394      	movs	r3, #148	@ 0x94
 8002a20:	58d3      	ldr	r3, [r2, r3]
 8002a22:	4988      	ldr	r1, [pc, #544]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	4393      	bics	r3, r2
 8002a28:	2294      	movs	r2, #148	@ 0x94
 8002a2a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fd48 	bl	80014c0 <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fe fd43 	bl	80014c0 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b11      	cmp	r3, #17
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e19e      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a48:	4a7e      	ldr	r2, [pc, #504]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a4a:	2394      	movs	r3, #148	@ 0x94
 8002a4c:	58d3      	ldr	r3, [r2, r3]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	4013      	ands	r3, r2
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d100      	bne.n	8002a60 <HAL_RCC_OscConfig+0x48c>
 8002a5e:	e10d      	b.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a60:	201f      	movs	r0, #31
 8002a62:	183b      	adds	r3, r7, r0
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8002a68:	4b76      	ldr	r3, [pc, #472]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	055b      	lsls	r3, r3, #21
 8002a70:	4013      	ands	r3, r2
 8002a72:	d110      	bne.n	8002a96 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b73      	ldr	r3, [pc, #460]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a78:	4b72      	ldr	r3, [pc, #456]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a7a:	2180      	movs	r1, #128	@ 0x80
 8002a7c:	0549      	lsls	r1, r1, #21
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a82:	4b70      	ldr	r3, [pc, #448]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	055b      	lsls	r3, r3, #21
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	183b      	adds	r3, r7, r0
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a96:	4b6e      	ldr	r3, [pc, #440]	@ (8002c50 <HAL_RCC_OscConfig+0x67c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d11a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c50 <HAL_RCC_OscConfig+0x67c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <HAL_RCC_OscConfig+0x67c>)
 8002aa8:	2180      	movs	r1, #128	@ 0x80
 8002aaa:	0049      	lsls	r1, r1, #1
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fd06 	bl	80014c0 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fd01 	bl	80014c0 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e15c      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <HAL_RCC_OscConfig+0x67c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d01e      	beq.n	8002b20 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d010      	beq.n	8002b0e <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aec:	4a55      	ldr	r2, [pc, #340]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002aee:	2390      	movs	r3, #144	@ 0x90
 8002af0:	58d3      	ldr	r3, [r2, r3]
 8002af2:	4954      	ldr	r1, [pc, #336]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002af4:	2204      	movs	r2, #4
 8002af6:	4313      	orrs	r3, r2
 8002af8:	2290      	movs	r2, #144	@ 0x90
 8002afa:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002afc:	4a51      	ldr	r2, [pc, #324]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002afe:	2390      	movs	r3, #144	@ 0x90
 8002b00:	58d3      	ldr	r3, [r2, r3]
 8002b02:	4950      	ldr	r1, [pc, #320]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	4313      	orrs	r3, r2
 8002b08:	2290      	movs	r2, #144	@ 0x90
 8002b0a:	508b      	str	r3, [r1, r2]
 8002b0c:	e018      	b.n	8002b40 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b10:	2390      	movs	r3, #144	@ 0x90
 8002b12:	58d3      	ldr	r3, [r2, r3]
 8002b14:	494b      	ldr	r1, [pc, #300]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	2290      	movs	r2, #144	@ 0x90
 8002b1c:	508b      	str	r3, [r1, r2]
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b20:	4a48      	ldr	r2, [pc, #288]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b22:	2390      	movs	r3, #144	@ 0x90
 8002b24:	58d3      	ldr	r3, [r2, r3]
 8002b26:	4947      	ldr	r1, [pc, #284]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	2290      	movs	r2, #144	@ 0x90
 8002b2e:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b30:	4a44      	ldr	r2, [pc, #272]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b32:	2390      	movs	r3, #144	@ 0x90
 8002b34:	58d3      	ldr	r3, [r2, r3]
 8002b36:	4943      	ldr	r1, [pc, #268]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	2290      	movs	r2, #144	@ 0x90
 8002b3e:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d04f      	beq.n	8002be8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fe fcba 	bl	80014c0 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b50:	e009      	b.n	8002b66 <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fcb5 	bl	80014c0 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e10f      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	4a37      	ldr	r2, [pc, #220]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b68:	2390      	movs	r3, #144	@ 0x90
 8002b6a:	58d3      	ldr	r3, [r2, r3]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d0ef      	beq.n	8002b52 <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d01a      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b7c:	4a31      	ldr	r2, [pc, #196]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b7e:	2390      	movs	r3, #144	@ 0x90
 8002b80:	58d3      	ldr	r3, [r2, r3]
 8002b82:	4930      	ldr	r1, [pc, #192]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	4313      	orrs	r3, r2
 8002b88:	2290      	movs	r2, #144	@ 0x90
 8002b8a:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fc97 	bl	80014c0 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	4a2e      	ldr	r2, [pc, #184]	@ (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0f1      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ba2:	4a28      	ldr	r2, [pc, #160]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002ba4:	2390      	movs	r3, #144	@ 0x90
 8002ba6:	58d2      	ldr	r2, [r2, r3]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4013      	ands	r3, r2
 8002bae:	d0ee      	beq.n	8002b8e <HAL_RCC_OscConfig+0x5ba>
 8002bb0:	e059      	b.n	8002c66 <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002bb4:	2390      	movs	r3, #144	@ 0x90
 8002bb6:	58d3      	ldr	r3, [r2, r3]
 8002bb8:	4922      	ldr	r1, [pc, #136]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002bba:	2280      	movs	r2, #128	@ 0x80
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	2290      	movs	r2, #144	@ 0x90
 8002bc0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bc2:	e009      	b.n	8002bd8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fc7c 	bl	80014c0 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	4a21      	ldr	r2, [pc, #132]	@ (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0d6      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002bda:	2390      	movs	r3, #144	@ 0x90
 8002bdc:	58d2      	ldr	r2, [r2, r3]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	d1ee      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5f0>
 8002be6:	e03e      	b.n	8002c66 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fc6a 	bl	80014c0 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fc65 	bl	80014c0 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a15      	ldr	r2, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0bf      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c06:	4a0f      	ldr	r2, [pc, #60]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002c08:	2390      	movs	r3, #144	@ 0x90
 8002c0a:	58d3      	ldr	r3, [r2, r3]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d1ef      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002c12:	4a0c      	ldr	r2, [pc, #48]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002c14:	2390      	movs	r3, #144	@ 0x90
 8002c16:	58d3      	ldr	r3, [r2, r3]
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d023      	beq.n	8002c66 <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c1e:	4a09      	ldr	r2, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002c20:	2390      	movs	r3, #144	@ 0x90
 8002c22:	58d3      	ldr	r3, [r2, r3]
 8002c24:	4907      	ldr	r1, [pc, #28]	@ (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	4393      	bics	r3, r2
 8002c2a:	2290      	movs	r2, #144	@ 0x90
 8002c2c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c30:	f7fe fc46 	bl	80014c0 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d90b      	bls.n	8002c58 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0a0      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	80ffffff 	.word	0x80ffffff
 8002c4c:	fffffeff 	.word	0xfffffeff
 8002c50:	40007000 	.word	0x40007000
 8002c54:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c58:	4a4d      	ldr	r2, [pc, #308]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002c5a:	2390      	movs	r3, #144	@ 0x90
 8002c5c:	58d2      	ldr	r2, [r2, r3]
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4013      	ands	r3, r2
 8002c64:	d1e4      	bne.n	8002c30 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c66:	231f      	movs	r3, #31
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002c72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c74:	4b46      	ldr	r3, [pc, #280]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002c76:	4947      	ldr	r1, [pc, #284]	@ (8002d94 <HAL_RCC_OscConfig+0x7c0>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x6b2>
 8002c84:	e07e      	b.n	8002d84 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c86:	4b42      	ldr	r3, [pc, #264]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2238      	movs	r2, #56	@ 0x38
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b18      	cmp	r3, #24
 8002c90:	d100      	bne.n	8002c94 <HAL_RCC_OscConfig+0x6c0>
 8002c92:	e075      	b.n	8002d80 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d156      	bne.n	8002d4a <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002ca2:	493d      	ldr	r1, [pc, #244]	@ (8002d98 <HAL_RCC_OscConfig+0x7c4>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fc0a 	bl	80014c0 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe fc05 	bl	80014c0 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e060      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	4b32      	ldr	r3, [pc, #200]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	049b      	lsls	r3, r3, #18
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a31      	ldr	r2, [pc, #196]	@ (8002d9c <HAL_RCC_OscConfig+0x7c8>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	4b24      	ldr	r3, [pc, #144]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8002d04:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d0a:	2180      	movs	r1, #128	@ 0x80
 8002d0c:	0549      	lsls	r1, r1, #21
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d12:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	0449      	lsls	r1, r1, #17
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fbce 	bl	80014c0 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe fbc9 	bl	80014c0 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e024      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	049b      	lsls	r3, r3, #18
 8002d44:	4013      	ands	r3, r2
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x756>
 8002d48:	e01c      	b.n	8002d84 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d50:	4911      	ldr	r1, [pc, #68]	@ (8002d98 <HAL_RCC_OscConfig+0x7c4>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fbb3 	bl	80014c0 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe fbae 	bl	80014c0 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e009      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <HAL_RCC_OscConfig+0x7bc>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x78c>
 8002d7e:	e001      	b.n	8002d84 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b008      	add	sp, #32
 8002d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	40021000 	.word	0x40021000
 8002d94:	efffffff 	.word	0xefffffff
 8002d98:	feffffff 	.word	0xfeffffff
 8002d9c:	11c1808c 	.word	0x11c1808c

08002da0 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002daa:	4b6c      	ldr	r3, [pc, #432]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2207      	movs	r2, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d911      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db8:	4b68      	ldr	r3, [pc, #416]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	4393      	bics	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b64      	ldr	r3, [pc, #400]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2207      	movs	r2, #7
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0bb      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	d100      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x48>
 8002de6:	e064      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	049b      	lsls	r3, r3, #18
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d138      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0a9      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e08:	4b55      	ldr	r3, [pc, #340]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	029b      	lsls	r3, r3, #10
 8002e10:	4013      	ands	r3, r2
 8002e12:	d12c      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e09d      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e20:	4b4f      	ldr	r3, [pc, #316]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d121      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e092      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e36:	4b4a      	ldr	r3, [pc, #296]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d115      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e086      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4e:	4a44      	ldr	r2, [pc, #272]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	2394      	movs	r3, #148	@ 0x94
 8002e52:	58d3      	ldr	r3, [r2, r3]
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d109      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07a      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	4a40      	ldr	r2, [pc, #256]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	2390      	movs	r3, #144	@ 0x90
 8002e62:	58d3      	ldr	r3, [r2, r3]
 8002e64:	2202      	movs	r2, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e072      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2207      	movs	r2, #7
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4b38      	ldr	r3, [pc, #224]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e82:	f7fe fb1d 	bl	80014c0 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7fe fb18 	bl	80014c0 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	4a33      	ldr	r2, [pc, #204]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e059      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2238      	movs	r2, #56	@ 0x38
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d1ec      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a29      	ldr	r2, [pc, #164]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d211      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e028      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a16      	ldr	r2, [pc, #88]	@ (8002f6c <HAL_RCC_ClockConfig+0x1cc>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002f20:	f000 f82a 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f24:	0001      	movs	r1, r0
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002f30:	4a0f      	ldr	r2, [pc, #60]	@ (8002f70 <HAL_RCC_ClockConfig+0x1d0>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f34:	001a      	movs	r2, r3
 8002f36:	231f      	movs	r3, #31
 8002f38:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002f3a:	000a      	movs	r2, r1
 8002f3c:	40da      	lsrs	r2, r3
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <HAL_RCC_ClockConfig+0x1d4>)
 8002f40:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8002f42:	250b      	movs	r5, #11
 8002f44:	197c      	adds	r4, r7, r5
 8002f46:	2003      	movs	r0, #3
 8002f48:	f7fe fa5e 	bl	8001408 <HAL_InitTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8002f50:	197b      	adds	r3, r7, r5
 8002f52:	781b      	ldrb	r3, [r3, #0]
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b004      	add	sp, #16
 8002f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	00001388 	.word	0x00001388
 8002f68:	fffff0ff 	.word	0xfffff0ff
 8002f6c:	ffff8fff 	.word	0xffff8fff
 8002f70:	08005d68 	.word	0x08005d68
 8002f74:	20000000 	.word	0x20000000

08002f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f86:	4b46      	ldr	r3, [pc, #280]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2238      	movs	r2, #56	@ 0x38
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f90:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2203      	movs	r2, #3
 8002f96:	4013      	ands	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x34>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b18      	cmp	r3, #24
 8002fa4:	d125      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d122      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fac:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8002fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002fb8:	2394      	movs	r3, #148	@ 0x94
 8002fba:	58d3      	ldr	r3, [r2, r3]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc4:	e005      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	220f      	movs	r2, #15
 8002fce:	4013      	ands	r3, r2
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	2b0b      	cmp	r3, #11
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8002fdc:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	0092      	lsls	r2, r2, #2
 8002fe2:	58d3      	ldr	r3, [r2, r3]
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11b      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ff0:	e018      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d102      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002ffa:	623b      	str	r3, [r7, #32]
 8002ffc:	e012      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b10      	cmp	r3, #16
 8003002:	d102      	bne.n	800300a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x134>)
 8003006:	623b      	str	r3, [r7, #32]
 8003008:	e00c      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b20      	cmp	r3, #32
 800300e:	d103      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003010:	23fa      	movs	r3, #250	@ 0xfa
 8003012:	01db      	lsls	r3, r3, #7
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b28      	cmp	r3, #40	@ 0x28
 800301c:	d102      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b18      	cmp	r3, #24
 8003028:	d135      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2203      	movs	r2, #3
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003034:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	2207      	movs	r2, #7
 800303c:	4013      	ands	r3, r2
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0xd8>
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0xde>
 800304e:	e005      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8003050:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x130>)
 8003052:	61fb      	str	r3, [r7, #28]
        break;
 8003054:	e005      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x134>)
 8003058:	61fb      	str	r3, [r7, #28]
        break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	61fb      	str	r3, [r7, #28]
        break;
 8003060:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8003062:	4b0f      	ldr	r3, [pc, #60]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	227f      	movs	r2, #127	@ 0x7f
 800306a:	4013      	ands	r3, r2
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	4353      	muls	r3, r2
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	0018      	movs	r0, r3
 8003074:	f7fd f85a 	bl	800012c <__udivsi3>
 8003078:	0003      	movs	r3, r0
 800307a:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x128>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0f5b      	lsrs	r3, r3, #29
 8003082:	2207      	movs	r2, #7
 8003084:	4013      	ands	r3, r2
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68b8      	ldr	r0, [r7, #8]
 800308e:	f7fd f84d 	bl	800012c <__udivsi3>
 8003092:	0003      	movs	r3, r0
 8003094:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003096:	6a3b      	ldr	r3, [r7, #32]
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b00a      	add	sp, #40	@ 0x28
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08005d80 	.word	0x08005d80
 80030a8:	00f42400 	.word	0x00f42400
 80030ac:	003d0900 	.word	0x003d0900

080030b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b4:	4b02      	ldr	r3, [pc, #8]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80030c8:	f7ff fff2 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 80030cc:	0001      	movs	r1, r0
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0b1b      	lsrs	r3, r3, #12
 80030d4:	2207      	movs	r2, #7
 80030d6:	4013      	ands	r3, r2
 80030d8:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	001a      	movs	r2, r3
 80030de:	231f      	movs	r3, #31
 80030e0:	4013      	ands	r3, r2
 80030e2:	40d9      	lsrs	r1, r3
 80030e4:	000b      	movs	r3, r1
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08005d78 	.word	0x08005d78

080030f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003100:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003102:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	055b      	lsls	r3, r3, #21
 8003108:	4013      	ands	r3, r2
 800310a:	d004      	beq.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800310c:	f7ff fa56 	bl	80025bc <HAL_PWREx_GetVoltageRange>
 8003110:	0003      	movs	r3, r0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e017      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003118:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800311a:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800311c:	2180      	movs	r1, #128	@ 0x80
 800311e:	0549      	lsls	r1, r1, #21
 8003120:	430a      	orrs	r2, r1
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58
 8003124:	4b26      	ldr	r3, [pc, #152]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003126:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	055b      	lsls	r3, r3, #21
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003132:	f7ff fa43 	bl	80025bc <HAL_PWREx_GetVoltageRange>
 8003136:	0003      	movs	r3, r0
 8003138:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800313c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800313e:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8003140:	4920      	ldr	r1, [pc, #128]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8003142:	400a      	ands	r2, r1
 8003144:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d111      	bne.n	8003174 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d91c      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2bb0      	cmp	r3, #176	@ 0xb0
 800315a:	d902      	bls.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315c:	2302      	movs	r3, #2
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	e016      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b90      	cmp	r3, #144	@ 0x90
 8003166:	d902      	bls.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e010      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e00d      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b7f      	cmp	r3, #127	@ 0x7f
 8003178:	d902      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e007      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b70      	cmp	r3, #112	@ 0x70
 8003184:	d102      	bne.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003186:	2301      	movs	r3, #1
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e001      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003190:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2207      	movs	r2, #7
 8003196:	4393      	bics	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80031a2:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2207      	movs	r2, #7
 80031a8:	4013      	ands	r3, r2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	40021000 	.word	0x40021000
 80031c4:	efffffff 	.word	0xefffffff
 80031c8:	40022000 	.word	0x40022000

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d4:	2313      	movs	r3, #19
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031dc:	2312      	movs	r3, #18
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	4013      	ands	r3, r2
 80031ee:	d100      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031f0:	e0b7      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2011      	movs	r0, #17
 80031f4:	183b      	adds	r3, r7, r0
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b4c      	ldr	r3, [pc, #304]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	055b      	lsls	r3, r3, #21
 8003202:	4013      	ands	r3, r2
 8003204:	d110      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b49      	ldr	r3, [pc, #292]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800320a:	4b48      	ldr	r3, [pc, #288]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320c:	2180      	movs	r1, #128	@ 0x80
 800320e:	0549      	lsls	r1, r1, #21
 8003210:	430a      	orrs	r2, r1
 8003212:	659a      	str	r2, [r3, #88]	@ 0x58
 8003214:	4b45      	ldr	r3, [pc, #276]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	055b      	lsls	r3, r3, #21
 800321c:	4013      	ands	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	183b      	adds	r3, r7, r0
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003228:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322e:	2180      	movs	r1, #128	@ 0x80
 8003230:	0049      	lsls	r1, r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003236:	f7fe f943 	bl	80014c0 <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800323e:	e00b      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fe f93e 	bl	80014c0 <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d904      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800324e:	2313      	movs	r3, #19
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2203      	movs	r2, #3
 8003254:	701a      	strb	r2, [r3, #0]
        break;
 8003256:	e005      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003258:	4b35      	ldr	r3, [pc, #212]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d0ed      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003264:	2313      	movs	r3, #19
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d168      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800326e:	4a2f      	ldr	r2, [pc, #188]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003270:	2390      	movs	r3, #144	@ 0x90
 8003272:	58d2      	ldr	r2, [r2, r3]
 8003274:	23c0      	movs	r3, #192	@ 0xc0
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4013      	ands	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01f      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	d01a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800328c:	4a27      	ldr	r2, [pc, #156]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	2390      	movs	r3, #144	@ 0x90
 8003290:	58d3      	ldr	r3, [r2, r3]
 8003292:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003294:	4013      	ands	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003298:	4a24      	ldr	r2, [pc, #144]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	2390      	movs	r3, #144	@ 0x90
 800329c:	58d3      	ldr	r3, [r2, r3]
 800329e:	4923      	ldr	r1, [pc, #140]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a0:	2280      	movs	r2, #128	@ 0x80
 80032a2:	0252      	lsls	r2, r2, #9
 80032a4:	4313      	orrs	r3, r2
 80032a6:	2290      	movs	r2, #144	@ 0x90
 80032a8:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032aa:	4a20      	ldr	r2, [pc, #128]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ac:	2390      	movs	r3, #144	@ 0x90
 80032ae:	58d3      	ldr	r3, [r2, r3]
 80032b0:	491e      	ldr	r1, [pc, #120]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	4a21      	ldr	r2, [pc, #132]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	2290      	movs	r2, #144	@ 0x90
 80032b8:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ba:	491c      	ldr	r1, [pc, #112]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	2290      	movs	r2, #144	@ 0x90
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4013      	ands	r3, r2
 80032c8:	d017      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe f8f9 	bl	80014c0 <HAL_GetTick>
 80032ce:	0003      	movs	r3, r0
 80032d0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d2:	e00c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fe f8f4 	bl	80014c0 <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	4a17      	ldr	r2, [pc, #92]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d904      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80032e4:	2313      	movs	r3, #19
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2203      	movs	r2, #3
 80032ea:	701a      	strb	r2, [r3, #0]
            break;
 80032ec:	e005      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	4a0f      	ldr	r2, [pc, #60]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	2390      	movs	r3, #144	@ 0x90
 80032f2:	58d3      	ldr	r3, [r2, r3]
 80032f4:	2202      	movs	r2, #2
 80032f6:	4013      	ands	r3, r2
 80032f8:	d0ec      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80032fa:	2313      	movs	r3, #19
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003304:	4a09      	ldr	r2, [pc, #36]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	2390      	movs	r3, #144	@ 0x90
 8003308:	58d3      	ldr	r3, [r2, r3]
 800330a:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330c:	401a      	ands	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003312:	4906      	ldr	r1, [pc, #24]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003314:	4313      	orrs	r3, r2
 8003316:	2290      	movs	r2, #144	@ 0x90
 8003318:	508b      	str	r3, [r1, r2]
 800331a:	e017      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800331c:	2312      	movs	r3, #18
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2213      	movs	r2, #19
 8003322:	18ba      	adds	r2, r7, r2
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e010      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
 8003334:	fffffcff 	.word	0xfffffcff
 8003338:	fffeffff 	.word	0xfffeffff
 800333c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	2312      	movs	r3, #18
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2213      	movs	r2, #19
 8003346:	18ba      	adds	r2, r7, r2
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800334c:	2311      	movs	r3, #17
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b84      	ldr	r3, [pc, #528]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003358:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800335a:	4b83      	ldr	r3, [pc, #524]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800335c:	4983      	ldr	r1, [pc, #524]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800335e:	400a      	ands	r2, r1
 8003360:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4013      	ands	r3, r2
 800336a:	d00b      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336c:	4a7e      	ldr	r2, [pc, #504]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800336e:	2388      	movs	r3, #136	@ 0x88
 8003370:	58d3      	ldr	r3, [r2, r3]
 8003372:	2203      	movs	r2, #3
 8003374:	4393      	bics	r3, r2
 8003376:	001a      	movs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	497a      	ldr	r1, [pc, #488]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	2288      	movs	r2, #136	@ 0x88
 8003382:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2202      	movs	r2, #2
 800338a:	4013      	ands	r3, r2
 800338c:	d00b      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800338e:	4a76      	ldr	r2, [pc, #472]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003390:	2388      	movs	r3, #136	@ 0x88
 8003392:	58d3      	ldr	r3, [r2, r3]
 8003394:	220c      	movs	r2, #12
 8003396:	4393      	bics	r3, r2
 8003398:	001a      	movs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4972      	ldr	r1, [pc, #456]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	2288      	movs	r2, #136	@ 0x88
 80033a4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2210      	movs	r2, #16
 80033ac:	4013      	ands	r3, r2
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033b2:	2388      	movs	r3, #136	@ 0x88
 80033b4:	58d3      	ldr	r3, [r2, r3]
 80033b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	496a      	ldr	r1, [pc, #424]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	2288      	movs	r2, #136	@ 0x88
 80033c4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2208      	movs	r2, #8
 80033cc:	4013      	ands	r3, r2
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80033d0:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033d2:	2388      	movs	r3, #136	@ 0x88
 80033d4:	58d3      	ldr	r3, [r2, r3]
 80033d6:	4a67      	ldr	r2, [pc, #412]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80033d8:	401a      	ands	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4962      	ldr	r1, [pc, #392]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	2288      	movs	r2, #136	@ 0x88
 80033e4:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2220      	movs	r2, #32
 80033ec:	4013      	ands	r3, r2
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80033f2:	2388      	movs	r3, #136	@ 0x88
 80033f4:	58d3      	ldr	r3, [r2, r3]
 80033f6:	4a60      	ldr	r2, [pc, #384]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80033f8:	401a      	ands	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	495a      	ldr	r1, [pc, #360]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	2288      	movs	r2, #136	@ 0x88
 8003404:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	4013      	ands	r3, r2
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003410:	4a55      	ldr	r2, [pc, #340]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003412:	2388      	movs	r3, #136	@ 0x88
 8003414:	58d3      	ldr	r3, [r2, r3]
 8003416:	4a59      	ldr	r2, [pc, #356]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	4952      	ldr	r1, [pc, #328]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	2288      	movs	r2, #136	@ 0x88
 8003424:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2280      	movs	r2, #128	@ 0x80
 800342c:	4013      	ands	r3, r2
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003430:	4a4d      	ldr	r2, [pc, #308]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003432:	2388      	movs	r3, #136	@ 0x88
 8003434:	58d3      	ldr	r3, [r2, r3]
 8003436:	4a52      	ldr	r2, [pc, #328]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8003438:	401a      	ands	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	494a      	ldr	r1, [pc, #296]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	2288      	movs	r2, #136	@ 0x88
 8003444:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4013      	ands	r3, r2
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003452:	4a45      	ldr	r2, [pc, #276]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003454:	2388      	movs	r3, #136	@ 0x88
 8003456:	58d3      	ldr	r3, [r2, r3]
 8003458:	4a4a      	ldr	r2, [pc, #296]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800345a:	401a      	ands	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4941      	ldr	r1, [pc, #260]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	2288      	movs	r2, #136	@ 0x88
 8003466:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2380      	movs	r3, #128	@ 0x80
 800346e:	01db      	lsls	r3, r3, #7
 8003470:	4013      	ands	r3, r2
 8003472:	d017      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	055b      	lsls	r3, r3, #21
 800347c:	429a      	cmp	r2, r3
 800347e:	d106      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8003480:	4b39      	ldr	r3, [pc, #228]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	4b38      	ldr	r3, [pc, #224]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003486:	2180      	movs	r1, #128	@ 0x80
 8003488:	0249      	lsls	r1, r1, #9
 800348a:	430a      	orrs	r2, r1
 800348c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800348e:	4a36      	ldr	r2, [pc, #216]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003490:	2388      	movs	r3, #136	@ 0x88
 8003492:	58d3      	ldr	r3, [r2, r3]
 8003494:	4a3c      	ldr	r2, [pc, #240]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	4932      	ldr	r1, [pc, #200]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	2288      	movs	r2, #136	@ 0x88
 80034a2:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2380      	movs	r3, #128	@ 0x80
 80034aa:	019b      	lsls	r3, r3, #6
 80034ac:	4013      	ands	r3, r2
 80034ae:	d017      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b4:	2380      	movs	r3, #128	@ 0x80
 80034b6:	051b      	lsls	r3, r3, #20
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d106      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80034bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	4b29      	ldr	r3, [pc, #164]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034c2:	2180      	movs	r1, #128	@ 0x80
 80034c4:	0449      	lsls	r1, r1, #17
 80034c6:	430a      	orrs	r2, r1
 80034c8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034ca:	4a27      	ldr	r2, [pc, #156]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034cc:	2388      	movs	r3, #136	@ 0x88
 80034ce:	58d3      	ldr	r3, [r2, r3]
 80034d0:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	4923      	ldr	r1, [pc, #140]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	2288      	movs	r2, #136	@ 0x88
 80034de:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	d017      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034f0:	2380      	movs	r3, #128	@ 0x80
 80034f2:	045b      	lsls	r3, r3, #17
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80034fe:	2180      	movs	r1, #128	@ 0x80
 8003500:	0449      	lsls	r1, r1, #17
 8003502:	430a      	orrs	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003508:	2388      	movs	r3, #136	@ 0x88
 800350a:	58d3      	ldr	r3, [r2, r3]
 800350c:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	4914      	ldr	r1, [pc, #80]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	2288      	movs	r2, #136	@ 0x88
 800351a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d017      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	049b      	lsls	r3, r3, #18
 8003530:	429a      	cmp	r2, r3
 8003532:	d106      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0449      	lsls	r1, r1, #17
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003542:	4a09      	ldr	r2, [pc, #36]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003544:	2388      	movs	r3, #136	@ 0x88
 8003546:	58d3      	ldr	r3, [r2, r3]
 8003548:	4a11      	ldr	r2, [pc, #68]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	4905      	ldr	r1, [pc, #20]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	2288      	movs	r2, #136	@ 0x88
 8003556:	508b      	str	r3, [r1, r2]

  }

  return status;
 8003558:	2312      	movs	r3, #18
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b006      	add	sp, #24
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	40021000 	.word	0x40021000
 800356c:	efffffff 	.word	0xefffffff
 8003570:	fffff3ff 	.word	0xfffff3ff
 8003574:	fffffcff 	.word	0xfffffcff
 8003578:	ffffcfff 	.word	0xffffcfff
 800357c:	fffcffff 	.word	0xfffcffff
 8003580:	fff3ffff 	.word	0xfff3ffff
 8003584:	ffcfffff 	.word	0xffcfffff
 8003588:	cfffffff 	.word	0xcfffffff
 800358c:	f3ffffff 	.word	0xf3ffffff
 8003590:	feffffff 	.word	0xfeffffff

08003594 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d154      	bne.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80035aa:	4ad0      	ldr	r2, [pc, #832]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80035ac:	2390      	movs	r3, #144	@ 0x90
 80035ae:	58d2      	ldr	r2, [r2, r3]
 80035b0:	23c0      	movs	r3, #192	@ 0xc0
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	23c0      	movs	r3, #192	@ 0xc0
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	429a      	cmp	r2, r3
 80035c0:	d039      	beq.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	23c0      	movs	r3, #192	@ 0xc0
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80035cc:	f000 fbf3 	bl	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d006      	beq.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d00f      	beq.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80035e4:	f000 fbe7 	bl	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80035e8:	4ac0      	ldr	r2, [pc, #768]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80035ea:	2390      	movs	r3, #144	@ 0x90
 80035ec:	58d3      	ldr	r3, [r2, r3]
 80035ee:	2202      	movs	r2, #2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d001      	beq.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 80035f6:	f000 fbe0 	bl	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	61fb      	str	r3, [r7, #28]
        break;
 8003600:	f000 fbdb 	bl	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003604:	4ab9      	ldr	r2, [pc, #740]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003606:	2394      	movs	r3, #148	@ 0x94
 8003608:	58d3      	ldr	r3, [r2, r3]
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d001      	beq.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8003612:	f000 fbd4 	bl	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003616:	4ab5      	ldr	r2, [pc, #724]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003618:	2394      	movs	r3, #148	@ 0x94
 800361a:	58d3      	ldr	r3, [r2, r3]
 800361c:	2204      	movs	r2, #4
 800361e:	4013      	ands	r3, r2
 8003620:	2b04      	cmp	r3, #4
 8003622:	d103      	bne.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8003624:	23fa      	movs	r3, #250	@ 0xfa
 8003626:	61fb      	str	r3, [r7, #28]
        break;
 8003628:	f000 fbc9 	bl	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 800362c:	23fa      	movs	r3, #250	@ 0xfa
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	61fb      	str	r3, [r7, #28]
        break;
 8003632:	f000 fbc4 	bl	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003636:	4bad      	ldr	r3, [pc, #692]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	029b      	lsls	r3, r3, #10
 800363e:	401a      	ands	r2, r3
 8003640:	2380      	movs	r3, #128	@ 0x80
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8003648:	f000 fbbb 	bl	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 800364c:	4ba8      	ldr	r3, [pc, #672]	@ (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800364e:	61fb      	str	r3, [r7, #28]
        break;
 8003650:	f000 fbb7 	bl	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	029b      	lsls	r3, r3, #10
 800365a:	429a      	cmp	r2, r3
 800365c:	d100      	bne.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800365e:	e0f7      	b.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	029b      	lsls	r3, r3, #10
 8003666:	429a      	cmp	r2, r3
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800366a:	f000 fbac 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	025b      	lsls	r3, r3, #9
 8003674:	429a      	cmp	r2, r3
 8003676:	d100      	bne.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003678:	e0ea      	b.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	025b      	lsls	r3, r3, #9
 8003680:	429a      	cmp	r2, r3
 8003682:	d901      	bls.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8003684:	f000 fb9f 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	01db      	lsls	r3, r3, #7
 800368e:	429a      	cmp	r2, r3
 8003690:	d100      	bne.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003692:	e180      	b.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	01db      	lsls	r3, r3, #7
 800369a:	429a      	cmp	r2, r3
 800369c:	d901      	bls.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800369e:	f000 fb92 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	019b      	lsls	r3, r3, #6
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d101      	bne.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80036ac:	f000 fb29 	bl	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d901      	bls.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80036ba:	f000 fb84 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d100      	bne.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 80036c8:	e2f0      	b.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80036d4:	f000 fb77 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	429a      	cmp	r2, r3
 80036e0:	d100      	bne.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80036e2:	e2b8      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d901      	bls.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80036ee:	f000 fb6a 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d100      	bne.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 80036fc:	e249      	b.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	429a      	cmp	r2, r3
 8003706:	d901      	bls.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8003708:	f000 fb5d 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d100      	bne.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8003712:	e1e1      	b.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b80      	cmp	r3, #128	@ 0x80
 8003718:	d901      	bls.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800371a:	f000 fb54 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b20      	cmp	r3, #32
 8003722:	d80f      	bhi.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800372a:	f000 fb4c 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b20      	cmp	r3, #32
 8003732:	d901      	bls.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003734:	f000 fb47 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	4b6d      	ldr	r3, [pc, #436]	@ (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800373e:	18d3      	adds	r3, r2, r3
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	469f      	mov	pc, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d100      	bne.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800374a:	e191      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 800374c:	f000 fb3b 	bl	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003750:	4a66      	ldr	r2, [pc, #408]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003752:	2388      	movs	r3, #136	@ 0x88
 8003754:	58d3      	ldr	r3, [r2, r3]
 8003756:	2203      	movs	r2, #3
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d025      	beq.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d82d      	bhi.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d013      	beq.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d827      	bhi.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 8003780:	e020      	b.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003782:	f7ff fc9f 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003786:	0003      	movs	r3, r0
 8003788:	61fb      	str	r3, [r7, #28]
            break;
 800378a:	e020      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 800378c:	f7ff fbf4 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8003790:	0003      	movs	r3, r0
 8003792:	61fb      	str	r3, [r7, #28]
            break;
 8003794:	e01b      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003796:	4b55      	ldr	r3, [pc, #340]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	401a      	ands	r2, r3
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d10f      	bne.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 80037a8:	4b53      	ldr	r3, [pc, #332]	@ (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80037aa:	61fb      	str	r3, [r7, #28]
            break;
 80037ac:	e00c      	b.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037ae:	4a4f      	ldr	r2, [pc, #316]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80037b0:	2390      	movs	r3, #144	@ 0x90
 80037b2:	58d3      	ldr	r3, [r2, r3]
 80037b4:	2202      	movs	r2, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d107      	bne.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	61fb      	str	r3, [r7, #28]
            break;
 80037c2:	e003      	b.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	e2ff      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	e2fd      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80037cc:	46c0      	nop			@ (mov r8, r8)
        break;
 80037ce:	e2fb      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80037d0:	4a46      	ldr	r2, [pc, #280]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80037d2:	2388      	movs	r3, #136	@ 0x88
 80037d4:	58d3      	ldr	r3, [r2, r3]
 80037d6:	220c      	movs	r2, #12
 80037d8:	4013      	ands	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d025      	beq.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d82d      	bhi.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d013      	beq.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d827      	bhi.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d005      	beq.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8003800:	e020      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003802:	f7ff fc5f 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003806:	0003      	movs	r3, r0
 8003808:	61fb      	str	r3, [r7, #28]
            break;
 800380a:	e020      	b.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 800380c:	f7ff fbb4 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8003810:	0003      	movs	r3, r0
 8003812:	61fb      	str	r3, [r7, #28]
            break;
 8003814:	e01b      	b.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003816:	4b35      	ldr	r3, [pc, #212]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	401a      	ands	r2, r3
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	429a      	cmp	r2, r3
 8003826:	d10f      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 8003828:	4b33      	ldr	r3, [pc, #204]	@ (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800382a:	61fb      	str	r3, [r7, #28]
            break;
 800382c:	e00c      	b.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800382e:	4a2f      	ldr	r2, [pc, #188]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003830:	2390      	movs	r3, #144	@ 0x90
 8003832:	58d3      	ldr	r3, [r2, r3]
 8003834:	2202      	movs	r2, #2
 8003836:	4013      	ands	r3, r2
 8003838:	2b02      	cmp	r3, #2
 800383a:	d107      	bne.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	61fb      	str	r3, [r7, #28]
            break;
 8003842:	e003      	b.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	e2bf      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	e2bd      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800384c:	46c0      	nop			@ (mov r8, r8)
        break;
 800384e:	e2bb      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003850:	f7ff fc38 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003854:	0003      	movs	r3, r0
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e2b6      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800385a:	4a24      	ldr	r2, [pc, #144]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800385c:	2388      	movs	r3, #136	@ 0x88
 800385e:	58d2      	ldr	r2, [r2, r3]
 8003860:	23c0      	movs	r3, #192	@ 0xc0
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4013      	ands	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	23c0      	movs	r3, #192	@ 0xc0
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	429a      	cmp	r2, r3
 8003870:	d02d      	beq.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	23c0      	movs	r3, #192	@ 0xc0
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	429a      	cmp	r2, r3
 800387a:	d833      	bhi.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	429a      	cmp	r2, r3
 8003884:	d017      	beq.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	429a      	cmp	r2, r3
 800388e:	d829      	bhi.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	429a      	cmp	r2, r3
 800389e:	d005      	beq.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 80038a0:	e020      	b.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7ff fc0f 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 80038a6:	0003      	movs	r3, r0
 80038a8:	61fb      	str	r3, [r7, #28]
            break;
 80038aa:	e028      	b.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 80038ac:	f7ff fb64 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 80038b0:	0003      	movs	r3, r0
 80038b2:	61fb      	str	r3, [r7, #28]
            break;
 80038b4:	e023      	b.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	401a      	ands	r2, r3
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d10f      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80038ca:	61fb      	str	r3, [r7, #28]
            break;
 80038cc:	e00c      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038ce:	4a07      	ldr	r2, [pc, #28]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80038d0:	2390      	movs	r3, #144	@ 0x90
 80038d2:	58d3      	ldr	r3, [r2, r3]
 80038d4:	2202      	movs	r2, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d10f      	bne.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	61fb      	str	r3, [r7, #28]
            break;
 80038e2:	e00b      	b.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	e26f      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	e26d      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80038ec:	40021000 	.word	0x40021000
 80038f0:	0001e848 	.word	0x0001e848
 80038f4:	08005df0 	.word	0x08005df0
 80038f8:	00f42400 	.word	0x00f42400
            break;
 80038fc:	46c0      	nop			@ (mov r8, r8)
        break;
 80038fe:	e263      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8003900:	4ac1      	ldr	r2, [pc, #772]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003902:	2388      	movs	r3, #136	@ 0x88
 8003904:	58d2      	ldr	r2, [r2, r3]
 8003906:	23c0      	movs	r3, #192	@ 0xc0
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4013      	ands	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	23c0      	movs	r3, #192	@ 0xc0
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d02d      	beq.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	23c0      	movs	r3, #192	@ 0xc0
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	429a      	cmp	r2, r3
 8003920:	d833      	bhi.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d017      	beq.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	429a      	cmp	r2, r3
 8003934:	d829      	bhi.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	2380      	movs	r3, #128	@ 0x80
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	429a      	cmp	r2, r3
 8003944:	d005      	beq.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 8003946:	e020      	b.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003948:	f7ff fbbc 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 800394c:	0003      	movs	r3, r0
 800394e:	61fb      	str	r3, [r7, #28]
            break;
 8003950:	e020      	b.n	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 8003952:	f7ff fb11 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8003956:	0003      	movs	r3, r0
 8003958:	61fb      	str	r3, [r7, #28]
            break;
 800395a:	e01b      	b.n	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800395c:	4baa      	ldr	r3, [pc, #680]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	401a      	ands	r2, r3
 8003966:	2380      	movs	r3, #128	@ 0x80
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	429a      	cmp	r2, r3
 800396c:	d10f      	bne.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 800396e:	4ba7      	ldr	r3, [pc, #668]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003970:	61fb      	str	r3, [r7, #28]
            break;
 8003972:	e00c      	b.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003974:	4aa4      	ldr	r2, [pc, #656]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003976:	2390      	movs	r3, #144	@ 0x90
 8003978:	58d3      	ldr	r3, [r2, r3]
 800397a:	2202      	movs	r2, #2
 800397c:	4013      	ands	r3, r2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d107      	bne.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 8003982:	2380      	movs	r3, #128	@ 0x80
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	61fb      	str	r3, [r7, #28]
            break;
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	e21c      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	e21a      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003992:	46c0      	nop			@ (mov r8, r8)
        break;
 8003994:	e218      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003996:	4a9c      	ldr	r2, [pc, #624]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003998:	2388      	movs	r3, #136	@ 0x88
 800399a:	58d2      	ldr	r2, [r2, r3]
 800399c:	23c0      	movs	r3, #192	@ 0xc0
 800399e:	059b      	lsls	r3, r3, #22
 80039a0:	4013      	ands	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	059b      	lsls	r3, r3, #22
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d012      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	059b      	lsls	r3, r3, #22
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d825      	bhi.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	055b      	lsls	r3, r3, #21
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d014      	beq.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 80039c8:	e01c      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 80039ca:	f7ff fad5 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 80039ce:	0003      	movs	r3, r0
 80039d0:	61fb      	str	r3, [r7, #28]
            break;
 80039d2:	e018      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	401a      	ands	r2, r3
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d102      	bne.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 80039e6:	4b89      	ldr	r3, [pc, #548]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80039e8:	61fb      	str	r3, [r7, #28]
            break;
 80039ea:	e00c      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
            break;
 80039f0:	e009      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80039f2:	2408      	movs	r4, #8
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 f9f4 	bl	8003de4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80039fc:	193b      	adds	r3, r7, r4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61fb      	str	r3, [r7, #28]
            break;
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8003a04:	46c0      	nop			@ (mov r8, r8)
        break;
 8003a06:	e1df      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003a08:	4a7f      	ldr	r2, [pc, #508]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003a0a:	2388      	movs	r3, #136	@ 0x88
 8003a0c:	58d2      	ldr	r2, [r2, r3]
 8003a0e:	23c0      	movs	r3, #192	@ 0xc0
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	4013      	ands	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	019b      	lsls	r3, r3, #6
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d017      	beq.n	8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d81e      	bhi.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	015b      	lsls	r3, r3, #5
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d005      	beq.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 8003a3a:	e015      	b.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7ff fb42 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003a40:	0003      	movs	r3, r0
 8003a42:	61fb      	str	r3, [r7, #28]
            break;
 8003a44:	e013      	b.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 8003a46:	f7ff fa97 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	61fb      	str	r3, [r7, #28]
            break;
 8003a4e:	e00e      	b.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a50:	4b6d      	ldr	r3, [pc, #436]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	401a      	ands	r2, r3
 8003a5a:	2380      	movs	r3, #128	@ 0x80
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d104      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 8003a62:	4b6a      	ldr	r3, [pc, #424]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003a64:	61fb      	str	r3, [r7, #28]
            break;
 8003a66:	e001      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	e1ad      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003a6c:	46c0      	nop			@ (mov r8, r8)
        break;
 8003a6e:	e1ab      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003a70:	4a65      	ldr	r2, [pc, #404]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003a72:	2388      	movs	r3, #136	@ 0x88
 8003a74:	58d2      	ldr	r2, [r2, r3]
 8003a76:	23c0      	movs	r3, #192	@ 0xc0
 8003a78:	029b      	lsls	r3, r3, #10
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d017      	beq.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d81e      	bhi.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	025b      	lsls	r3, r3, #9
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d005      	beq.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 8003aa2:	e015      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7ff fb0e 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	61fb      	str	r3, [r7, #28]
            break;
 8003aac:	e013      	b.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 8003aae:	f7ff fa63 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	61fb      	str	r3, [r7, #28]
            break;
 8003ab6:	e00e      	b.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ab8:	4b53      	ldr	r3, [pc, #332]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	401a      	ands	r2, r3
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d104      	bne.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 8003aca:	4b50      	ldr	r3, [pc, #320]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003acc:	61fb      	str	r3, [r7, #28]
            break;
 8003ace:	e001      	b.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	e179      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003ad4:	46c0      	nop			@ (mov r8, r8)
        break;
 8003ad6:	e177      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003ad8:	4a4b      	ldr	r2, [pc, #300]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003ada:	2388      	movs	r3, #136	@ 0x88
 8003adc:	58d2      	ldr	r2, [r2, r3]
 8003ade:	23c0      	movs	r3, #192	@ 0xc0
 8003ae0:	031b      	lsls	r3, r3, #12
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	23c0      	movs	r3, #192	@ 0xc0
 8003aea:	031b      	lsls	r3, r3, #12
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d03d      	beq.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	23c0      	movs	r3, #192	@ 0xc0
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d843      	bhi.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d027      	beq.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d839      	bhi.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	02db      	lsls	r3, r3, #11
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 8003b1e:	e030      	b.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003b20:	f7ff fad0 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003b24:	0003      	movs	r3, r0
 8003b26:	61fb      	str	r3, [r7, #28]
            break;
 8003b28:	e032      	b.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003b2a:	4a37      	ldr	r2, [pc, #220]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b2c:	2394      	movs	r3, #148	@ 0x94
 8003b2e:	58d3      	ldr	r3, [r2, r3]
 8003b30:	2202      	movs	r2, #2
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d126      	bne.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003b38:	4a33      	ldr	r2, [pc, #204]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b3a:	2394      	movs	r3, #148	@ 0x94
 8003b3c:	58d3      	ldr	r3, [r2, r3]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d102      	bne.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 8003b46:	23fa      	movs	r3, #250	@ 0xfa
 8003b48:	61fb      	str	r3, [r7, #28]
            break;
 8003b4a:	e01c      	b.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 8003b4c:	23fa      	movs	r3, #250	@ 0xfa
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	61fb      	str	r3, [r7, #28]
            break;
 8003b52:	e018      	b.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b54:	4b2c      	ldr	r3, [pc, #176]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d111      	bne.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 8003b66:	4b29      	ldr	r3, [pc, #164]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003b68:	61fb      	str	r3, [r7, #28]
            break;
 8003b6a:	e00e      	b.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b6c:	4a26      	ldr	r2, [pc, #152]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b6e:	2390      	movs	r3, #144	@ 0x90
 8003b70:	58d3      	ldr	r3, [r2, r3]
 8003b72:	2202      	movs	r2, #2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d109      	bne.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	61fb      	str	r3, [r7, #28]
            break;
 8003b80:	e005      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	e120      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	e11e      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	e11c      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003b8e:	46c0      	nop			@ (mov r8, r8)
        break;
 8003b90:	e11a      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003b92:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003b94:	2388      	movs	r3, #136	@ 0x88
 8003b96:	58d2      	ldr	r2, [r2, r3]
 8003b98:	23c0      	movs	r3, #192	@ 0xc0
 8003b9a:	039b      	lsls	r3, r3, #14
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	23c0      	movs	r3, #192	@ 0xc0
 8003ba4:	039b      	lsls	r3, r3, #14
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d042      	beq.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	23c0      	movs	r3, #192	@ 0xc0
 8003bae:	039b      	lsls	r3, r3, #14
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d848      	bhi.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	2380      	movs	r3, #128	@ 0x80
 8003bb8:	039b      	lsls	r3, r3, #14
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d02c      	beq.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	039b      	lsls	r3, r3, #14
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d83e      	bhi.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	035b      	lsls	r3, r3, #13
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 8003bd8:	e035      	b.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003bda:	f7ff fa73 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003bde:	0003      	movs	r3, r0
 8003be0:	61fb      	str	r3, [r7, #28]
            break;
 8003be2:	e037      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003be4:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003be6:	2394      	movs	r3, #148	@ 0x94
 8003be8:	58d3      	ldr	r3, [r2, r3]
 8003bea:	2202      	movs	r2, #2
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d12b      	bne.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003bf4:	2394      	movs	r3, #148	@ 0x94
 8003bf6:	58d3      	ldr	r3, [r2, r3]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8003c00:	23fa      	movs	r3, #250	@ 0xfa
 8003c02:	61fb      	str	r3, [r7, #28]
            break;
 8003c04:	e021      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8003c10:	23fa      	movs	r3, #250	@ 0xfa
 8003c12:	01db      	lsls	r3, r3, #7
 8003c14:	61fb      	str	r3, [r7, #28]
            break;
 8003c16:	e018      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c18:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	401a      	ands	r2, r3
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d111      	bne.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 8003c2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003c2c:	61fb      	str	r3, [r7, #28]
            break;
 8003c2e:	e00e      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c30:	4a68      	ldr	r2, [pc, #416]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c32:	2390      	movs	r3, #144	@ 0x90
 8003c34:	58d3      	ldr	r3, [r2, r3]
 8003c36:	2202      	movs	r2, #2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	61fb      	str	r3, [r7, #28]
            break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	e0be      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	e0bc      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	e0ba      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003c52:	46c0      	nop			@ (mov r8, r8)
        break;
 8003c54:	e0b8      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8003c56:	4a5f      	ldr	r2, [pc, #380]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c58:	2388      	movs	r3, #136	@ 0x88
 8003c5a:	58d2      	ldr	r2, [r2, r3]
 8003c5c:	2380      	movs	r3, #128	@ 0x80
 8003c5e:	045b      	lsls	r3, r3, #17
 8003c60:	4013      	ands	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	045b      	lsls	r3, r3, #17
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d011      	beq.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 8003c74:	e019      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8003c76:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	23e0      	movs	r3, #224	@ 0xe0
 8003c7c:	01db      	lsls	r3, r3, #7
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d104      	bne.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 8003c82:	f7ff fa1f 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003c86:	0003      	movs	r3, r0
 8003c88:	61fb      	str	r3, [r7, #28]
            break;
 8003c8a:	e00e      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8003c8c:	f7ff fa1a 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003c90:	0003      	movs	r3, r0
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]
            break;
 8003c96:	e008      	b.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003c98:	2408      	movs	r4, #8
 8003c9a:	193b      	adds	r3, r7, r4
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f000 f8a1 	bl	8003de4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61fb      	str	r3, [r7, #28]
            break;
 8003ca8:	46c0      	nop			@ (mov r8, r8)
        break;
 8003caa:	e08d      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8003cac:	4a49      	ldr	r2, [pc, #292]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003cae:	2388      	movs	r3, #136	@ 0x88
 8003cb0:	58d2      	ldr	r2, [r2, r3]
 8003cb2:	2380      	movs	r3, #128	@ 0x80
 8003cb4:	049b      	lsls	r3, r3, #18
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	049b      	lsls	r3, r3, #18
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 8003cca:	e019      	b.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8003ccc:	4b41      	ldr	r3, [pc, #260]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	23e0      	movs	r3, #224	@ 0xe0
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d104      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8003cd8:	f7ff f9f4 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	61fb      	str	r3, [r7, #28]
            break;
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8003ce2:	f7ff f9ef 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
            break;
 8003cec:	e008      	b.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003cee:	2408      	movs	r4, #8
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 f876 	bl	8003de4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	61fb      	str	r3, [r7, #28]
            break;
 8003cfe:	46c0      	nop			@ (mov r8, r8)
        break;
 8003d00:	e062      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003d02:	4a34      	ldr	r2, [pc, #208]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d04:	2388      	movs	r3, #136	@ 0x88
 8003d06:	58d2      	ldr	r2, [r2, r3]
 8003d08:	23c0      	movs	r3, #192	@ 0xc0
 8003d0a:	051b      	lsls	r3, r3, #20
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	23c0      	movs	r3, #192	@ 0xc0
 8003d14:	051b      	lsls	r3, r3, #20
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d017      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	23c0      	movs	r3, #192	@ 0xc0
 8003d1e:	051b      	lsls	r3, r3, #20
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d844      	bhi.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	2380      	movs	r3, #128	@ 0x80
 8003d28:	051b      	lsls	r3, r3, #20
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d033      	beq.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	051b      	lsls	r3, r3, #20
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d83a      	bhi.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d034      	beq.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	2380      	movs	r3, #128	@ 0x80
 8003d42:	04db      	lsls	r3, r3, #19
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d003      	beq.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 8003d48:	e031      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 8003d4a:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8003d4c:	61fb      	str	r3, [r7, #28]
            break;
 8003d4e:	e031      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2202      	movs	r2, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d12a      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	4013      	ands	r3, r2
 8003d64:	d005      	beq.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8003d66:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	4013      	ands	r3, r2
 8003d70:	e005      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8003d72:	4a18      	ldr	r2, [pc, #96]	@ (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003d74:	2394      	movs	r3, #148	@ 0x94
 8003d76:	58d3      	ldr	r3, [r2, r3]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b0b      	cmp	r3, #11
 8003d84:	d901      	bls.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 8003d86:	230b      	movs	r3, #11
 8003d88:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	61fb      	str	r3, [r7, #28]
            break;
 8003d94:	e00d      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003d96:	2408      	movs	r4, #8
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 f822 	bl	8003de4 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003da0:	193b      	adds	r3, r7, r4
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	61fb      	str	r3, [r7, #28]
            break;
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
            break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003db2:	46c0      	nop			@ (mov r8, r8)
        break;
 8003db4:	e008      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003dc6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8003dc8:	69fb      	ldr	r3, [r7, #28]
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b009      	add	sp, #36	@ 0x24
 8003dd0:	bd90      	pop	{r4, r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	02dc6c00 	.word	0x02dc6c00
 8003de0:	08005d80 	.word	0x08005d80

08003de4 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dec:	4b58      	ldr	r3, [pc, #352]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	227f      	movs	r2, #127	@ 0x7f
 8003df4:	4013      	ands	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003df8:	4b55      	ldr	r3, [pc, #340]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003e02:	4b53      	ldr	r3, [pc, #332]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	2207      	movs	r2, #7
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003e10:	4b4f      	ldr	r3, [pc, #316]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2208      	movs	r2, #8
 8003e16:	4013      	ands	r3, r2
 8003e18:	d005      	beq.n	8003e26 <HAL_RCCEx_GetPLLClockFreq+0x42>
 8003e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	220f      	movs	r2, #15
 8003e22:	4013      	ands	r3, r2
 8003e24:	e005      	b.n	8003e32 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8003e26:	4a4a      	ldr	r2, [pc, #296]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003e28:	2394      	movs	r3, #148	@ 0x94
 8003e2a:	58d3      	ldr	r3, [r2, r3]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	220f      	movs	r2, #15
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b0b      	cmp	r3, #11
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8003e3a:	230b      	movs	r3, #11
 8003e3c:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d020      	beq.n	8003e86 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d827      	bhi.n	8003e9a <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d00c      	beq.n	8003e6a <HAL_RCCEx_GetPLLClockFreq+0x86>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d121      	bne.n	8003e9a <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	483e      	ldr	r0, [pc, #248]	@ (8003f54 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8003e5a:	f7fc f967 	bl	800012c <__udivsi3>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	001a      	movs	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4353      	muls	r3, r2
 8003e66:	61fb      	str	r3, [r7, #28]
      break;
 8003e68:	e025      	b.n	8003eb6 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	58d3      	ldr	r3, [r2, r3]
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fc f959 	bl	800012c <__udivsi3>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	4353      	muls	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
      break;
 8003e84:	e017      	b.n	8003eb6 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	4834      	ldr	r0, [pc, #208]	@ (8003f5c <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8003e8a:	f7fc f94f 	bl	800012c <__udivsi3>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	001a      	movs	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4353      	muls	r3, r2
 8003e96:	61fb      	str	r3, [r7, #28]
      break;
 8003e98:	e00d      	b.n	8003eb6 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f58 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	58d3      	ldr	r3, [r2, r3]
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7fc f941 	bl	800012c <__udivsi3>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	001a      	movs	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4353      	muls	r3, r2
 8003eb2:	61fb      	str	r3, [r7, #28]
      break;
 8003eb4:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8003eb6:	4b26      	ldr	r3, [pc, #152]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	025b      	lsls	r3, r3, #9
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003ec2:	4b23      	ldr	r3, [pc, #140]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8003ec6:	0c5b      	lsrs	r3, r3, #17
 8003ec8:	221f      	movs	r2, #31
 8003eca:	4013      	ands	r3, r2
 8003ecc:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003ece:	0019      	movs	r1, r3
 8003ed0:	69f8      	ldr	r0, [r7, #28]
 8003ed2:	f7fc f92b 	bl	800012c <__udivsi3>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	001a      	movs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	045b      	lsls	r3, r3, #17
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003ef2:	4b17      	ldr	r3, [pc, #92]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8003ef6:	0e5b      	lsrs	r3, r3, #25
 8003ef8:	2207      	movs	r2, #7
 8003efa:	4013      	ands	r3, r2
 8003efc:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003efe:	0019      	movs	r1, r3
 8003f00:	69f8      	ldr	r0, [r7, #28]
 8003f02:	f7fc f913 	bl	800012c <__udivsi3>
 8003f06:	0003      	movs	r3, r0
 8003f08:	001a      	movs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8003f16:	4b0e      	ldr	r3, [pc, #56]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	055b      	lsls	r3, r3, #21
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8003f22:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003f24:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8003f26:	0f5b      	lsrs	r3, r3, #29
 8003f28:	2207      	movs	r2, #7
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8003f2e:	0019      	movs	r1, r3
 8003f30:	69f8      	ldr	r0, [r7, #28]
 8003f32:	f7fc f8fb 	bl	800012c <__udivsi3>
 8003f36:	0003      	movs	r3, r0
 8003f38:	001a      	movs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8003f3e:	e002      	b.n	8003f46 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b008      	add	sp, #32
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	40021000 	.word	0x40021000
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	08005d80 	.word	0x08005d80
 8003f5c:	003d0900 	.word	0x003d0900

08003f60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f68:	210f      	movs	r1, #15
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d100      	bne.n	8003f78 <HAL_RTC_Init+0x18>
 8003f76:	e08b      	b.n	8004090 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	222d      	movs	r2, #45	@ 0x2d
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	222c      	movs	r2, #44	@ 0x2c
 8003f8e:	2100      	movs	r1, #0
 8003f90:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7fd f8bb 	bl	8001110 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	222d      	movs	r2, #45	@ 0x2d
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003fa4:	22ca      	movs	r2, #202	@ 0xca
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003faa:	2253      	movs	r2, #83	@ 0x53
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 fb47 	bl	8004644 <RTC_EnterInitMode>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fba:	4b39      	ldr	r3, [pc, #228]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003fbc:	22ff      	movs	r2, #255	@ 0xff
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	222d      	movs	r2, #45	@ 0x2d
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8003fc8:	230f      	movs	r3, #15
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e05e      	b.n	8004090 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003fd2:	4b33      	ldr	r3, [pc, #204]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	4b32      	ldr	r3, [pc, #200]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003fd8:	4932      	ldr	r1, [pc, #200]	@ (80040a4 <HAL_RTC_Init+0x144>)
 8003fda:	400a      	ands	r2, r1
 8003fdc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003fde:	4b30      	ldr	r3, [pc, #192]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68d9      	ldr	r1, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	041a      	lsls	r2, r3, #16
 8004002:	4b27      	ldr	r3, [pc, #156]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004004:	430a      	orrs	r2, r1
 8004006:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004008:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <HAL_RTC_Init+0x140>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a26      	ldr	r2, [pc, #152]	@ (80040a8 <HAL_RTC_Init+0x148>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	431a      	orrs	r2, r3
 800401c:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <HAL_RTC_Init+0x140>)
 800401e:	430a      	orrs	r2, r1
 8004020:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004022:	4b1f      	ldr	r3, [pc, #124]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	4b1e      	ldr	r3, [pc, #120]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004028:	2180      	movs	r1, #128	@ 0x80
 800402a:	438a      	bics	r2, r1
 800402c:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800402e:	4b1c      	ldr	r3, [pc, #112]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2220      	movs	r2, #32
 8004034:	4013      	ands	r3, r2
 8004036:	d110      	bne.n	800405a <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	0018      	movs	r0, r3
 800403c:	f000 fadc 	bl	80045f8 <HAL_RTC_WaitForSynchro>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d00a      	beq.n	800405a <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004044:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004046:	22ff      	movs	r2, #255	@ 0xff
 8004048:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	222d      	movs	r2, #45	@ 0x2d
 800404e:	2104      	movs	r1, #4
 8004050:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8004052:	230f      	movs	r3, #15
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 800405a:	230f      	movs	r3, #15
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d115      	bne.n	8004090 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8004064:	4b0e      	ldr	r3, [pc, #56]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	08d9      	lsrs	r1, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <HAL_RTC_Init+0x140>)
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004082:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <HAL_RTC_Init+0x140>)
 8004084:	22ff      	movs	r2, #255	@ 0xff
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	222d      	movs	r2, #45	@ 0x2d
 800408c:	2101      	movs	r1, #1
 800408e:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8004090:	230f      	movs	r3, #15
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	40002800 	.word	0x40002800
 80040a4:	fb8fffbf 	.word	0xfb8fffbf
 80040a8:	ffffe0ff 	.word	0xffffe0ff

080040ac <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	222c      	movs	r2, #44	@ 0x2c
 80040bc:	5c9b      	ldrb	r3, [r3, r2]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_RTC_SetTime+0x1a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0a7      	b.n	8004216 <HAL_RTC_SetTime+0x16a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	222c      	movs	r2, #44	@ 0x2c
 80040ca:	2101      	movs	r1, #1
 80040cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	222d      	movs	r2, #45	@ 0x2d
 80040d2:	2102      	movs	r1, #2
 80040d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040d6:	4b52      	ldr	r3, [pc, #328]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80040d8:	22ca      	movs	r2, #202	@ 0xca
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24
 80040dc:	4b50      	ldr	r3, [pc, #320]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80040de:	2253      	movs	r2, #83	@ 0x53
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 faad 	bl	8004644 <RTC_EnterInitMode>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d00c      	beq.n	8004108 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80040f0:	22ff      	movs	r2, #255	@ 0xff
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	222d      	movs	r2, #45	@ 0x2d
 80040f8:	2104      	movs	r1, #4
 80040fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	222c      	movs	r2, #44	@ 0x2c
 8004100:	2100      	movs	r1, #0
 8004102:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e086      	b.n	8004216 <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004108:	4b45      	ldr	r3, [pc, #276]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	23c0      	movs	r3, #192	@ 0xc0
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	401a      	ands	r2, r3
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	429a      	cmp	r2, r3
 8004118:	d053      	beq.n	80041c2 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d124      	bne.n	800416a <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004120:	4b3f      	ldr	r3, [pc, #252]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2240      	movs	r2, #64	@ 0x40
 8004126:	4013      	ands	r3, r2
 8004128:	d102      	bne.n	8004130 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 fab1 	bl	800469c <RTC_ByteToBcd2>
 800413a:	0003      	movs	r3, r0
 800413c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 faaa 	bl	800469c <RTC_ByteToBcd2>
 8004148:	0003      	movs	r3, r0
 800414a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800414c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	789b      	ldrb	r3, [r3, #2]
 8004152:	0018      	movs	r0, r3
 8004154:	f000 faa2 	bl	800469c <RTC_ByteToBcd2>
 8004158:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800415a:	0022      	movs	r2, r4
 800415c:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e016      	b.n	8004198 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800416a:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2240      	movs	r2, #64	@ 0x40
 8004170:	4013      	ands	r3, r2
 8004172:	d102      	bne.n	800417a <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004186:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800418c:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	78db      	ldrb	r3, [r3, #3]
 8004192:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004198:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4921      	ldr	r1, [pc, #132]	@ (8004224 <HAL_RTC_SetTime+0x178>)
 800419e:	400a      	ands	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80041a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041a8:	491f      	ldr	r1, [pc, #124]	@ (8004228 <HAL_RTC_SetTime+0x17c>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80041ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	4b18      	ldr	r3, [pc, #96]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80041c2:	4b17      	ldr	r3, [pc, #92]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b16      	ldr	r3, [pc, #88]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041c8:	2180      	movs	r1, #128	@ 0x80
 80041ca:	438a      	bics	r2, r1
 80041cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80041ce:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2220      	movs	r2, #32
 80041d4:	4013      	ands	r3, r2
 80041d6:	d112      	bne.n	80041fe <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 fa0c 	bl	80045f8 <HAL_RTC_WaitForSynchro>
 80041e0:	1e03      	subs	r3, r0, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 80041e6:	22ff      	movs	r2, #255	@ 0xff
 80041e8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	222d      	movs	r2, #45	@ 0x2d
 80041ee:	2104      	movs	r1, #4
 80041f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	222c      	movs	r2, #44	@ 0x2c
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e00b      	b.n	8004216 <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_RTC_SetTime+0x174>)
 8004200:	22ff      	movs	r2, #255	@ 0xff
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	222d      	movs	r2, #45	@ 0x2d
 8004208:	2101      	movs	r1, #1
 800420a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	222c      	movs	r2, #44	@ 0x2c
 8004210:	2100      	movs	r1, #0
 8004212:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
  }
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b007      	add	sp, #28
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	40002800 	.word	0x40002800
 8004224:	007f7f7f 	.word	0x007f7f7f
 8004228:	fffbffff 	.word	0xfffbffff

0800422c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	222c      	movs	r2, #44	@ 0x2c
 800423c:	5c9b      	ldrb	r3, [r3, r2]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_RTC_SetDate+0x1a>
 8004242:	2302      	movs	r3, #2
 8004244:	e090      	b.n	8004368 <HAL_RTC_SetDate+0x13c>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	222c      	movs	r2, #44	@ 0x2c
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	222d      	movs	r2, #45	@ 0x2d
 8004252:	2102      	movs	r1, #2
 8004254:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10e      	bne.n	800427a <HAL_RTC_SetDate+0x4e>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	001a      	movs	r2, r3
 8004262:	2310      	movs	r3, #16
 8004264:	4013      	ands	r3, r2
 8004266:	d008      	beq.n	800427a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2210      	movs	r2, #16
 800426e:	4393      	bics	r3, r2
 8004270:	b2db      	uxtb	r3, r3
 8004272:	330a      	adds	r3, #10
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11c      	bne.n	80042ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	78db      	ldrb	r3, [r3, #3]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fa09 	bl	800469c <RTC_ByteToBcd2>
 800428a:	0003      	movs	r3, r0
 800428c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	0018      	movs	r0, r3
 8004294:	f000 fa02 	bl	800469c <RTC_ByteToBcd2>
 8004298:	0003      	movs	r3, r0
 800429a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800429c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	789b      	ldrb	r3, [r3, #2]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f9fa 	bl	800469c <RTC_ByteToBcd2>
 80042a8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042aa:	0022      	movs	r2, r4
 80042ac:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e00e      	b.n	80042d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	78db      	ldrb	r3, [r3, #3]
 80042be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80042c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80042cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042d8:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 80042da:	22ca      	movs	r2, #202	@ 0xca
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80042de:	4b24      	ldr	r3, [pc, #144]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 80042e0:	2253      	movs	r2, #83	@ 0x53
 80042e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f9ac 	bl	8004644 <RTC_EnterInitMode>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d00c      	beq.n	800430a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 80042f2:	22ff      	movs	r2, #255	@ 0xff
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	222d      	movs	r2, #45	@ 0x2d
 80042fa:	2104      	movs	r1, #4
 80042fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	222c      	movs	r2, #44	@ 0x2c
 8004302:	2100      	movs	r1, #0
 8004304:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02e      	b.n	8004368 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800430a:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4919      	ldr	r1, [pc, #100]	@ (8004374 <HAL_RTC_SetDate+0x148>)
 8004310:	400a      	ands	r2, r1
 8004312:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004314:	4b16      	ldr	r3, [pc, #88]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 800431a:	2180      	movs	r1, #128	@ 0x80
 800431c:	438a      	bics	r2, r1
 800431e:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004320:	4b13      	ldr	r3, [pc, #76]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2220      	movs	r2, #32
 8004326:	4013      	ands	r3, r2
 8004328:	d112      	bne.n	8004350 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f963 	bl	80045f8 <HAL_RTC_WaitForSynchro>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d00c      	beq.n	8004350 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004336:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 8004338:	22ff      	movs	r2, #255	@ 0xff
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	222d      	movs	r2, #45	@ 0x2d
 8004340:	2104      	movs	r1, #4
 8004342:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	222c      	movs	r2, #44	@ 0x2c
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e00b      	b.n	8004368 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004350:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <HAL_RTC_SetDate+0x144>)
 8004352:	22ff      	movs	r2, #255	@ 0xff
 8004354:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	222d      	movs	r2, #45	@ 0x2d
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	222c      	movs	r2, #44	@ 0x2c
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004366:	2300      	movs	r3, #0
  }
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b007      	add	sp, #28
 800436e:	bd90      	pop	{r4, r7, pc}
 8004370:	40002800 	.word	0x40002800
 8004374:	00ffff3f 	.word	0x00ffff3f

08004378 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	222c      	movs	r2, #44	@ 0x2c
 800438c:	5c9b      	ldrb	r3, [r3, r2]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_RTC_SetAlarm_IT+0x1e>
 8004392:	2302      	movs	r3, #2
 8004394:	e0f1      	b.n	800457a <HAL_RTC_SetAlarm_IT+0x202>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	222c      	movs	r2, #44	@ 0x2c
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	222d      	movs	r2, #45	@ 0x2d
 80043a2:	2102      	movs	r1, #2
 80043a4:	5499      	strb	r1, [r3, r2]
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80043a6:	4b77      	ldr	r3, [pc, #476]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	23c0      	movs	r3, #192	@ 0xc0
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d05a      	beq.n	8004472 <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d135      	bne.n	800442e <HAL_RTC_SetAlarm_IT+0xb6>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80043c2:	4b70      	ldr	r3, [pc, #448]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	4013      	ands	r3, r2
 80043ca:	d102      	bne.n	80043d2 <HAL_RTC_SetAlarm_IT+0x5a>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2200      	movs	r2, #0
 80043d0:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 f960 	bl	800469c <RTC_ByteToBcd2>
 80043dc:	0003      	movs	r3, r0
 80043de:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f000 f959 	bl	800469c <RTC_ByteToBcd2>
 80043ea:	0003      	movs	r3, r0
 80043ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80043ee:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	789b      	ldrb	r3, [r3, #2]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 f951 	bl	800469c <RTC_ByteToBcd2>
 80043fa:	0003      	movs	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80043fc:	0022      	movs	r2, r4
 80043fe:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	78db      	ldrb	r3, [r3, #3]
 8004404:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004406:	431a      	orrs	r2, r3
 8004408:	0014      	movs	r4, r2
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2224      	movs	r2, #36	@ 0x24
 800440e:	5c9b      	ldrb	r3, [r3, r2]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f943 	bl	800469c <RTC_ByteToBcd2>
 8004416:	0003      	movs	r3, r0
 8004418:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800441a:	0022      	movs	r2, r4
 800441c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004422:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e021      	b.n	8004472 <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800442e:	4b55      	ldr	r3, [pc, #340]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2240      	movs	r2, #64	@ 0x40
 8004434:	4013      	ands	r3, r2
 8004436:	d102      	bne.n	800443e <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800444a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004450:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	78db      	ldrb	r3, [r3, #3]
 8004456:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004458:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2124      	movs	r1, #36	@ 0x24
 800445e:	5c5b      	ldrb	r3, [r3, r1]
 8004460:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004462:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004468:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

    }
  }

  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	2380      	movs	r3, #128	@ 0x80
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	429a      	cmp	r2, r3
 800447c:	d13a      	bne.n	80044f4 <HAL_RTC_SetAlarm_IT+0x17c>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800447e:	4b41      	ldr	r3, [pc, #260]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	4b40      	ldr	r3, [pc, #256]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004484:	4940      	ldr	r1, [pc, #256]	@ (8004588 <HAL_RTC_SetAlarm_IT+0x210>)
 8004486:	400a      	ands	r2, r1
 8004488:	619a      	str	r2, [r3, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800448a:	4b3e      	ldr	r3, [pc, #248]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 800448c:	2201      	movs	r2, #1
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	429a      	cmp	r2, r3
 8004498:	d107      	bne.n	80044aa <HAL_RTC_SetAlarm_IT+0x132>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6999      	ldr	r1, [r3, #24]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	4b38      	ldr	r3, [pc, #224]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044a4:	430a      	orrs	r2, r1
 80044a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80044a8:	e006      	b.n	80044b8 <HAL_RTC_SetAlarm_IT+0x140>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80044aa:	4b36      	ldr	r3, [pc, #216]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80044b0:	4a34      	ldr	r2, [pc, #208]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80044b8:	4a32      	ldr	r2, [pc, #200]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_RTC_SetAlarm_IT+0x160>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 80044c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044ce:	2180      	movs	r1, #128	@ 0x80
 80044d0:	0509      	lsls	r1, r1, #20
 80044d2:	430a      	orrs	r2, r1
 80044d4:	619a      	str	r2, [r3, #24]
 80044d6:	e005      	b.n	80044e4 <HAL_RTC_SetAlarm_IT+0x16c>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 80044d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044de:	492b      	ldr	r1, [pc, #172]	@ (800458c <HAL_RTC_SetAlarm_IT+0x214>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	619a      	str	r2, [r3, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80044e4:	4b27      	ldr	r3, [pc, #156]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044ea:	2188      	movs	r1, #136	@ 0x88
 80044ec:	0149      	lsls	r1, r1, #5
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
 80044f2:	e039      	b.n	8004568 <HAL_RTC_SetAlarm_IT+0x1f0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80044f4:	4b23      	ldr	r3, [pc, #140]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	4b22      	ldr	r3, [pc, #136]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 80044fa:	4925      	ldr	r1, [pc, #148]	@ (8004590 <HAL_RTC_SetAlarm_IT+0x218>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	619a      	str	r2, [r3, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004500:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004502:	2202      	movs	r2, #2
 8004504:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	429a      	cmp	r2, r3
 800450e:	d107      	bne.n	8004520 <HAL_RTC_SetAlarm_IT+0x1a8>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6999      	ldr	r1, [r3, #24]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	4b1a      	ldr	r3, [pc, #104]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 800451a:	430a      	orrs	r2, r1
 800451c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800451e:	e006      	b.n	800452e <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004520:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	649a      	str	r2, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004526:	4a17      	ldr	r2, [pc, #92]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800452e:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	2b01      	cmp	r3, #1
 800453c:	d107      	bne.n	800454e <HAL_RTC_SetAlarm_IT+0x1d6>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 800453e:	4b11      	ldr	r3, [pc, #68]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	4b10      	ldr	r3, [pc, #64]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004544:	2180      	movs	r1, #128	@ 0x80
 8004546:	0549      	lsls	r1, r1, #21
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]
 800454c:	e005      	b.n	800455a <HAL_RTC_SetAlarm_IT+0x1e2>

    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004554:	490f      	ldr	r1, [pc, #60]	@ (8004594 <HAL_RTC_SetAlarm_IT+0x21c>)
 8004556:	400a      	ands	r2, r1
 8004558:	619a      	str	r2, [r3, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800455a:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RTC_SetAlarm_IT+0x20c>)
 8004560:	2188      	movs	r1, #136	@ 0x88
 8004562:	0189      	lsls	r1, r1, #6
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
  }

  hrtc->State = HAL_RTC_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	222d      	movs	r2, #45	@ 0x2d
 800456c:	2101      	movs	r1, #1
 800456e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	222c      	movs	r2, #44	@ 0x2c
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	0018      	movs	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	b007      	add	sp, #28
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	40002800 	.word	0x40002800
 8004588:	ffffeeff 	.word	0xffffeeff
 800458c:	f7ffffff 	.word	0xf7ffffff
 8004590:	ffffddff 	.word	0xffffddff
 8004594:	efffffff 	.word	0xefffffff

08004598 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 80045a0:	4b10      	ldr	r3, [pc, #64]	@ (80045e4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	4013      	ands	r3, r2
 80045ac:	d006      	beq.n	80045bc <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f816 	bl	80045e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2202      	movs	r2, #2
 80045c0:	4013      	ands	r3, r2
 80045c2:	d006      	beq.n	80045d2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80045c6:	2202      	movs	r2, #2
 80045c8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f88d 	bl	80046ec <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	222d      	movs	r2, #45	@ 0x2d
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]
}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	40002800 	.word	0x40002800

080045e8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80045f0:	46c0      	nop			@ (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b002      	add	sp, #8
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004600:	4b0f      	ldr	r3, [pc, #60]	@ (8004640 <HAL_RTC_WaitForSynchro+0x48>)
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <HAL_RTC_WaitForSynchro+0x48>)
 8004606:	2120      	movs	r1, #32
 8004608:	438a      	bics	r2, r1
 800460a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800460c:	f7fc ff58 	bl	80014c0 <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004614:	e00a      	b.n	800462c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004616:	f7fc ff53 	bl	80014c0 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	23fa      	movs	r3, #250	@ 0xfa
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d901      	bls.n	800462c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e005      	b.n	8004638 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800462c:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <HAL_RTC_WaitForSynchro+0x48>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	4013      	ands	r3, r2
 8004634:	d0ef      	beq.n	8004616 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40002800 	.word	0x40002800

08004644 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800464c:	4b12      	ldr	r3, [pc, #72]	@ (8004698 <RTC_EnterInitMode+0x54>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2240      	movs	r2, #64	@ 0x40
 8004652:	4013      	ands	r3, r2
 8004654:	d11a      	bne.n	800468c <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <RTC_EnterInitMode+0x54>)
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <RTC_EnterInitMode+0x54>)
 800465c:	2180      	movs	r1, #128	@ 0x80
 800465e:	430a      	orrs	r2, r1
 8004660:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004662:	f7fc ff2d 	bl	80014c0 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800466a:	e00a      	b.n	8004682 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800466c:	f7fc ff28 	bl	80014c0 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	23fa      	movs	r3, #250	@ 0xfa
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	429a      	cmp	r2, r3
 800467c:	d901      	bls.n	8004682 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e005      	b.n	800468e <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <RTC_EnterInitMode+0x54>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2240      	movs	r2, #64	@ 0x40
 8004688:	4013      	ands	r3, r2
 800468a:	d0ef      	beq.n	800466c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b004      	add	sp, #16
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	40002800 	.word	0x40002800

0800469c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	0002      	movs	r2, r0
 80046a4:	1dfb      	adds	r3, r7, #7
 80046a6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80046ac:	230b      	movs	r3, #11
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	1dfa      	adds	r2, r7, #7
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 80046b6:	e008      	b.n	80046ca <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80046be:	220b      	movs	r2, #11
 80046c0:	18bb      	adds	r3, r7, r2
 80046c2:	18ba      	adds	r2, r7, r2
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	3a0a      	subs	r2, #10
 80046c8:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 80046ca:	210b      	movs	r1, #11
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d8f1      	bhi.n	80046b8 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	b2db      	uxtb	r3, r3
}
 80046e4:	0018      	movs	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b004      	add	sp, #16
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80046f4:	46c0      	nop			@ (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e046      	b.n	800479c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2288      	movs	r2, #136	@ 0x88
 8004712:	589b      	ldr	r3, [r3, r2]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2284      	movs	r2, #132	@ 0x84
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	0018      	movs	r0, r3
 8004724:	f7fc fd3c 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2288      	movs	r2, #136	@ 0x88
 800472c:	2124      	movs	r1, #36	@ 0x24
 800472e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	438a      	bics	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fa8a 	bl	8004c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	0018      	movs	r0, r3
 8004754:	f000 f8cc 	bl	80048f0 <UART_SetConfig>
 8004758:	0003      	movs	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e01c      	b.n	800479c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	490d      	ldr	r1, [pc, #52]	@ (80047a4 <HAL_UART_Init+0xa8>)
 800476e:	400a      	ands	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	212a      	movs	r1, #42	@ 0x2a
 800477e:	438a      	bics	r2, r1
 8004780:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2101      	movs	r1, #1
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fb19 	bl	8004dcc <UART_CheckIdleState>
 800479a:	0003      	movs	r3, r0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	ffffb7ff 	.word	0xffffb7ff

080047a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2288      	movs	r2, #136	@ 0x88
 80047bc:	589b      	ldr	r3, [r3, r2]
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d000      	beq.n	80047c4 <HAL_UART_Transmit+0x1c>
 80047c2:	e090      	b.n	80048e6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_UART_Transmit+0x2a>
 80047ca:	1dbb      	adds	r3, r7, #6
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e088      	b.n	80048e8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	2380      	movs	r3, #128	@ 0x80
 80047dc:	015b      	lsls	r3, r3, #5
 80047de:	429a      	cmp	r2, r3
 80047e0:	d109      	bne.n	80047f6 <HAL_UART_Transmit+0x4e>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2201      	movs	r2, #1
 80047ee:	4013      	ands	r3, r2
 80047f0:	d001      	beq.n	80047f6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e078      	b.n	80048e8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2290      	movs	r2, #144	@ 0x90
 80047fa:	2100      	movs	r1, #0
 80047fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2288      	movs	r2, #136	@ 0x88
 8004802:	2121      	movs	r1, #33	@ 0x21
 8004804:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004806:	f7fc fe5b 	bl	80014c0 <HAL_GetTick>
 800480a:	0003      	movs	r3, r0
 800480c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1dba      	adds	r2, r7, #6
 8004812:	2154      	movs	r1, #84	@ 0x54
 8004814:	8812      	ldrh	r2, [r2, #0]
 8004816:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1dba      	adds	r2, r7, #6
 800481c:	2156      	movs	r1, #86	@ 0x56
 800481e:	8812      	ldrh	r2, [r2, #0]
 8004820:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	015b      	lsls	r3, r3, #5
 800482a:	429a      	cmp	r2, r3
 800482c:	d108      	bne.n	8004840 <HAL_UART_Transmit+0x98>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e003      	b.n	8004848 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004848:	e030      	b.n	80048ac <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	0013      	movs	r3, r2
 8004854:	2200      	movs	r2, #0
 8004856:	2180      	movs	r1, #128	@ 0x80
 8004858:	f000 fb62 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d005      	beq.n	800486c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2288      	movs	r2, #136	@ 0x88
 8004864:	2120      	movs	r1, #32
 8004866:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e03d      	b.n	80048e8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	001a      	movs	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	05d2      	lsls	r2, r2, #23
 800487e:	0dd2      	lsrs	r2, r2, #23
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3302      	adds	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e007      	b.n	800489a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2256      	movs	r2, #86	@ 0x56
 800489e:	5a9b      	ldrh	r3, [r3, r2]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b299      	uxth	r1, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2256      	movs	r2, #86	@ 0x56
 80048aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2256      	movs	r2, #86	@ 0x56
 80048b0:	5a9b      	ldrh	r3, [r3, r2]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1c8      	bne.n	800484a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	0013      	movs	r3, r2
 80048c2:	2200      	movs	r2, #0
 80048c4:	2140      	movs	r1, #64	@ 0x40
 80048c6:	f000 fb2b 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d005      	beq.n	80048da <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2288      	movs	r2, #136	@ 0x88
 80048d2:	2120      	movs	r1, #32
 80048d4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e006      	b.n	80048e8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2288      	movs	r2, #136	@ 0x88
 80048de:	2120      	movs	r1, #32
 80048e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b008      	add	sp, #32
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f0:	b5b0      	push	{r4, r5, r7, lr}
 80048f2:	b092      	sub	sp, #72	@ 0x48
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f8:	231f      	movs	r3, #31
 80048fa:	2220      	movs	r2, #32
 80048fc:	189b      	adds	r3, r3, r2
 80048fe:	19db      	adds	r3, r3, r7
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	431a      	orrs	r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	431a      	orrs	r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4313      	orrs	r3, r2
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4ac6      	ldr	r2, [pc, #792]	@ (8004c3c <UART_SetConfig+0x34c>)
 8004924:	4013      	ands	r3, r2
 8004926:	0019      	movs	r1, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800492e:	430b      	orrs	r3, r1
 8004930:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4ac1      	ldr	r2, [pc, #772]	@ (8004c40 <UART_SetConfig+0x350>)
 800493a:	4013      	ands	r3, r2
 800493c:	0018      	movs	r0, r3
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	0003      	movs	r3, r0
 8004948:	430b      	orrs	r3, r1
 800494a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4abb      	ldr	r2, [pc, #748]	@ (8004c44 <UART_SetConfig+0x354>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d009      	beq.n	8004970 <UART_SetConfig+0x80>
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4ab9      	ldr	r2, [pc, #740]	@ (8004c48 <UART_SetConfig+0x358>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800496c:	4313      	orrs	r3, r2
 800496e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4ab5      	ldr	r2, [pc, #724]	@ (8004c4c <UART_SetConfig+0x35c>)
 8004978:	4013      	ands	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004982:	430b      	orrs	r3, r1
 8004984:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	220f      	movs	r2, #15
 800498e:	4393      	bics	r3, r2
 8004990:	0018      	movs	r0, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	0003      	movs	r3, r0
 800499c:	430b      	orrs	r3, r1
 800499e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4aaa      	ldr	r2, [pc, #680]	@ (8004c50 <UART_SetConfig+0x360>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d102      	bne.n	80049b0 <UART_SetConfig+0xc0>
 80049aa:	2301      	movs	r3, #1
 80049ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ae:	e02b      	b.n	8004a08 <UART_SetConfig+0x118>
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4aa7      	ldr	r2, [pc, #668]	@ (8004c54 <UART_SetConfig+0x364>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d102      	bne.n	80049c0 <UART_SetConfig+0xd0>
 80049ba:	2302      	movs	r3, #2
 80049bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80049be:	e023      	b.n	8004a08 <UART_SetConfig+0x118>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4aa4      	ldr	r2, [pc, #656]	@ (8004c58 <UART_SetConfig+0x368>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d103      	bne.n	80049d2 <UART_SetConfig+0xe2>
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80049d0:	e01a      	b.n	8004a08 <UART_SetConfig+0x118>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4aa1      	ldr	r2, [pc, #644]	@ (8004c5c <UART_SetConfig+0x36c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d103      	bne.n	80049e4 <UART_SetConfig+0xf4>
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049e2:	e011      	b.n	8004a08 <UART_SetConfig+0x118>
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a96      	ldr	r2, [pc, #600]	@ (8004c44 <UART_SetConfig+0x354>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d102      	bne.n	80049f4 <UART_SetConfig+0x104>
 80049ee:	2310      	movs	r3, #16
 80049f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f2:	e009      	b.n	8004a08 <UART_SetConfig+0x118>
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a93      	ldr	r2, [pc, #588]	@ (8004c48 <UART_SetConfig+0x358>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d102      	bne.n	8004a04 <UART_SetConfig+0x114>
 80049fe:	2308      	movs	r3, #8
 8004a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a02:	e001      	b.n	8004a08 <UART_SetConfig+0x118>
 8004a04:	2300      	movs	r3, #0
 8004a06:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a8d      	ldr	r2, [pc, #564]	@ (8004c44 <UART_SetConfig+0x354>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d005      	beq.n	8004a1e <UART_SetConfig+0x12e>
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a8c      	ldr	r2, [pc, #560]	@ (8004c48 <UART_SetConfig+0x358>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d000      	beq.n	8004a1e <UART_SetConfig+0x12e>
 8004a1c:	e06f      	b.n	8004afe <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fe fdb7 	bl	8003594 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a26:	0003      	movs	r3, r0
 8004a28:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d100      	bne.n	8004a32 <UART_SetConfig+0x142>
 8004a30:	e0ec      	b.n	8004c0c <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a36:	4b8a      	ldr	r3, [pc, #552]	@ (8004c60 <UART_SetConfig+0x370>)
 8004a38:	0052      	lsls	r2, r2, #1
 8004a3a:	5ad3      	ldrh	r3, [r2, r3]
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a40:	f7fb fb74 	bl	800012c <__udivsi3>
 8004a44:	0003      	movs	r3, r0
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	0013      	movs	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d305      	bcc.n	8004a64 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d906      	bls.n	8004a72 <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8004a64:	231f      	movs	r3, #31
 8004a66:	2220      	movs	r2, #32
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	19db      	adds	r3, r3, r7
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	e044      	b.n	8004afc <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a7e:	4b78      	ldr	r3, [pc, #480]	@ (8004c60 <UART_SetConfig+0x370>)
 8004a80:	0052      	lsls	r2, r2, #1
 8004a82:	5ad3      	ldrh	r3, [r2, r3]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	f7fb fcc1 	bl	8000418 <__aeabi_uldivmod>
 8004a96:	0002      	movs	r2, r0
 8004a98:	000b      	movs	r3, r1
 8004a9a:	0e11      	lsrs	r1, r2, #24
 8004a9c:	021d      	lsls	r5, r3, #8
 8004a9e:	430d      	orrs	r5, r1
 8004aa0:	0214      	lsls	r4, r2, #8
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	1900      	adds	r0, r0, r4
 8004ab4:	4169      	adcs	r1, r5
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f7fb fca8 	bl	8000418 <__aeabi_uldivmod>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	000b      	movs	r3, r1
 8004acc:	0013      	movs	r3, r2
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ad2:	23c0      	movs	r3, #192	@ 0xc0
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d309      	bcc.n	8004aee <UART_SetConfig+0x1fe>
 8004ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	035b      	lsls	r3, r3, #13
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d204      	bcs.n	8004aee <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aea:	60da      	str	r2, [r3, #12]
 8004aec:	e006      	b.n	8004afc <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 8004aee:	231f      	movs	r3, #31
 8004af0:	2220      	movs	r2, #32
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	19db      	adds	r3, r3, r7
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004afa:	e087      	b.n	8004c0c <UART_SetConfig+0x31c>
 8004afc:	e086      	b.n	8004c0c <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d14c      	bne.n	8004ba4 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7fe fd41 	bl	8003594 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b12:	0003      	movs	r3, r0
 8004b14:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d100      	bne.n	8004b1e <UART_SetConfig+0x22e>
 8004b1c:	e076      	b.n	8004c0c <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b22:	4b4f      	ldr	r3, [pc, #316]	@ (8004c60 <UART_SetConfig+0x370>)
 8004b24:	0052      	lsls	r2, r2, #1
 8004b26:	5ad3      	ldrh	r3, [r2, r3]
 8004b28:	0019      	movs	r1, r3
 8004b2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b2c:	f7fb fafe 	bl	800012c <__udivsi3>
 8004b30:	0003      	movs	r3, r0
 8004b32:	005a      	lsls	r2, r3, #1
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	18d2      	adds	r2, r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0019      	movs	r1, r3
 8004b42:	0010      	movs	r0, r2
 8004b44:	f7fb faf2 	bl	800012c <__udivsi3>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	d921      	bls.n	8004b96 <UART_SetConfig+0x2a6>
 8004b52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	025b      	lsls	r3, r3, #9
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d21c      	bcs.n	8004b96 <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	2012      	movs	r0, #18
 8004b62:	2420      	movs	r4, #32
 8004b64:	1903      	adds	r3, r0, r4
 8004b66:	19db      	adds	r3, r3, r7
 8004b68:	210f      	movs	r1, #15
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2207      	movs	r2, #7
 8004b76:	4013      	ands	r3, r2
 8004b78:	b299      	uxth	r1, r3
 8004b7a:	1903      	adds	r3, r0, r4
 8004b7c:	19db      	adds	r3, r3, r7
 8004b7e:	1902      	adds	r2, r0, r4
 8004b80:	19d2      	adds	r2, r2, r7
 8004b82:	8812      	ldrh	r2, [r2, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	1902      	adds	r2, r0, r4
 8004b8e:	19d2      	adds	r2, r2, r7
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e03a      	b.n	8004c0c <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b96:	231f      	movs	r3, #31
 8004b98:	2220      	movs	r2, #32
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	19db      	adds	r3, r3, r7
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e033      	b.n	8004c0c <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f7fe fcf4 	bl	8003594 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bac:	0003      	movs	r3, r0
 8004bae:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02a      	beq.n	8004c0c <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bba:	4b29      	ldr	r3, [pc, #164]	@ (8004c60 <UART_SetConfig+0x370>)
 8004bbc:	0052      	lsls	r2, r2, #1
 8004bbe:	5ad3      	ldrh	r3, [r2, r3]
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bc4:	f7fb fab2 	bl	800012c <__udivsi3>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	001a      	movs	r2, r3
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	18d2      	adds	r2, r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	0019      	movs	r1, r3
 8004bda:	0010      	movs	r0, r2
 8004bdc:	f7fb faa6 	bl	800012c <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be6:	2b0f      	cmp	r3, #15
 8004be8:	d90a      	bls.n	8004c00 <UART_SetConfig+0x310>
 8004bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	025b      	lsls	r3, r3, #9
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d205      	bcs.n	8004c00 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e005      	b.n	8004c0c <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c00:	231f      	movs	r3, #31
 8004c02:	2220      	movs	r2, #32
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	19db      	adds	r3, r3, r7
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	226a      	movs	r2, #106	@ 0x6a
 8004c10:	2101      	movs	r1, #1
 8004c12:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	2268      	movs	r2, #104	@ 0x68
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	2200      	movs	r2, #0
 8004c20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	2200      	movs	r2, #0
 8004c26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c28:	231f      	movs	r3, #31
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	19db      	adds	r3, r3, r7
 8004c30:	781b      	ldrb	r3, [r3, #0]
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b012      	add	sp, #72	@ 0x48
 8004c38:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	cfff69f3 	.word	0xcfff69f3
 8004c40:	ffffcfff 	.word	0xffffcfff
 8004c44:	40008000 	.word	0x40008000
 8004c48:	40008400 	.word	0x40008400
 8004c4c:	11fff4ff 	.word	0x11fff4ff
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40004400 	.word	0x40004400
 8004c58:	40004800 	.word	0x40004800
 8004c5c:	40004c00 	.word	0x40004c00
 8004c60:	08005e74 	.word	0x08005e74

08004c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	2208      	movs	r2, #8
 8004c72:	4013      	ands	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004da8 <UART_AdvFeatureConfig+0x144>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	0019      	movs	r1, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a43      	ldr	r2, [pc, #268]	@ (8004dac <UART_AdvFeatureConfig+0x148>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8004db0 <UART_AdvFeatureConfig+0x14c>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4a34      	ldr	r2, [pc, #208]	@ (8004db4 <UART_AdvFeatureConfig+0x150>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <UART_AdvFeatureConfig+0x154>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	0019      	movs	r1, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4a25      	ldr	r2, [pc, #148]	@ (8004dbc <UART_AdvFeatureConfig+0x158>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	2240      	movs	r2, #64	@ 0x40
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc0 <UART_AdvFeatureConfig+0x15c>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	035b      	lsls	r3, r3, #13
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d10b      	bne.n	8004d7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a15      	ldr	r2, [pc, #84]	@ (8004dc4 <UART_AdvFeatureConfig+0x160>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	2280      	movs	r2, #128	@ 0x80
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc8 <UART_AdvFeatureConfig+0x164>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }
}
 8004da0:	46c0      	nop			@ (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b002      	add	sp, #8
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	ffff7fff 	.word	0xffff7fff
 8004dac:	fffdffff 	.word	0xfffdffff
 8004db0:	fffeffff 	.word	0xfffeffff
 8004db4:	fffbffff 	.word	0xfffbffff
 8004db8:	ffffefff 	.word	0xffffefff
 8004dbc:	ffffdfff 	.word	0xffffdfff
 8004dc0:	ffefffff 	.word	0xffefffff
 8004dc4:	ff9fffff 	.word	0xff9fffff
 8004dc8:	fff7ffff 	.word	0xfff7ffff

08004dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b092      	sub	sp, #72	@ 0x48
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2290      	movs	r2, #144	@ 0x90
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ddc:	f7fc fb70 	bl	80014c0 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2208      	movs	r2, #8
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d12d      	bne.n	8004e4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df4:	2280      	movs	r2, #128	@ 0x80
 8004df6:	0391      	lsls	r1, r2, #14
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4a47      	ldr	r2, [pc, #284]	@ (8004f18 <UART_CheckIdleState+0x14c>)
 8004dfc:	9200      	str	r2, [sp, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f000 f88e 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004e04:	1e03      	subs	r3, r0, #0
 8004e06:	d022      	beq.n	8004e4e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e08:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e12:	2301      	movs	r3, #1
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	f383 8810 	msr	PRIMASK, r3
}
 8004e1c:	46c0      	nop			@ (mov r8, r8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2180      	movs	r1, #128	@ 0x80
 8004e2a:	438a      	bics	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e34:	f383 8810 	msr	PRIMASK, r3
}
 8004e38:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2288      	movs	r2, #136	@ 0x88
 8004e3e:	2120      	movs	r1, #32
 8004e40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2284      	movs	r2, #132	@ 0x84
 8004e46:	2100      	movs	r1, #0
 8004e48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e060      	b.n	8004f10 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2204      	movs	r2, #4
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d146      	bne.n	8004eea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5e:	2280      	movs	r2, #128	@ 0x80
 8004e60:	03d1      	lsls	r1, r2, #15
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <UART_CheckIdleState+0x14c>)
 8004e66:	9200      	str	r2, [sp, #0]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f000 f859 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004e6e:	1e03      	subs	r3, r0, #0
 8004e70:	d03b      	beq.n	8004eea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e72:	f3ef 8310 	mrs	r3, PRIMASK
 8004e76:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e78:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f383 8810 	msr	PRIMASK, r3
}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4922      	ldr	r1, [pc, #136]	@ (8004f1c <UART_CheckIdleState+0x150>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			@ (mov r8, r8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	228c      	movs	r2, #140	@ 0x8c
 8004eda:	2120      	movs	r1, #32
 8004edc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2284      	movs	r2, #132	@ 0x84
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e012      	b.n	8004f10 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2288      	movs	r2, #136	@ 0x88
 8004eee:	2120      	movs	r1, #32
 8004ef0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	228c      	movs	r2, #140	@ 0x8c
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2284      	movs	r2, #132	@ 0x84
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b010      	add	sp, #64	@ 0x40
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	01ffffff 	.word	0x01ffffff
 8004f1c:	fffffedf 	.word	0xfffffedf

08004f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f30:	e051      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	3301      	adds	r3, #1
 8004f36:	d04e      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f38:	f7fc fac2 	bl	80014c0 <HAL_GetTick>
 8004f3c:	0002      	movs	r2, r0
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d302      	bcc.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e051      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d03b      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b80      	cmp	r3, #128	@ 0x80
 8004f62:	d038      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b40      	cmp	r3, #64	@ 0x40
 8004f68:	d035      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d111      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f83c 	bl	8005000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2290      	movs	r2, #144	@ 0x90
 8004f8c:	2108      	movs	r1, #8
 8004f8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2284      	movs	r2, #132	@ 0x84
 8004f94:	2100      	movs	r1, #0
 8004f96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e02c      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d112      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2280      	movs	r2, #128	@ 0x80
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f000 f81f 	bl	8005000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2290      	movs	r2, #144	@ 0x90
 8004fc6:	2120      	movs	r1, #32
 8004fc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2284      	movs	r2, #132	@ 0x84
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	425a      	negs	r2, r3
 8004fe6:	4153      	adcs	r3, r2
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	001a      	movs	r2, r3
 8004fec:	1dfb      	adds	r3, r7, #7
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d09e      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b004      	add	sp, #16
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08e      	sub	sp, #56	@ 0x38
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005008:	f3ef 8310 	mrs	r3, PRIMASK
 800500c:	617b      	str	r3, [r7, #20]
  return(result);
 800500e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
 8005012:	2301      	movs	r3, #1
 8005014:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			@ (mov r8, r8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4926      	ldr	r1, [pc, #152]	@ (80050c4 <UART_EndRxTransfer+0xc4>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f383 8810 	msr	PRIMASK, r3
}
 8005038:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800503a:	f3ef 8310 	mrs	r3, PRIMASK
 800503e:	623b      	str	r3, [r7, #32]
  return(result);
 8005040:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30
 8005044:	2301      	movs	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	491b      	ldr	r1, [pc, #108]	@ (80050c8 <UART_EndRxTransfer+0xc8>)
 800505c:	400a      	ands	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d118      	bne.n	80050a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005074:	f3ef 8310 	mrs	r3, PRIMASK
 8005078:	60bb      	str	r3, [r7, #8]
  return(result);
 800507a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800507e:	2301      	movs	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			@ (mov r8, r8)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2110      	movs	r1, #16
 8005096:	438a      	bics	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f383 8810 	msr	PRIMASK, r3
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	228c      	movs	r2, #140	@ 0x8c
 80050aa:	2120      	movs	r1, #32
 80050ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	46bd      	mov	sp, r7
 80050be:	b00e      	add	sp, #56	@ 0x38
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	fffffedf 	.word	0xfffffedf
 80050c8:	effffffe 	.word	0xeffffffe

080050cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2284      	movs	r2, #132	@ 0x84
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80050de:	2302      	movs	r3, #2
 80050e0:	e027      	b.n	8005132 <HAL_UARTEx_DisableFifoMode+0x66>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2284      	movs	r2, #132	@ 0x84
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2288      	movs	r2, #136	@ 0x88
 80050ee:	2124      	movs	r1, #36	@ 0x24
 80050f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	438a      	bics	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a0b      	ldr	r2, [pc, #44]	@ (800513c <HAL_UARTEx_DisableFifoMode+0x70>)
 800510e:	4013      	ands	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2288      	movs	r2, #136	@ 0x88
 8005124:	2120      	movs	r1, #32
 8005126:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2284      	movs	r2, #132	@ 0x84
 800512c:	2100      	movs	r1, #0
 800512e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	0018      	movs	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	dfffffff 	.word	0xdfffffff

08005140 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2284      	movs	r2, #132	@ 0x84
 800514e:	5c9b      	ldrb	r3, [r3, r2]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005154:	2302      	movs	r3, #2
 8005156:	e02e      	b.n	80051b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2284      	movs	r2, #132	@ 0x84
 800515c:	2101      	movs	r1, #1
 800515e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2288      	movs	r2, #136	@ 0x88
 8005164:	2124      	movs	r1, #36	@ 0x24
 8005166:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2101      	movs	r1, #1
 800517c:	438a      	bics	r2, r1
 800517e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	08d9      	lsrs	r1, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 f854 	bl	8005244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2288      	movs	r2, #136	@ 0x88
 80051a8:	2120      	movs	r1, #32
 80051aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2284      	movs	r2, #132	@ 0x84
 80051b0:	2100      	movs	r1, #0
 80051b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	0018      	movs	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b004      	add	sp, #16
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2284      	movs	r2, #132	@ 0x84
 80051ce:	5c9b      	ldrb	r3, [r3, r2]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e02f      	b.n	8005238 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2284      	movs	r2, #132	@ 0x84
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2288      	movs	r2, #136	@ 0x88
 80051e4:	2124      	movs	r1, #36	@ 0x24
 80051e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2101      	movs	r1, #1
 80051fc:	438a      	bics	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	4a0e      	ldr	r2, [pc, #56]	@ (8005240 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005208:	4013      	ands	r3, r2
 800520a:	0019      	movs	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f813 	bl	8005244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2288      	movs	r2, #136	@ 0x88
 800522a:	2120      	movs	r1, #32
 800522c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2284      	movs	r2, #132	@ 0x84
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b004      	add	sp, #16
 800523e:	bd80      	pop	{r7, pc}
 8005240:	f1ffffff 	.word	0xf1ffffff

08005244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005250:	2b00      	cmp	r3, #0
 8005252:	d108      	bne.n	8005266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	226a      	movs	r2, #106	@ 0x6a
 8005258:	2101      	movs	r1, #1
 800525a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2268      	movs	r2, #104	@ 0x68
 8005260:	2101      	movs	r1, #1
 8005262:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005264:	e043      	b.n	80052ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005266:	260f      	movs	r6, #15
 8005268:	19bb      	adds	r3, r7, r6
 800526a:	2208      	movs	r2, #8
 800526c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800526e:	200e      	movs	r0, #14
 8005270:	183b      	adds	r3, r7, r0
 8005272:	2208      	movs	r2, #8
 8005274:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	0e5b      	lsrs	r3, r3, #25
 800527e:	b2da      	uxtb	r2, r3
 8005280:	240d      	movs	r4, #13
 8005282:	193b      	adds	r3, r7, r4
 8005284:	2107      	movs	r1, #7
 8005286:	400a      	ands	r2, r1
 8005288:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	0f5b      	lsrs	r3, r3, #29
 8005292:	b2da      	uxtb	r2, r3
 8005294:	250c      	movs	r5, #12
 8005296:	197b      	adds	r3, r7, r5
 8005298:	2107      	movs	r1, #7
 800529a:	400a      	ands	r2, r1
 800529c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529e:	183b      	adds	r3, r7, r0
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	197a      	adds	r2, r7, r5
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	4914      	ldr	r1, [pc, #80]	@ (80052f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80052a8:	5c8a      	ldrb	r2, [r1, r2]
 80052aa:	435a      	muls	r2, r3
 80052ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052ae:	197b      	adds	r3, r7, r5
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	4a12      	ldr	r2, [pc, #72]	@ (80052fc <UARTEx_SetNbDataToProcess+0xb8>)
 80052b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b6:	0019      	movs	r1, r3
 80052b8:	f7fa ffc2 	bl	8000240 <__divsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	b299      	uxth	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	226a      	movs	r2, #106	@ 0x6a
 80052c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c6:	19bb      	adds	r3, r7, r6
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	193a      	adds	r2, r7, r4
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	490a      	ldr	r1, [pc, #40]	@ (80052f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80052d0:	5c8a      	ldrb	r2, [r1, r2]
 80052d2:	435a      	muls	r2, r3
 80052d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	4a08      	ldr	r2, [pc, #32]	@ (80052fc <UARTEx_SetNbDataToProcess+0xb8>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052de:	0019      	movs	r1, r3
 80052e0:	f7fa ffae 	bl	8000240 <__divsi3>
 80052e4:	0003      	movs	r3, r0
 80052e6:	b299      	uxth	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2268      	movs	r2, #104	@ 0x68
 80052ec:	5299      	strh	r1, [r3, r2]
}
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b005      	add	sp, #20
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	08005e8c 	.word	0x08005e8c
 80052fc:	08005e94 	.word	0x08005e94

08005300 <_vsniprintf_r>:
 8005300:	b530      	push	{r4, r5, lr}
 8005302:	0005      	movs	r5, r0
 8005304:	0014      	movs	r4, r2
 8005306:	0008      	movs	r0, r1
 8005308:	001a      	movs	r2, r3
 800530a:	b09b      	sub	sp, #108	@ 0x6c
 800530c:	2c00      	cmp	r4, #0
 800530e:	da05      	bge.n	800531c <_vsniprintf_r+0x1c>
 8005310:	238b      	movs	r3, #139	@ 0x8b
 8005312:	2001      	movs	r0, #1
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	4240      	negs	r0, r0
 8005318:	b01b      	add	sp, #108	@ 0x6c
 800531a:	bd30      	pop	{r4, r5, pc}
 800531c:	2382      	movs	r3, #130	@ 0x82
 800531e:	4669      	mov	r1, sp
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	818b      	strh	r3, [r1, #12]
 8005324:	2100      	movs	r1, #0
 8005326:	9000      	str	r0, [sp, #0]
 8005328:	9119      	str	r1, [sp, #100]	@ 0x64
 800532a:	9004      	str	r0, [sp, #16]
 800532c:	428c      	cmp	r4, r1
 800532e:	d000      	beq.n	8005332 <_vsniprintf_r+0x32>
 8005330:	1e61      	subs	r1, r4, #1
 8005332:	2301      	movs	r3, #1
 8005334:	9102      	str	r1, [sp, #8]
 8005336:	9105      	str	r1, [sp, #20]
 8005338:	4669      	mov	r1, sp
 800533a:	425b      	negs	r3, r3
 800533c:	81cb      	strh	r3, [r1, #14]
 800533e:	0028      	movs	r0, r5
 8005340:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005342:	f000 f9a7 	bl	8005694 <_svfiprintf_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	da01      	bge.n	800534e <_vsniprintf_r+0x4e>
 800534a:	238b      	movs	r3, #139	@ 0x8b
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	2c00      	cmp	r4, #0
 8005350:	d0e2      	beq.n	8005318 <_vsniprintf_r+0x18>
 8005352:	2200      	movs	r2, #0
 8005354:	9b00      	ldr	r3, [sp, #0]
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e7de      	b.n	8005318 <_vsniprintf_r+0x18>
	...

0800535c <vsniprintf>:
 800535c:	b513      	push	{r0, r1, r4, lr}
 800535e:	4c04      	ldr	r4, [pc, #16]	@ (8005370 <vsniprintf+0x14>)
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	0013      	movs	r3, r2
 8005364:	000a      	movs	r2, r1
 8005366:	0001      	movs	r1, r0
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	f7ff ffc9 	bl	8005300 <_vsniprintf_r>
 800536e:	bd16      	pop	{r1, r2, r4, pc}
 8005370:	2000000c 	.word	0x2000000c

08005374 <memset>:
 8005374:	0003      	movs	r3, r0
 8005376:	1882      	adds	r2, r0, r2
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	7019      	strb	r1, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	@ (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	2000000c 	.word	0x2000000c

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	2600      	movs	r6, #0
 8005394:	4c0c      	ldr	r4, [pc, #48]	@ (80053c8 <__libc_init_array+0x38>)
 8005396:	4d0d      	ldr	r5, [pc, #52]	@ (80053cc <__libc_init_array+0x3c>)
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	2600      	movs	r6, #0
 80053a2:	f000 fc61 	bl	8005c68 <_init>
 80053a6:	4c0a      	ldr	r4, [pc, #40]	@ (80053d0 <__libc_init_array+0x40>)
 80053a8:	4d0a      	ldr	r5, [pc, #40]	@ (80053d4 <__libc_init_array+0x44>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	00b3      	lsls	r3, r6, #2
 80053b6:	58eb      	ldr	r3, [r5, r3]
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	00b3      	lsls	r3, r6, #2
 80053c0:	58eb      	ldr	r3, [r5, r3]
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	08005ed8 	.word	0x08005ed8
 80053cc:	08005ed8 	.word	0x08005ed8
 80053d0:	08005edc 	.word	0x08005edc
 80053d4:	08005ed8 	.word	0x08005ed8

080053d8 <__retarget_lock_acquire_recursive>:
 80053d8:	4770      	bx	lr

080053da <__retarget_lock_release_recursive>:
 80053da:	4770      	bx	lr

080053dc <_free_r>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	0005      	movs	r5, r0
 80053e0:	1e0c      	subs	r4, r1, #0
 80053e2:	d010      	beq.n	8005406 <_free_r+0x2a>
 80053e4:	3c04      	subs	r4, #4
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da00      	bge.n	80053ee <_free_r+0x12>
 80053ec:	18e4      	adds	r4, r4, r3
 80053ee:	0028      	movs	r0, r5
 80053f0:	f000 f8e0 	bl	80055b4 <__malloc_lock>
 80053f4:	4a1d      	ldr	r2, [pc, #116]	@ (800546c <_free_r+0x90>)
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <_free_r+0x2c>
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	6014      	str	r4, [r2, #0]
 8005400:	0028      	movs	r0, r5
 8005402:	f000 f8df 	bl	80055c4 <__malloc_unlock>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	42a3      	cmp	r3, r4
 800540a:	d908      	bls.n	800541e <_free_r+0x42>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	1821      	adds	r1, r4, r0
 8005410:	428b      	cmp	r3, r1
 8005412:	d1f3      	bne.n	80053fc <_free_r+0x20>
 8005414:	6819      	ldr	r1, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	1809      	adds	r1, r1, r0
 800541a:	6021      	str	r1, [r4, #0]
 800541c:	e7ee      	b.n	80053fc <_free_r+0x20>
 800541e:	001a      	movs	r2, r3
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <_free_r+0x4e>
 8005426:	42a3      	cmp	r3, r4
 8005428:	d9f9      	bls.n	800541e <_free_r+0x42>
 800542a:	6811      	ldr	r1, [r2, #0]
 800542c:	1850      	adds	r0, r2, r1
 800542e:	42a0      	cmp	r0, r4
 8005430:	d10b      	bne.n	800544a <_free_r+0x6e>
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1809      	adds	r1, r1, r0
 8005436:	1850      	adds	r0, r2, r1
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	4283      	cmp	r3, r0
 800543c:	d1e0      	bne.n	8005400 <_free_r+0x24>
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	1841      	adds	r1, r0, r1
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	6053      	str	r3, [r2, #4]
 8005448:	e7da      	b.n	8005400 <_free_r+0x24>
 800544a:	42a0      	cmp	r0, r4
 800544c:	d902      	bls.n	8005454 <_free_r+0x78>
 800544e:	230c      	movs	r3, #12
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	e7d5      	b.n	8005400 <_free_r+0x24>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	1821      	adds	r1, r4, r0
 8005458:	428b      	cmp	r3, r1
 800545a:	d103      	bne.n	8005464 <_free_r+0x88>
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	1809      	adds	r1, r1, r0
 8005462:	6021      	str	r1, [r4, #0]
 8005464:	6063      	str	r3, [r4, #4]
 8005466:	6054      	str	r4, [r2, #4]
 8005468:	e7ca      	b.n	8005400 <_free_r+0x24>
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	20000334 	.word	0x20000334

08005470 <sbrk_aligned>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4e0f      	ldr	r6, [pc, #60]	@ (80054b0 <sbrk_aligned+0x40>)
 8005474:	000d      	movs	r5, r1
 8005476:	6831      	ldr	r1, [r6, #0]
 8005478:	0004      	movs	r4, r0
 800547a:	2900      	cmp	r1, #0
 800547c:	d102      	bne.n	8005484 <sbrk_aligned+0x14>
 800547e:	f000 fb95 	bl	8005bac <_sbrk_r>
 8005482:	6030      	str	r0, [r6, #0]
 8005484:	0029      	movs	r1, r5
 8005486:	0020      	movs	r0, r4
 8005488:	f000 fb90 	bl	8005bac <_sbrk_r>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d103      	bne.n	8005498 <sbrk_aligned+0x28>
 8005490:	2501      	movs	r5, #1
 8005492:	426d      	negs	r5, r5
 8005494:	0028      	movs	r0, r5
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	2303      	movs	r3, #3
 800549a:	1cc5      	adds	r5, r0, #3
 800549c:	439d      	bics	r5, r3
 800549e:	42a8      	cmp	r0, r5
 80054a0:	d0f8      	beq.n	8005494 <sbrk_aligned+0x24>
 80054a2:	1a29      	subs	r1, r5, r0
 80054a4:	0020      	movs	r0, r4
 80054a6:	f000 fb81 	bl	8005bac <_sbrk_r>
 80054aa:	3001      	adds	r0, #1
 80054ac:	d1f2      	bne.n	8005494 <sbrk_aligned+0x24>
 80054ae:	e7ef      	b.n	8005490 <sbrk_aligned+0x20>
 80054b0:	20000330 	.word	0x20000330

080054b4 <_malloc_r>:
 80054b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054b6:	2203      	movs	r2, #3
 80054b8:	1ccb      	adds	r3, r1, #3
 80054ba:	4393      	bics	r3, r2
 80054bc:	3308      	adds	r3, #8
 80054be:	0005      	movs	r5, r0
 80054c0:	001f      	movs	r7, r3
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d234      	bcs.n	8005530 <_malloc_r+0x7c>
 80054c6:	270c      	movs	r7, #12
 80054c8:	42b9      	cmp	r1, r7
 80054ca:	d833      	bhi.n	8005534 <_malloc_r+0x80>
 80054cc:	0028      	movs	r0, r5
 80054ce:	f000 f871 	bl	80055b4 <__malloc_lock>
 80054d2:	4e37      	ldr	r6, [pc, #220]	@ (80055b0 <_malloc_r+0xfc>)
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	001c      	movs	r4, r3
 80054d8:	2c00      	cmp	r4, #0
 80054da:	d12f      	bne.n	800553c <_malloc_r+0x88>
 80054dc:	0039      	movs	r1, r7
 80054de:	0028      	movs	r0, r5
 80054e0:	f7ff ffc6 	bl	8005470 <sbrk_aligned>
 80054e4:	0004      	movs	r4, r0
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	d15f      	bne.n	80055aa <_malloc_r+0xf6>
 80054ea:	6834      	ldr	r4, [r6, #0]
 80054ec:	9400      	str	r4, [sp, #0]
 80054ee:	9b00      	ldr	r3, [sp, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d14a      	bne.n	800558a <_malloc_r+0xd6>
 80054f4:	2c00      	cmp	r4, #0
 80054f6:	d052      	beq.n	800559e <_malloc_r+0xea>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	0028      	movs	r0, r5
 80054fc:	18e3      	adds	r3, r4, r3
 80054fe:	9900      	ldr	r1, [sp, #0]
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	f000 fb53 	bl	8005bac <_sbrk_r>
 8005506:	9b01      	ldr	r3, [sp, #4]
 8005508:	4283      	cmp	r3, r0
 800550a:	d148      	bne.n	800559e <_malloc_r+0xea>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	0028      	movs	r0, r5
 8005510:	1aff      	subs	r7, r7, r3
 8005512:	0039      	movs	r1, r7
 8005514:	f7ff ffac 	bl	8005470 <sbrk_aligned>
 8005518:	3001      	adds	r0, #1
 800551a:	d040      	beq.n	800559e <_malloc_r+0xea>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	19db      	adds	r3, r3, r7
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	6833      	ldr	r3, [r6, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	2a00      	cmp	r2, #0
 8005528:	d133      	bne.n	8005592 <_malloc_r+0xde>
 800552a:	9b00      	ldr	r3, [sp, #0]
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	e019      	b.n	8005564 <_malloc_r+0xb0>
 8005530:	2b00      	cmp	r3, #0
 8005532:	dac9      	bge.n	80054c8 <_malloc_r+0x14>
 8005534:	230c      	movs	r3, #12
 8005536:	602b      	str	r3, [r5, #0]
 8005538:	2000      	movs	r0, #0
 800553a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800553c:	6821      	ldr	r1, [r4, #0]
 800553e:	1bc9      	subs	r1, r1, r7
 8005540:	d420      	bmi.n	8005584 <_malloc_r+0xd0>
 8005542:	290b      	cmp	r1, #11
 8005544:	d90a      	bls.n	800555c <_malloc_r+0xa8>
 8005546:	19e2      	adds	r2, r4, r7
 8005548:	6027      	str	r7, [r4, #0]
 800554a:	42a3      	cmp	r3, r4
 800554c:	d104      	bne.n	8005558 <_malloc_r+0xa4>
 800554e:	6032      	str	r2, [r6, #0]
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	6011      	str	r1, [r2, #0]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	e005      	b.n	8005564 <_malloc_r+0xb0>
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	e7f9      	b.n	8005550 <_malloc_r+0x9c>
 800555c:	6862      	ldr	r2, [r4, #4]
 800555e:	42a3      	cmp	r3, r4
 8005560:	d10e      	bne.n	8005580 <_malloc_r+0xcc>
 8005562:	6032      	str	r2, [r6, #0]
 8005564:	0028      	movs	r0, r5
 8005566:	f000 f82d 	bl	80055c4 <__malloc_unlock>
 800556a:	0020      	movs	r0, r4
 800556c:	2207      	movs	r2, #7
 800556e:	300b      	adds	r0, #11
 8005570:	1d23      	adds	r3, r4, #4
 8005572:	4390      	bics	r0, r2
 8005574:	1ac2      	subs	r2, r0, r3
 8005576:	4298      	cmp	r0, r3
 8005578:	d0df      	beq.n	800553a <_malloc_r+0x86>
 800557a:	1a1b      	subs	r3, r3, r0
 800557c:	50a3      	str	r3, [r4, r2]
 800557e:	e7dc      	b.n	800553a <_malloc_r+0x86>
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e7ef      	b.n	8005564 <_malloc_r+0xb0>
 8005584:	0023      	movs	r3, r4
 8005586:	6864      	ldr	r4, [r4, #4]
 8005588:	e7a6      	b.n	80054d8 <_malloc_r+0x24>
 800558a:	9c00      	ldr	r4, [sp, #0]
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	e7ad      	b.n	80054ee <_malloc_r+0x3a>
 8005592:	001a      	movs	r2, r3
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	42a3      	cmp	r3, r4
 8005598:	d1fb      	bne.n	8005592 <_malloc_r+0xde>
 800559a:	2300      	movs	r3, #0
 800559c:	e7da      	b.n	8005554 <_malloc_r+0xa0>
 800559e:	230c      	movs	r3, #12
 80055a0:	0028      	movs	r0, r5
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f000 f80e 	bl	80055c4 <__malloc_unlock>
 80055a8:	e7c6      	b.n	8005538 <_malloc_r+0x84>
 80055aa:	6007      	str	r7, [r0, #0]
 80055ac:	e7da      	b.n	8005564 <_malloc_r+0xb0>
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	20000334 	.word	0x20000334

080055b4 <__malloc_lock>:
 80055b4:	b510      	push	{r4, lr}
 80055b6:	4802      	ldr	r0, [pc, #8]	@ (80055c0 <__malloc_lock+0xc>)
 80055b8:	f7ff ff0e 	bl	80053d8 <__retarget_lock_acquire_recursive>
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	2000032c 	.word	0x2000032c

080055c4 <__malloc_unlock>:
 80055c4:	b510      	push	{r4, lr}
 80055c6:	4802      	ldr	r0, [pc, #8]	@ (80055d0 <__malloc_unlock+0xc>)
 80055c8:	f7ff ff07 	bl	80053da <__retarget_lock_release_recursive>
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	2000032c 	.word	0x2000032c

080055d4 <__ssputs_r>:
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	688e      	ldr	r6, [r1, #8]
 80055d8:	b085      	sub	sp, #20
 80055da:	001f      	movs	r7, r3
 80055dc:	000c      	movs	r4, r1
 80055de:	680b      	ldr	r3, [r1, #0]
 80055e0:	9002      	str	r0, [sp, #8]
 80055e2:	9203      	str	r2, [sp, #12]
 80055e4:	42be      	cmp	r6, r7
 80055e6:	d830      	bhi.n	800564a <__ssputs_r+0x76>
 80055e8:	210c      	movs	r1, #12
 80055ea:	5e62      	ldrsh	r2, [r4, r1]
 80055ec:	2190      	movs	r1, #144	@ 0x90
 80055ee:	00c9      	lsls	r1, r1, #3
 80055f0:	420a      	tst	r2, r1
 80055f2:	d028      	beq.n	8005646 <__ssputs_r+0x72>
 80055f4:	2003      	movs	r0, #3
 80055f6:	6921      	ldr	r1, [r4, #16]
 80055f8:	1a5b      	subs	r3, r3, r1
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	6963      	ldr	r3, [r4, #20]
 80055fe:	4343      	muls	r3, r0
 8005600:	9801      	ldr	r0, [sp, #4]
 8005602:	0fdd      	lsrs	r5, r3, #31
 8005604:	18ed      	adds	r5, r5, r3
 8005606:	1c7b      	adds	r3, r7, #1
 8005608:	181b      	adds	r3, r3, r0
 800560a:	106d      	asrs	r5, r5, #1
 800560c:	42ab      	cmp	r3, r5
 800560e:	d900      	bls.n	8005612 <__ssputs_r+0x3e>
 8005610:	001d      	movs	r5, r3
 8005612:	0552      	lsls	r2, r2, #21
 8005614:	d528      	bpl.n	8005668 <__ssputs_r+0x94>
 8005616:	0029      	movs	r1, r5
 8005618:	9802      	ldr	r0, [sp, #8]
 800561a:	f7ff ff4b 	bl	80054b4 <_malloc_r>
 800561e:	1e06      	subs	r6, r0, #0
 8005620:	d02c      	beq.n	800567c <__ssputs_r+0xa8>
 8005622:	9a01      	ldr	r2, [sp, #4]
 8005624:	6921      	ldr	r1, [r4, #16]
 8005626:	f000 fade 	bl	8005be6 <memcpy>
 800562a:	89a2      	ldrh	r2, [r4, #12]
 800562c:	4b18      	ldr	r3, [pc, #96]	@ (8005690 <__ssputs_r+0xbc>)
 800562e:	401a      	ands	r2, r3
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	4313      	orrs	r3, r2
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	6126      	str	r6, [r4, #16]
 800563a:	18f6      	adds	r6, r6, r3
 800563c:	6026      	str	r6, [r4, #0]
 800563e:	003e      	movs	r6, r7
 8005640:	6165      	str	r5, [r4, #20]
 8005642:	1aed      	subs	r5, r5, r3
 8005644:	60a5      	str	r5, [r4, #8]
 8005646:	42be      	cmp	r6, r7
 8005648:	d900      	bls.n	800564c <__ssputs_r+0x78>
 800564a:	003e      	movs	r6, r7
 800564c:	0032      	movs	r2, r6
 800564e:	9903      	ldr	r1, [sp, #12]
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	f000 fa99 	bl	8005b88 <memmove>
 8005656:	2000      	movs	r0, #0
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	1b9b      	subs	r3, r3, r6
 800565c:	60a3      	str	r3, [r4, #8]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	199b      	adds	r3, r3, r6
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	b005      	add	sp, #20
 8005666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005668:	002a      	movs	r2, r5
 800566a:	9802      	ldr	r0, [sp, #8]
 800566c:	f000 fac4 	bl	8005bf8 <_realloc_r>
 8005670:	1e06      	subs	r6, r0, #0
 8005672:	d1e0      	bne.n	8005636 <__ssputs_r+0x62>
 8005674:	6921      	ldr	r1, [r4, #16]
 8005676:	9802      	ldr	r0, [sp, #8]
 8005678:	f7ff feb0 	bl	80053dc <_free_r>
 800567c:	230c      	movs	r3, #12
 800567e:	2001      	movs	r0, #1
 8005680:	9a02      	ldr	r2, [sp, #8]
 8005682:	4240      	negs	r0, r0
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	89a2      	ldrh	r2, [r4, #12]
 8005688:	3334      	adds	r3, #52	@ 0x34
 800568a:	4313      	orrs	r3, r2
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	e7e9      	b.n	8005664 <__ssputs_r+0x90>
 8005690:	fffffb7f 	.word	0xfffffb7f

08005694 <_svfiprintf_r>:
 8005694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005696:	b0a1      	sub	sp, #132	@ 0x84
 8005698:	9003      	str	r0, [sp, #12]
 800569a:	001d      	movs	r5, r3
 800569c:	898b      	ldrh	r3, [r1, #12]
 800569e:	000f      	movs	r7, r1
 80056a0:	0016      	movs	r6, r2
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	d511      	bpl.n	80056ca <_svfiprintf_r+0x36>
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10e      	bne.n	80056ca <_svfiprintf_r+0x36>
 80056ac:	2140      	movs	r1, #64	@ 0x40
 80056ae:	f7ff ff01 	bl	80054b4 <_malloc_r>
 80056b2:	6038      	str	r0, [r7, #0]
 80056b4:	6138      	str	r0, [r7, #16]
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d105      	bne.n	80056c6 <_svfiprintf_r+0x32>
 80056ba:	230c      	movs	r3, #12
 80056bc:	9a03      	ldr	r2, [sp, #12]
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	2001      	movs	r0, #1
 80056c2:	4240      	negs	r0, r0
 80056c4:	e0cf      	b.n	8005866 <_svfiprintf_r+0x1d2>
 80056c6:	2340      	movs	r3, #64	@ 0x40
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	2300      	movs	r3, #0
 80056cc:	ac08      	add	r4, sp, #32
 80056ce:	6163      	str	r3, [r4, #20]
 80056d0:	3320      	adds	r3, #32
 80056d2:	7663      	strb	r3, [r4, #25]
 80056d4:	3310      	adds	r3, #16
 80056d6:	76a3      	strb	r3, [r4, #26]
 80056d8:	9507      	str	r5, [sp, #28]
 80056da:	0035      	movs	r5, r6
 80056dc:	782b      	ldrb	r3, [r5, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <_svfiprintf_r+0x52>
 80056e2:	2b25      	cmp	r3, #37	@ 0x25
 80056e4:	d148      	bne.n	8005778 <_svfiprintf_r+0xe4>
 80056e6:	1bab      	subs	r3, r5, r6
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	42b5      	cmp	r5, r6
 80056ec:	d00b      	beq.n	8005706 <_svfiprintf_r+0x72>
 80056ee:	0032      	movs	r2, r6
 80056f0:	0039      	movs	r1, r7
 80056f2:	9803      	ldr	r0, [sp, #12]
 80056f4:	f7ff ff6e 	bl	80055d4 <__ssputs_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d100      	bne.n	80056fe <_svfiprintf_r+0x6a>
 80056fc:	e0ae      	b.n	800585c <_svfiprintf_r+0x1c8>
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	9a05      	ldr	r2, [sp, #20]
 8005702:	189b      	adds	r3, r3, r2
 8005704:	6163      	str	r3, [r4, #20]
 8005706:	782b      	ldrb	r3, [r5, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d100      	bne.n	800570e <_svfiprintf_r+0x7a>
 800570c:	e0a6      	b.n	800585c <_svfiprintf_r+0x1c8>
 800570e:	2201      	movs	r2, #1
 8005710:	2300      	movs	r3, #0
 8005712:	4252      	negs	r2, r2
 8005714:	6062      	str	r2, [r4, #4]
 8005716:	a904      	add	r1, sp, #16
 8005718:	3254      	adds	r2, #84	@ 0x54
 800571a:	1852      	adds	r2, r2, r1
 800571c:	1c6e      	adds	r6, r5, #1
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	60e3      	str	r3, [r4, #12]
 8005722:	60a3      	str	r3, [r4, #8]
 8005724:	7013      	strb	r3, [r2, #0]
 8005726:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005728:	4b54      	ldr	r3, [pc, #336]	@ (800587c <_svfiprintf_r+0x1e8>)
 800572a:	2205      	movs	r2, #5
 800572c:	0018      	movs	r0, r3
 800572e:	7831      	ldrb	r1, [r6, #0]
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	f000 fa4d 	bl	8005bd0 <memchr>
 8005736:	1c75      	adds	r5, r6, #1
 8005738:	2800      	cmp	r0, #0
 800573a:	d11f      	bne.n	800577c <_svfiprintf_r+0xe8>
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	06d3      	lsls	r3, r2, #27
 8005740:	d504      	bpl.n	800574c <_svfiprintf_r+0xb8>
 8005742:	2353      	movs	r3, #83	@ 0x53
 8005744:	a904      	add	r1, sp, #16
 8005746:	185b      	adds	r3, r3, r1
 8005748:	2120      	movs	r1, #32
 800574a:	7019      	strb	r1, [r3, #0]
 800574c:	0713      	lsls	r3, r2, #28
 800574e:	d504      	bpl.n	800575a <_svfiprintf_r+0xc6>
 8005750:	2353      	movs	r3, #83	@ 0x53
 8005752:	a904      	add	r1, sp, #16
 8005754:	185b      	adds	r3, r3, r1
 8005756:	212b      	movs	r1, #43	@ 0x2b
 8005758:	7019      	strb	r1, [r3, #0]
 800575a:	7833      	ldrb	r3, [r6, #0]
 800575c:	2b2a      	cmp	r3, #42	@ 0x2a
 800575e:	d016      	beq.n	800578e <_svfiprintf_r+0xfa>
 8005760:	0035      	movs	r5, r6
 8005762:	2100      	movs	r1, #0
 8005764:	200a      	movs	r0, #10
 8005766:	68e3      	ldr	r3, [r4, #12]
 8005768:	782a      	ldrb	r2, [r5, #0]
 800576a:	1c6e      	adds	r6, r5, #1
 800576c:	3a30      	subs	r2, #48	@ 0x30
 800576e:	2a09      	cmp	r2, #9
 8005770:	d950      	bls.n	8005814 <_svfiprintf_r+0x180>
 8005772:	2900      	cmp	r1, #0
 8005774:	d111      	bne.n	800579a <_svfiprintf_r+0x106>
 8005776:	e017      	b.n	80057a8 <_svfiprintf_r+0x114>
 8005778:	3501      	adds	r5, #1
 800577a:	e7af      	b.n	80056dc <_svfiprintf_r+0x48>
 800577c:	9b05      	ldr	r3, [sp, #20]
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	1ac0      	subs	r0, r0, r3
 8005782:	2301      	movs	r3, #1
 8005784:	4083      	lsls	r3, r0
 8005786:	4313      	orrs	r3, r2
 8005788:	002e      	movs	r6, r5
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	e7cc      	b.n	8005728 <_svfiprintf_r+0x94>
 800578e:	9b07      	ldr	r3, [sp, #28]
 8005790:	1d19      	adds	r1, r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	9107      	str	r1, [sp, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	db01      	blt.n	800579e <_svfiprintf_r+0x10a>
 800579a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800579c:	e004      	b.n	80057a8 <_svfiprintf_r+0x114>
 800579e:	425b      	negs	r3, r3
 80057a0:	60e3      	str	r3, [r4, #12]
 80057a2:	2302      	movs	r3, #2
 80057a4:	4313      	orrs	r3, r2
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	782b      	ldrb	r3, [r5, #0]
 80057aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ac:	d10c      	bne.n	80057c8 <_svfiprintf_r+0x134>
 80057ae:	786b      	ldrb	r3, [r5, #1]
 80057b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057b2:	d134      	bne.n	800581e <_svfiprintf_r+0x18a>
 80057b4:	9b07      	ldr	r3, [sp, #28]
 80057b6:	3502      	adds	r5, #2
 80057b8:	1d1a      	adds	r2, r3, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	9207      	str	r2, [sp, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da01      	bge.n	80057c6 <_svfiprintf_r+0x132>
 80057c2:	2301      	movs	r3, #1
 80057c4:	425b      	negs	r3, r3
 80057c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c8:	4e2d      	ldr	r6, [pc, #180]	@ (8005880 <_svfiprintf_r+0x1ec>)
 80057ca:	2203      	movs	r2, #3
 80057cc:	0030      	movs	r0, r6
 80057ce:	7829      	ldrb	r1, [r5, #0]
 80057d0:	f000 f9fe 	bl	8005bd0 <memchr>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d006      	beq.n	80057e6 <_svfiprintf_r+0x152>
 80057d8:	2340      	movs	r3, #64	@ 0x40
 80057da:	1b80      	subs	r0, r0, r6
 80057dc:	4083      	lsls	r3, r0
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	3501      	adds	r5, #1
 80057e2:	4313      	orrs	r3, r2
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	7829      	ldrb	r1, [r5, #0]
 80057e8:	2206      	movs	r2, #6
 80057ea:	4826      	ldr	r0, [pc, #152]	@ (8005884 <_svfiprintf_r+0x1f0>)
 80057ec:	1c6e      	adds	r6, r5, #1
 80057ee:	7621      	strb	r1, [r4, #24]
 80057f0:	f000 f9ee 	bl	8005bd0 <memchr>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d038      	beq.n	800586a <_svfiprintf_r+0x1d6>
 80057f8:	4b23      	ldr	r3, [pc, #140]	@ (8005888 <_svfiprintf_r+0x1f4>)
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d122      	bne.n	8005844 <_svfiprintf_r+0x1b0>
 80057fe:	2207      	movs	r2, #7
 8005800:	9b07      	ldr	r3, [sp, #28]
 8005802:	3307      	adds	r3, #7
 8005804:	4393      	bics	r3, r2
 8005806:	3308      	adds	r3, #8
 8005808:	9307      	str	r3, [sp, #28]
 800580a:	6963      	ldr	r3, [r4, #20]
 800580c:	9a04      	ldr	r2, [sp, #16]
 800580e:	189b      	adds	r3, r3, r2
 8005810:	6163      	str	r3, [r4, #20]
 8005812:	e762      	b.n	80056da <_svfiprintf_r+0x46>
 8005814:	4343      	muls	r3, r0
 8005816:	0035      	movs	r5, r6
 8005818:	2101      	movs	r1, #1
 800581a:	189b      	adds	r3, r3, r2
 800581c:	e7a4      	b.n	8005768 <_svfiprintf_r+0xd4>
 800581e:	2300      	movs	r3, #0
 8005820:	200a      	movs	r0, #10
 8005822:	0019      	movs	r1, r3
 8005824:	3501      	adds	r5, #1
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	782a      	ldrb	r2, [r5, #0]
 800582a:	1c6e      	adds	r6, r5, #1
 800582c:	3a30      	subs	r2, #48	@ 0x30
 800582e:	2a09      	cmp	r2, #9
 8005830:	d903      	bls.n	800583a <_svfiprintf_r+0x1a6>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0c8      	beq.n	80057c8 <_svfiprintf_r+0x134>
 8005836:	9109      	str	r1, [sp, #36]	@ 0x24
 8005838:	e7c6      	b.n	80057c8 <_svfiprintf_r+0x134>
 800583a:	4341      	muls	r1, r0
 800583c:	0035      	movs	r5, r6
 800583e:	2301      	movs	r3, #1
 8005840:	1889      	adds	r1, r1, r2
 8005842:	e7f1      	b.n	8005828 <_svfiprintf_r+0x194>
 8005844:	aa07      	add	r2, sp, #28
 8005846:	9200      	str	r2, [sp, #0]
 8005848:	0021      	movs	r1, r4
 800584a:	003a      	movs	r2, r7
 800584c:	4b0f      	ldr	r3, [pc, #60]	@ (800588c <_svfiprintf_r+0x1f8>)
 800584e:	9803      	ldr	r0, [sp, #12]
 8005850:	e000      	b.n	8005854 <_svfiprintf_r+0x1c0>
 8005852:	bf00      	nop
 8005854:	9004      	str	r0, [sp, #16]
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	d1d6      	bne.n	800580a <_svfiprintf_r+0x176>
 800585c:	89bb      	ldrh	r3, [r7, #12]
 800585e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005860:	065b      	lsls	r3, r3, #25
 8005862:	d500      	bpl.n	8005866 <_svfiprintf_r+0x1d2>
 8005864:	e72c      	b.n	80056c0 <_svfiprintf_r+0x2c>
 8005866:	b021      	add	sp, #132	@ 0x84
 8005868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586a:	aa07      	add	r2, sp, #28
 800586c:	9200      	str	r2, [sp, #0]
 800586e:	0021      	movs	r1, r4
 8005870:	003a      	movs	r2, r7
 8005872:	4b06      	ldr	r3, [pc, #24]	@ (800588c <_svfiprintf_r+0x1f8>)
 8005874:	9803      	ldr	r0, [sp, #12]
 8005876:	f000 f87b 	bl	8005970 <_printf_i>
 800587a:	e7eb      	b.n	8005854 <_svfiprintf_r+0x1c0>
 800587c:	08005e9c 	.word	0x08005e9c
 8005880:	08005ea2 	.word	0x08005ea2
 8005884:	08005ea6 	.word	0x08005ea6
 8005888:	00000000 	.word	0x00000000
 800588c:	080055d5 	.word	0x080055d5

08005890 <_printf_common>:
 8005890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005892:	0016      	movs	r6, r2
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	688a      	ldr	r2, [r1, #8]
 8005898:	690b      	ldr	r3, [r1, #16]
 800589a:	000c      	movs	r4, r1
 800589c:	9000      	str	r0, [sp, #0]
 800589e:	4293      	cmp	r3, r2
 80058a0:	da00      	bge.n	80058a4 <_printf_common+0x14>
 80058a2:	0013      	movs	r3, r2
 80058a4:	0022      	movs	r2, r4
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	3243      	adds	r2, #67	@ 0x43
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	d001      	beq.n	80058b4 <_printf_common+0x24>
 80058b0:	3301      	adds	r3, #1
 80058b2:	6033      	str	r3, [r6, #0]
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	069b      	lsls	r3, r3, #26
 80058b8:	d502      	bpl.n	80058c0 <_printf_common+0x30>
 80058ba:	6833      	ldr	r3, [r6, #0]
 80058bc:	3302      	adds	r3, #2
 80058be:	6033      	str	r3, [r6, #0]
 80058c0:	6822      	ldr	r2, [r4, #0]
 80058c2:	2306      	movs	r3, #6
 80058c4:	0015      	movs	r5, r2
 80058c6:	401d      	ands	r5, r3
 80058c8:	421a      	tst	r2, r3
 80058ca:	d027      	beq.n	800591c <_printf_common+0x8c>
 80058cc:	0023      	movs	r3, r4
 80058ce:	3343      	adds	r3, #67	@ 0x43
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	1e5a      	subs	r2, r3, #1
 80058d4:	4193      	sbcs	r3, r2
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	0692      	lsls	r2, r2, #26
 80058da:	d430      	bmi.n	800593e <_printf_common+0xae>
 80058dc:	0022      	movs	r2, r4
 80058de:	9901      	ldr	r1, [sp, #4]
 80058e0:	9800      	ldr	r0, [sp, #0]
 80058e2:	9d08      	ldr	r5, [sp, #32]
 80058e4:	3243      	adds	r2, #67	@ 0x43
 80058e6:	47a8      	blx	r5
 80058e8:	3001      	adds	r0, #1
 80058ea:	d025      	beq.n	8005938 <_printf_common+0xa8>
 80058ec:	2206      	movs	r2, #6
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	2500      	movs	r5, #0
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d105      	bne.n	8005904 <_printf_common+0x74>
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	68e5      	ldr	r5, [r4, #12]
 80058fc:	1aed      	subs	r5, r5, r3
 80058fe:	43eb      	mvns	r3, r5
 8005900:	17db      	asrs	r3, r3, #31
 8005902:	401d      	ands	r5, r3
 8005904:	68a3      	ldr	r3, [r4, #8]
 8005906:	6922      	ldr	r2, [r4, #16]
 8005908:	4293      	cmp	r3, r2
 800590a:	dd01      	ble.n	8005910 <_printf_common+0x80>
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	18ed      	adds	r5, r5, r3
 8005910:	2600      	movs	r6, #0
 8005912:	42b5      	cmp	r5, r6
 8005914:	d120      	bne.n	8005958 <_printf_common+0xc8>
 8005916:	2000      	movs	r0, #0
 8005918:	e010      	b.n	800593c <_printf_common+0xac>
 800591a:	3501      	adds	r5, #1
 800591c:	68e3      	ldr	r3, [r4, #12]
 800591e:	6832      	ldr	r2, [r6, #0]
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	42ab      	cmp	r3, r5
 8005924:	ddd2      	ble.n	80058cc <_printf_common+0x3c>
 8005926:	0022      	movs	r2, r4
 8005928:	2301      	movs	r3, #1
 800592a:	9901      	ldr	r1, [sp, #4]
 800592c:	9800      	ldr	r0, [sp, #0]
 800592e:	9f08      	ldr	r7, [sp, #32]
 8005930:	3219      	adds	r2, #25
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	d1f0      	bne.n	800591a <_printf_common+0x8a>
 8005938:	2001      	movs	r0, #1
 800593a:	4240      	negs	r0, r0
 800593c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800593e:	2030      	movs	r0, #48	@ 0x30
 8005940:	18e1      	adds	r1, r4, r3
 8005942:	3143      	adds	r1, #67	@ 0x43
 8005944:	7008      	strb	r0, [r1, #0]
 8005946:	0021      	movs	r1, r4
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	3145      	adds	r1, #69	@ 0x45
 800594c:	7809      	ldrb	r1, [r1, #0]
 800594e:	18a2      	adds	r2, r4, r2
 8005950:	3243      	adds	r2, #67	@ 0x43
 8005952:	3302      	adds	r3, #2
 8005954:	7011      	strb	r1, [r2, #0]
 8005956:	e7c1      	b.n	80058dc <_printf_common+0x4c>
 8005958:	0022      	movs	r2, r4
 800595a:	2301      	movs	r3, #1
 800595c:	9901      	ldr	r1, [sp, #4]
 800595e:	9800      	ldr	r0, [sp, #0]
 8005960:	9f08      	ldr	r7, [sp, #32]
 8005962:	321a      	adds	r2, #26
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	d0e6      	beq.n	8005938 <_printf_common+0xa8>
 800596a:	3601      	adds	r6, #1
 800596c:	e7d1      	b.n	8005912 <_printf_common+0x82>
	...

08005970 <_printf_i>:
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	b08b      	sub	sp, #44	@ 0x2c
 8005974:	9206      	str	r2, [sp, #24]
 8005976:	000a      	movs	r2, r1
 8005978:	3243      	adds	r2, #67	@ 0x43
 800597a:	9307      	str	r3, [sp, #28]
 800597c:	9005      	str	r0, [sp, #20]
 800597e:	9203      	str	r2, [sp, #12]
 8005980:	7e0a      	ldrb	r2, [r1, #24]
 8005982:	000c      	movs	r4, r1
 8005984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005986:	2a78      	cmp	r2, #120	@ 0x78
 8005988:	d809      	bhi.n	800599e <_printf_i+0x2e>
 800598a:	2a62      	cmp	r2, #98	@ 0x62
 800598c:	d80b      	bhi.n	80059a6 <_printf_i+0x36>
 800598e:	2a00      	cmp	r2, #0
 8005990:	d100      	bne.n	8005994 <_printf_i+0x24>
 8005992:	e0ba      	b.n	8005b0a <_printf_i+0x19a>
 8005994:	497a      	ldr	r1, [pc, #488]	@ (8005b80 <_printf_i+0x210>)
 8005996:	9104      	str	r1, [sp, #16]
 8005998:	2a58      	cmp	r2, #88	@ 0x58
 800599a:	d100      	bne.n	800599e <_printf_i+0x2e>
 800599c:	e08e      	b.n	8005abc <_printf_i+0x14c>
 800599e:	0025      	movs	r5, r4
 80059a0:	3542      	adds	r5, #66	@ 0x42
 80059a2:	702a      	strb	r2, [r5, #0]
 80059a4:	e022      	b.n	80059ec <_printf_i+0x7c>
 80059a6:	0010      	movs	r0, r2
 80059a8:	3863      	subs	r0, #99	@ 0x63
 80059aa:	2815      	cmp	r0, #21
 80059ac:	d8f7      	bhi.n	800599e <_printf_i+0x2e>
 80059ae:	f7fa fbb3 	bl	8000118 <__gnu_thumb1_case_shi>
 80059b2:	0016      	.short	0x0016
 80059b4:	fff6001f 	.word	0xfff6001f
 80059b8:	fff6fff6 	.word	0xfff6fff6
 80059bc:	001ffff6 	.word	0x001ffff6
 80059c0:	fff6fff6 	.word	0xfff6fff6
 80059c4:	fff6fff6 	.word	0xfff6fff6
 80059c8:	0036009f 	.word	0x0036009f
 80059cc:	fff6007e 	.word	0xfff6007e
 80059d0:	00b0fff6 	.word	0x00b0fff6
 80059d4:	0036fff6 	.word	0x0036fff6
 80059d8:	fff6fff6 	.word	0xfff6fff6
 80059dc:	0082      	.short	0x0082
 80059de:	0025      	movs	r5, r4
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	3542      	adds	r5, #66	@ 0x42
 80059e4:	1d11      	adds	r1, r2, #4
 80059e6:	6019      	str	r1, [r3, #0]
 80059e8:	6813      	ldr	r3, [r2, #0]
 80059ea:	702b      	strb	r3, [r5, #0]
 80059ec:	2301      	movs	r3, #1
 80059ee:	e09e      	b.n	8005b2e <_printf_i+0x1be>
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	6809      	ldr	r1, [r1, #0]
 80059f4:	1d02      	adds	r2, r0, #4
 80059f6:	060d      	lsls	r5, r1, #24
 80059f8:	d50b      	bpl.n	8005a12 <_printf_i+0xa2>
 80059fa:	6806      	ldr	r6, [r0, #0]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	da03      	bge.n	8005a0a <_printf_i+0x9a>
 8005a02:	232d      	movs	r3, #45	@ 0x2d
 8005a04:	9a03      	ldr	r2, [sp, #12]
 8005a06:	4276      	negs	r6, r6
 8005a08:	7013      	strb	r3, [r2, #0]
 8005a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005b80 <_printf_i+0x210>)
 8005a0c:	270a      	movs	r7, #10
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	e018      	b.n	8005a44 <_printf_i+0xd4>
 8005a12:	6806      	ldr	r6, [r0, #0]
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	0649      	lsls	r1, r1, #25
 8005a18:	d5f1      	bpl.n	80059fe <_printf_i+0x8e>
 8005a1a:	b236      	sxth	r6, r6
 8005a1c:	e7ef      	b.n	80059fe <_printf_i+0x8e>
 8005a1e:	6808      	ldr	r0, [r1, #0]
 8005a20:	6819      	ldr	r1, [r3, #0]
 8005a22:	c940      	ldmia	r1!, {r6}
 8005a24:	0605      	lsls	r5, r0, #24
 8005a26:	d402      	bmi.n	8005a2e <_printf_i+0xbe>
 8005a28:	0640      	lsls	r0, r0, #25
 8005a2a:	d500      	bpl.n	8005a2e <_printf_i+0xbe>
 8005a2c:	b2b6      	uxth	r6, r6
 8005a2e:	6019      	str	r1, [r3, #0]
 8005a30:	4b53      	ldr	r3, [pc, #332]	@ (8005b80 <_printf_i+0x210>)
 8005a32:	270a      	movs	r7, #10
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	2a6f      	cmp	r2, #111	@ 0x6f
 8005a38:	d100      	bne.n	8005a3c <_printf_i+0xcc>
 8005a3a:	3f02      	subs	r7, #2
 8005a3c:	0023      	movs	r3, r4
 8005a3e:	2200      	movs	r2, #0
 8005a40:	3343      	adds	r3, #67	@ 0x43
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db06      	blt.n	8005a5a <_printf_i+0xea>
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	9d03      	ldr	r5, [sp, #12]
 8005a52:	438a      	bics	r2, r1
 8005a54:	6022      	str	r2, [r4, #0]
 8005a56:	4333      	orrs	r3, r6
 8005a58:	d00c      	beq.n	8005a74 <_printf_i+0x104>
 8005a5a:	9d03      	ldr	r5, [sp, #12]
 8005a5c:	0030      	movs	r0, r6
 8005a5e:	0039      	movs	r1, r7
 8005a60:	f7fa fbea 	bl	8000238 <__aeabi_uidivmod>
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	3d01      	subs	r5, #1
 8005a68:	5c5b      	ldrb	r3, [r3, r1]
 8005a6a:	702b      	strb	r3, [r5, #0]
 8005a6c:	0033      	movs	r3, r6
 8005a6e:	0006      	movs	r6, r0
 8005a70:	429f      	cmp	r7, r3
 8005a72:	d9f3      	bls.n	8005a5c <_printf_i+0xec>
 8005a74:	2f08      	cmp	r7, #8
 8005a76:	d109      	bne.n	8005a8c <_printf_i+0x11c>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07db      	lsls	r3, r3, #31
 8005a7c:	d506      	bpl.n	8005a8c <_printf_i+0x11c>
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	dc02      	bgt.n	8005a8c <_printf_i+0x11c>
 8005a86:	2330      	movs	r3, #48	@ 0x30
 8005a88:	3d01      	subs	r5, #1
 8005a8a:	702b      	strb	r3, [r5, #0]
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	1b5b      	subs	r3, r3, r5
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	9b07      	ldr	r3, [sp, #28]
 8005a94:	0021      	movs	r1, r4
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	9805      	ldr	r0, [sp, #20]
 8005a9a:	9b06      	ldr	r3, [sp, #24]
 8005a9c:	aa09      	add	r2, sp, #36	@ 0x24
 8005a9e:	f7ff fef7 	bl	8005890 <_printf_common>
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d148      	bne.n	8005b38 <_printf_i+0x1c8>
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	4240      	negs	r0, r0
 8005aaa:	b00b      	add	sp, #44	@ 0x2c
 8005aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aae:	2220      	movs	r2, #32
 8005ab0:	6809      	ldr	r1, [r1, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	6022      	str	r2, [r4, #0]
 8005ab6:	2278      	movs	r2, #120	@ 0x78
 8005ab8:	4932      	ldr	r1, [pc, #200]	@ (8005b84 <_printf_i+0x214>)
 8005aba:	9104      	str	r1, [sp, #16]
 8005abc:	0021      	movs	r1, r4
 8005abe:	3145      	adds	r1, #69	@ 0x45
 8005ac0:	700a      	strb	r2, [r1, #0]
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	c940      	ldmia	r1!, {r6}
 8005ac8:	0610      	lsls	r0, r2, #24
 8005aca:	d402      	bmi.n	8005ad2 <_printf_i+0x162>
 8005acc:	0650      	lsls	r0, r2, #25
 8005ace:	d500      	bpl.n	8005ad2 <_printf_i+0x162>
 8005ad0:	b2b6      	uxth	r6, r6
 8005ad2:	6019      	str	r1, [r3, #0]
 8005ad4:	07d3      	lsls	r3, r2, #31
 8005ad6:	d502      	bpl.n	8005ade <_printf_i+0x16e>
 8005ad8:	2320      	movs	r3, #32
 8005ada:	4313      	orrs	r3, r2
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	d001      	beq.n	8005ae6 <_printf_i+0x176>
 8005ae2:	2710      	movs	r7, #16
 8005ae4:	e7aa      	b.n	8005a3c <_printf_i+0xcc>
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	4393      	bics	r3, r2
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	e7f8      	b.n	8005ae2 <_printf_i+0x172>
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	680d      	ldr	r5, [r1, #0]
 8005af4:	1d10      	adds	r0, r2, #4
 8005af6:	6949      	ldr	r1, [r1, #20]
 8005af8:	6018      	str	r0, [r3, #0]
 8005afa:	6813      	ldr	r3, [r2, #0]
 8005afc:	062e      	lsls	r6, r5, #24
 8005afe:	d501      	bpl.n	8005b04 <_printf_i+0x194>
 8005b00:	6019      	str	r1, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <_printf_i+0x19a>
 8005b04:	066d      	lsls	r5, r5, #25
 8005b06:	d5fb      	bpl.n	8005b00 <_printf_i+0x190>
 8005b08:	8019      	strh	r1, [r3, #0]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9d03      	ldr	r5, [sp, #12]
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	e7bf      	b.n	8005a92 <_printf_i+0x122>
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	1d11      	adds	r1, r2, #4
 8005b16:	6019      	str	r1, [r3, #0]
 8005b18:	6815      	ldr	r5, [r2, #0]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	0028      	movs	r0, r5
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	f000 f856 	bl	8005bd0 <memchr>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d001      	beq.n	8005b2c <_printf_i+0x1bc>
 8005b28:	1b40      	subs	r0, r0, r5
 8005b2a:	6060      	str	r0, [r4, #4]
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	2300      	movs	r3, #0
 8005b32:	9a03      	ldr	r2, [sp, #12]
 8005b34:	7013      	strb	r3, [r2, #0]
 8005b36:	e7ac      	b.n	8005a92 <_printf_i+0x122>
 8005b38:	002a      	movs	r2, r5
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	9906      	ldr	r1, [sp, #24]
 8005b3e:	9805      	ldr	r0, [sp, #20]
 8005b40:	9d07      	ldr	r5, [sp, #28]
 8005b42:	47a8      	blx	r5
 8005b44:	3001      	adds	r0, #1
 8005b46:	d0ae      	beq.n	8005aa6 <_printf_i+0x136>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	079b      	lsls	r3, r3, #30
 8005b4c:	d415      	bmi.n	8005b7a <_printf_i+0x20a>
 8005b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b50:	68e0      	ldr	r0, [r4, #12]
 8005b52:	4298      	cmp	r0, r3
 8005b54:	daa9      	bge.n	8005aaa <_printf_i+0x13a>
 8005b56:	0018      	movs	r0, r3
 8005b58:	e7a7      	b.n	8005aaa <_printf_i+0x13a>
 8005b5a:	0022      	movs	r2, r4
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	9906      	ldr	r1, [sp, #24]
 8005b60:	9805      	ldr	r0, [sp, #20]
 8005b62:	9e07      	ldr	r6, [sp, #28]
 8005b64:	3219      	adds	r2, #25
 8005b66:	47b0      	blx	r6
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d09c      	beq.n	8005aa6 <_printf_i+0x136>
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dcf0      	bgt.n	8005b5a <_printf_i+0x1ea>
 8005b78:	e7e9      	b.n	8005b4e <_printf_i+0x1de>
 8005b7a:	2500      	movs	r5, #0
 8005b7c:	e7f7      	b.n	8005b6e <_printf_i+0x1fe>
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	08005ead 	.word	0x08005ead
 8005b84:	08005ebe 	.word	0x08005ebe

08005b88 <memmove>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4288      	cmp	r0, r1
 8005b8c:	d902      	bls.n	8005b94 <memmove+0xc>
 8005b8e:	188b      	adds	r3, r1, r2
 8005b90:	4298      	cmp	r0, r3
 8005b92:	d308      	bcc.n	8005ba6 <memmove+0x1e>
 8005b94:	2300      	movs	r3, #0
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d007      	beq.n	8005baa <memmove+0x22>
 8005b9a:	5ccc      	ldrb	r4, [r1, r3]
 8005b9c:	54c4      	strb	r4, [r0, r3]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	e7f9      	b.n	8005b96 <memmove+0xe>
 8005ba2:	5c8b      	ldrb	r3, [r1, r2]
 8005ba4:	5483      	strb	r3, [r0, r2]
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	d2fb      	bcs.n	8005ba2 <memmove+0x1a>
 8005baa:	bd10      	pop	{r4, pc}

08005bac <_sbrk_r>:
 8005bac:	2300      	movs	r3, #0
 8005bae:	b570      	push	{r4, r5, r6, lr}
 8005bb0:	4d06      	ldr	r5, [pc, #24]	@ (8005bcc <_sbrk_r+0x20>)
 8005bb2:	0004      	movs	r4, r0
 8005bb4:	0008      	movs	r0, r1
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	f7fb fb84 	bl	80012c4 <_sbrk>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d103      	bne.n	8005bc8 <_sbrk_r+0x1c>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d000      	beq.n	8005bc8 <_sbrk_r+0x1c>
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	20000328 	.word	0x20000328

08005bd0 <memchr>:
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	1882      	adds	r2, r0, r2
 8005bd4:	4290      	cmp	r0, r2
 8005bd6:	d101      	bne.n	8005bdc <memchr+0xc>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	4770      	bx	lr
 8005bdc:	7803      	ldrb	r3, [r0, #0]
 8005bde:	428b      	cmp	r3, r1
 8005be0:	d0fb      	beq.n	8005bda <memchr+0xa>
 8005be2:	3001      	adds	r0, #1
 8005be4:	e7f6      	b.n	8005bd4 <memchr+0x4>

08005be6 <memcpy>:
 8005be6:	2300      	movs	r3, #0
 8005be8:	b510      	push	{r4, lr}
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d100      	bne.n	8005bf0 <memcpy+0xa>
 8005bee:	bd10      	pop	{r4, pc}
 8005bf0:	5ccc      	ldrb	r4, [r1, r3]
 8005bf2:	54c4      	strb	r4, [r0, r3]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	e7f8      	b.n	8005bea <memcpy+0x4>

08005bf8 <_realloc_r>:
 8005bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bfa:	0006      	movs	r6, r0
 8005bfc:	000c      	movs	r4, r1
 8005bfe:	0015      	movs	r5, r2
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d105      	bne.n	8005c10 <_realloc_r+0x18>
 8005c04:	0011      	movs	r1, r2
 8005c06:	f7ff fc55 	bl	80054b4 <_malloc_r>
 8005c0a:	0004      	movs	r4, r0
 8005c0c:	0020      	movs	r0, r4
 8005c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d103      	bne.n	8005c1c <_realloc_r+0x24>
 8005c14:	f7ff fbe2 	bl	80053dc <_free_r>
 8005c18:	002c      	movs	r4, r5
 8005c1a:	e7f7      	b.n	8005c0c <_realloc_r+0x14>
 8005c1c:	f000 f81c 	bl	8005c58 <_malloc_usable_size_r>
 8005c20:	0007      	movs	r7, r0
 8005c22:	4285      	cmp	r5, r0
 8005c24:	d802      	bhi.n	8005c2c <_realloc_r+0x34>
 8005c26:	0843      	lsrs	r3, r0, #1
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	d3ef      	bcc.n	8005c0c <_realloc_r+0x14>
 8005c2c:	0029      	movs	r1, r5
 8005c2e:	0030      	movs	r0, r6
 8005c30:	f7ff fc40 	bl	80054b4 <_malloc_r>
 8005c34:	9001      	str	r0, [sp, #4]
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d101      	bne.n	8005c3e <_realloc_r+0x46>
 8005c3a:	9c01      	ldr	r4, [sp, #4]
 8005c3c:	e7e6      	b.n	8005c0c <_realloc_r+0x14>
 8005c3e:	002a      	movs	r2, r5
 8005c40:	42bd      	cmp	r5, r7
 8005c42:	d900      	bls.n	8005c46 <_realloc_r+0x4e>
 8005c44:	003a      	movs	r2, r7
 8005c46:	0021      	movs	r1, r4
 8005c48:	9801      	ldr	r0, [sp, #4]
 8005c4a:	f7ff ffcc 	bl	8005be6 <memcpy>
 8005c4e:	0021      	movs	r1, r4
 8005c50:	0030      	movs	r0, r6
 8005c52:	f7ff fbc3 	bl	80053dc <_free_r>
 8005c56:	e7f0      	b.n	8005c3a <_realloc_r+0x42>

08005c58 <_malloc_usable_size_r>:
 8005c58:	1f0b      	subs	r3, r1, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	1f18      	subs	r0, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da01      	bge.n	8005c66 <_malloc_usable_size_r+0xe>
 8005c62:	580b      	ldr	r3, [r1, r0]
 8005c64:	18c0      	adds	r0, r0, r3
 8005c66:	4770      	bx	lr

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
